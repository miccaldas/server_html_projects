<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="http://constantconstipation.club/atom.xml" rel="self"/>
  
  <link href="http://constantconstipation.club/"/>
  <updated>2021-12-11T04:22:45.196Z</updated>
  <id>http://constantconstipation.club/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>creator</title>
    <link href="http://constantconstipation.club/2021/12/11/creator/"/>
    <id>http://constantconstipation.club/2021/12/11/creator/</id>
    <published>2021-12-11T02:31:02.000Z</published>
    <updated>2021-12-11T04:22:45.196Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been playing around with PHP lately. As always I’m remaking old projects in<br>new languages and tools.<br>The problem with PHP is that lulls you into a false sense of security,<br>everything seems familiar, easy, intuitive, and most of the time it is, but it<br>has its quirks, and an excessive reliance on the familiar and the known, stops<br>you from making progress. As I think I’ve done.<br>I created a very simple site that creates passwords. It asks what is the length that you want on you<br>password, and uses a randomness library to choose the characters.<br>I used numbers, letters and punctuation marks as the basis of my passwords. I<br>used 93 elements to combine. To manipulate it I turned it into an array, where<br>numbers - sequentially from 0 to 93 - are the keys of the tuple, although I<br>don’t think that there’s tuples in PHP, and the characters are the values. This<br>is particularly useful because the randomness modules for PHP that I found, only<br>deal with numbers. So the user chooses a number that is the length of his<br>password, the PHP module will iterate through the sequence and choose random<br>numbers between 0 and 93. We see what characters those number represent and<br>‘voilá’, you have a password!<br>As I’m sure I already wrote about this here, I’ll try not to repeat myself more<br>than necessary. Nevertheless, working with PHP and HTML created in me some<br>routines that I like to respect. I don’t know how correct it is what I’m going<br>to say but, it is the way that seems to me more adequate to work with projects<br>that have a lot of back and front end work.<br>As I seem to gravitate to projects that are centered on the use of databases,<br>that was how I first discovered PHP. And from there I created the following<br>habits:</p><ol><li>Separate presentation from the build of the app. I use PHP files instead of<br>HTML files because I can inject code to an HTML structure that only serves to<br>house them. My files are very small, as all development is done in modules<br>that are added via PHP inclusions. This creates simple and easy to understand<br>documents, and allows me to use a HTML template that I use as scaffolding for<br>most of my projects.</li><li>Separate the forms from the HTML and the PHP. Create their own files and<br>include them as insertions, exactly like I do with the PHP code.  </li></ol><p>I called the file that builds the passwords, “generator.php”, as you’ll see it<br>does much more than that, and if I’m very aware that that is a very bad coding<br>habit, the truth is that I had a lot of difficulties getting though this, so I<br>cut some corners.<br>First I import the array of symbols that looks a bit like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">83 =&gt; &#x27;@&#x27;,</span><br><span class="line">84 =&gt; &#x27;[&#x27;,</span><br><span class="line">85 =&gt; &#x27;]&#x27;,</span><br><span class="line">86 =&gt; &#x27;^&#x27;,</span><br><span class="line">87 =&gt; &#x27;_&#x27;,</span><br><span class="line">88 =&gt; &#x27;`&#x27;,</span><br><span class="line">89 =&gt; &#x27;&#123;&#x27;,</span><br><span class="line">90 =&gt; &#x27;|&#x27;,</span><br><span class="line">91 =&gt; &#x27;&#125;&#x27;,</span><br><span class="line">92 =&gt; &#x27;~&#x27;,</span><br></pre></td></tr></table></figure><p>My form was very simple, it was just a place where to input a number. I then<br>verify with the function <a href="https://www.php.net/manual/en/function.isset.php">isset</a> if the GET variables are working. Isset verifies if a variable is declared and if it is different than null. This does not save you from problems because, as I discovered myself, if a variable is a string with 0 characters isset acknowledges that is a string, has a set size and accepts it as good. Further down a long road I discovered the function <a href="https://www.php.net/manual/en/function.array-key-exists.php">array_key_exists</a>, which returns true if a key is in an array. As all GET and POST methods are arrays, this helps understand if the variables are there or no.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">&#x27;corrected_list.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$length</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>];</span><br></pre></td></tr></table></figure><p>As I alluded earlier, here we create a counter with the $i variable and set it<br>at 0, and while the counter count is lower than the password length, we get<br>key:value from the array, isolate the value and add it, loop by loop, to a new<br>string that’ll be the password.  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span>++ &lt; <span class="variable">$length</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$pass</span> = rand(<span class="number">0</span>, <span class="number">92</span>);</span><br><span class="line">    <span class="variable">$pwd_keys</span>[<span class="variable">$i</span>] = <span class="variable">$pass</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$pwd_keys</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$key_value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$item</span> = <span class="variable">$keys</span>[<span class="variable">$key_value</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$i</span>++ &lt; <span class="variable">$length</span>)</span><br><span class="line">        <span class="variable">$results</span>[<span class="variable">$i</span>] = <span class="variable">$item</span>;</span><br><span class="line">    <span class="variable">$mail</span> .= <span class="variable">$item</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After having isolated the new password in variable, I print it to the site.<br>I also thought that it would be instructive to learn ho to work with emails in<br>PHP. So I decided to allow the user to get his new password in the mail. He just<br>has to insert a valid email and the new password is sent automatically.<br>This was harder that I expected. I couldn’t figure out how to make the value of<br>the password persist, so you can create a password and then decide if you want<br>to send it through mail or not. What happened was that the variable was already<br>gone when the later step of inserting the email came around. I then tried to<br>write the new password to a text file, so I could retrieve it later. But for<br>some reason, obviously by an error from my part, whenever I tried to read it, it<br>would be erased. It was obvious that I was doing something wrong, but I also<br>felt that my error was done earlier and it was decoupling the password creation<br>step from the email insertion step. If I could do it all in one go, the problems<br>would disappear and I wouldn’t need text files to keep the password value.<br>So in the form for inserting the email, I created an hidden field, identified by<br>a name and that would use the password variable as a value for the GET method.<br>As it was integrated in the email form, when I would send it, the two pieces of<br>information went in tandem.  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1 class=&#x27;message&#x27;&gt;Your New Password is:&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1 class=&#x27;password&#x27;&gt;<span class="subst">$mail</span>&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;&#x27; method=&#x27;get&#x27;&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; id=&#x27;pwd&#x27; name=&#x27;pwd&#x27; value=<span class="subst">$mail</span>&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;email&#x27; id=&#x27;email&#x27; name=&#x27;email&#x27; placeholder=&#x27;Password in Email&#x27;&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Send&#x27;&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>The form data was treated in the same page as I wasn’t able to read<br>it successfully from another page. This was for the best, as this was<br>my objective all along. Not having to change pages through the all process.<br>I created a function that first verifies if there is a GET method available, if<br>yes, it allocates the values of the variables to new variables, defines a sender<br>email, that I created earlier, when installing the mail server. Which was,<br>oddly, a stress-free experience and went very well. So thank God for small<br>mercies.<br>I used PHP’s mail function, using Sendmail supported by a Postfix server.  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mailCreator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>) &#123;</span><br><span class="line">        <span class="variable">$to</span> = <span class="variable">$_GET</span>[<span class="string">&quot;email&quot;</span>];</span><br><span class="line">        <span class="variable">$from</span> = <span class="string">&quot;root@constantconstipation.club&quot;</span>;</span><br><span class="line">        <span class="variable">$message</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">        <span class="variable">$subject</span> = <span class="string">&quot;New Password&quot;</span>;</span><br><span class="line">        <span class="variable">$headers</span> = <span class="string">&quot;From: &quot;</span> . <span class="variable">$from</span>;</span><br><span class="line">        mail(<span class="variable">$to</span>,<span class="variable">$subject</span>,<span class="variable">$message</span>,<span class="variable">$headers</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;There&#x27;s nothing here.&quot;</span>; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">mailCreator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I should also mention that I had an horrible time with CSS, with everything that<br>could go wrong, going wrong. Code that wouldn’t appear in the browser or it<br>wouldn’t accept the new changes, an hassle.<br>Everyday grows my respect and admiration for the people who work with CSS on a<br>daily basis. It’s a capricious, fickle bitch.<br>Anyway, here’s the homepage of the site, where most things happen:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;HP&lt;/title&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;author&quot;</span> content=<span class="string">&quot;Mclds&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;Homepage&quot;</span>&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;index.css&quot;</span> media=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">header</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">include</span> &quot;<span class="title">header</span>.<span class="title">php</span>&quot;; ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">flex</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">column_left</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">column_center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">content</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">pwdform_container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span> <span class="title">require</span> &quot;<span class="title">pwd_form</span>.<span class="title">php</span>&quot;; ?&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">pwdaction</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;?<span class="title">php</span> <span class="title">require</span> &quot;<span class="title">generator</span>.<span class="title">php</span>&quot;; ?&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">column</span>-<span class="title">right</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;?<span class="title">php</span> <span class="title">include</span> &#x27;<span class="title">footer</span>.<span class="title">php</span>&#x27;; ?&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!-- <span class="title">https</span>://<span class="title">tinyurl</span>.<span class="title">com</span>/<span class="title">tonwks2</span> --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">if</span> ( <span class="title">window</span>.<span class="title">history</span>.<span class="title">replaceState</span> ) </span>&#123;</span><br><span class="line">    window.history.replaceState( <span class="literal">null</span>, <span class="literal">null</span>, window.location.href );</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt; &lt;!-- https:<span class="comment">//tinyurl.com/yyeckra6 --&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(typeof window.history.pushState == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        window.history.pushState(&#123;&#125;, <span class="string">&quot;Hide&quot;</span>, <span class="string">&quot;https://constantconstipation.club&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>And here’s the file with all the PHP:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">&#x27;corrected_list.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$length</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;length&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$pwd_keys</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$results</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="variable">$mail</span> = <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$i</span>++ &lt; <span class="variable">$length</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$pass</span> = rand(<span class="number">0</span>, <span class="number">92</span>);</span><br><span class="line">        <span class="variable">$pwd_keys</span>[<span class="variable">$i</span>] = <span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$pwd_keys</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$key_value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$item</span> = <span class="variable">$keys</span>[<span class="variable">$key_value</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$i</span>++ &lt; <span class="variable">$length</span>)</span><br><span class="line">            <span class="variable">$results</span>[<span class="variable">$i</span>] = <span class="variable">$item</span>;</span><br><span class="line">        <span class="variable">$mail</span> .= <span class="variable">$item</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1 class=&#x27;message&#x27;&gt;Your New Password is:&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1 class=&#x27;password&#x27;&gt;<span class="subst">$mail</span>&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;form action=&#x27;&#x27; method=&#x27;get&#x27;&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; id=&#x27;pwd&#x27; name=&#x27;pwd&#x27; value=<span class="subst">$mail</span>&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;email&#x27; id=&#x27;email&#x27; name=&#x27;email&#x27; placeholder=&#x27;Password in Email&#x27;&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;Send&#x27;&gt;&lt;/input&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">mailCreator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_GET</span>) &#123;</span><br><span class="line">            <span class="variable">$to</span> = <span class="variable">$_GET</span>[<span class="string">&quot;email&quot;</span>];</span><br><span class="line">            <span class="variable">$from</span> = <span class="string">&quot;root@constantconstipation.club&quot;</span>;</span><br><span class="line">            <span class="variable">$message</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">            <span class="variable">$subject</span> = <span class="string">&quot;New Password&quot;</span>;</span><br><span class="line">            <span class="variable">$headers</span> = <span class="string">&quot;From: &quot;</span> . <span class="variable">$from</span>;</span><br><span class="line">            mail(<span class="variable">$to</span>,<span class="variable">$subject</span>,<span class="variable">$message</span>,<span class="variable">$headers</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;There&#x27;s nothing here.&quot;</span>; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    mailCreator();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>I almost forgot, and this is important. In the index.php file there are two<br>small JavaScript scripts that are very useful. One stops the PHP file from being<br>called every time that the page  is refreshed and the other deletes the GET<br>information from the pages URL, as it calls it every time there’s a refresh.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been playing around with PHP lately. As always I’m remaking old projects in&lt;br&gt;new languages and tools.&lt;br&gt;The problem with PHP is t</summary>
      
    
    
    
    
    <category term="php, html, css" scheme="http://constantconstipation.club/tags/php-html-css/"/>
    
  </entry>
  
  <entry>
    <title>PHP-formatter</title>
    <link href="http://constantconstipation.club/2021/12/09/PHP-formatter/"/>
    <id>http://constantconstipation.club/2021/12/09/PHP-formatter/</id>
    <published>2021-12-09T20:53:33.000Z</published>
    <updated>2021-12-09T20:58:43.316Z</updated>
    
    <content type="html"><![CDATA[<p>I just finished a project where I learned a lot of new things and I<br> need to put everything on paper, so I don’t forget.<br> I was fiddling around with a website I’m making in PHP and noticed that,<br> in regards to formatting, I had a bit of a problem.<br> There are automatic formatters for almost all languages under the sun, but<br> what doesn’t exist, and it’s not surprising, is a formatter for<br> code that is embedded in another language’s file.<br> Let me be clearer, I came to PHP because I wanted to make database calls and<br> automate some aspects of my toy sites. That meant, and means, that my code is<br> not heavy-duty PHP. It’s more a lot of HTML interspersed with the occasional<br> PHP.<br> The HTML written in a PHP file, although not understood by the latter, it’s<br> still decoded successfully by the browser, which allows for running its code in<br> HTML or PHP files. The same doesn’t happen with PHP. If written in a HTML file,<br> its code will be treated as comment and won’t get run.<br> What this means is that you can program front/back end in PHP, but not in<br> HTML, which ends up with people like yours truly, writing everything in files<br> with PHP extensions.<br> Another thing that is important to mention is that HTML is ugly. It’s painful<br> to look at, and I, and I imagine a lot more people, have this deep desire to<br> make it look less awful.<br> That’s where the formatters come in. Although generally a little bossy and opinionated,<br> they’re nevertheless, an almost-good solution to the problem.<br> It never gets pretty, but it is much better than the starting point.<br> I found that I had no way to format the HTML I had inside PHP files, and that<br> felt bad.<br> But, I thought, if I altered the extension of the file just for a little bit, I<br> could use the formatter, change it back again, and the changes would already<br> been done! Easy. Except that, after a cursory reflexion, it really<br> isn’t. It would be really cumbersome going through that process every time I wanted to format.<br> It was then that I decided to automate it.<br> Even if it took considerably longer than doing it manually.<br> As it did.<br> I also took this as an opportunity to try different cli app builders that I had<br> on the backburner as something to try one day. Well, the day had come.<br> I wanted to create a class that would encompass all the steps of the process,<br> which are:  </p><ol><li>Make a list of all PHP files in the current folder,  </li><li>Change their extensions from ‘.php’ to ‘.html’,  </li><li>Open the folders, write a small message and close it back again,  </li><li>Get the HTML files, already formatted, and change them back to PHP.  </li></ol><p> The reasoning behind step 3 is this; I have my formatters running automatically<br> in Vim, every time that a file is saved. So, it only takes opening and closing<br> them to guarantee that the formatting is done. The message is just as an<br> assurance that is really working and that an effort has been made.<br> For the cli app build, I first tried <a href="https://typer.tiangolo.com/">Typer</a>, which<br> if really cool and complete, I couldn’t make it work in a Class environment.<br> The commands wouldn’t work if they shared argument space with things like ‘self’.<br> So I tried <a href="https://google.github.io/python-fire">Fire</a>, and it was love at<br> first site. Not only it supported classes, it was immensely more intuitive, easy<br> and user-friendly. I got the idea that you can’t go do all the things that you<br> can with Typer, but I’m a simple man with simple needs. Fire will suffice.<br> I started by creating a folder called ‘html’, to put the<br> files. If it’s mid/large project, it can get messy real quick.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> = os.getcwd()</span><br><span class="line">        path = <span class="built_in">dir</span> + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;html&quot;</span></span><br><span class="line">        os.mkdir(path)</span><br></pre></td></tr></table></figure><p> Then I made a list of all the PHP extension files in the current folder, I’m<br> assuming this will be opened where the content will be.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.php_file_list = []</span><br><span class="line">       files = os.listdir(os.curdir)</span><br><span class="line">       <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">           <span class="keyword">if</span> <span class="string">&quot;.php&quot;</span> <span class="keyword">in</span> file:</span><br><span class="line">               self.php_file_list.append(file)</span><br><span class="line">       <span class="keyword">return</span> self.php_file_list</span><br></pre></td></tr></table></figure><p> Now, in the file creation step, I had to account for two possible sources of<br> data: one, the user through command line commands, two, our pre-made list that<br> we just seen. If no file list is supplied by the user, the PHP file list is<br> used.<br> I tried to maintain the paths relative, although I loathe working with them, so<br> I wouldn’t have to change them each time there’s another project. If this will work,<br> only time will tell.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flist = self.available_php_files()</span><br><span class="line">        <span class="keyword">if</span> files:</span><br><span class="line">            ficheiros = files</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ficheiros = flist</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> ficheiros:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;.php&quot;</span> <span class="keyword">in</span> file:</span><br><span class="line">                    src = <span class="string">&quot;./&quot;</span> + file</span><br><span class="line">                    self.dst = <span class="string">&quot;html/&quot;</span></span><br><span class="line">                    shutil.copy(src, self.dst)</span><br><span class="line">                    self.new_dir = os.listdir(self.dst)</span><br><span class="line">                    <span class="keyword">for</span> file <span class="keyword">in</span> self.new_dir:</span><br><span class="line">                        infilename = os.path.join(self.dst, file)</span><br><span class="line">                        newfile = infilename.replace(<span class="string">&quot;.php&quot;</span>, <span class="string">&quot;.html&quot;</span>)</span><br><span class="line">                        os.rename(infilename, newfile)</span><br></pre></td></tr></table></figure><p> The next step was an interesting one. I had a loop I wanted to run through for<br> every file path in the HTML folder. It would open it, write a<br> message, and close it again.<br> But when I tried it, it was iterating through all entries, writing a message for each entry in each file,<br> when what I needed was one message per file.<br> So to make it go just one round, I set a counter to zero, defined a while loop<br> that ran only if the counter was below one. It worked pretty well.<br> I should also mention that os.listdir(some_folder) will give you a list of all<br> the files in said folder. This might not be too exciting, but it’s the type of<br> things that I’ll forget.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">os.chdir(self.dst)</span><br><span class="line">        self.curdir = os.getcwd()</span><br><span class="line">        sourcelst = []</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(self.curdir):</span><br><span class="line">            source = self.curdir + <span class="string">&quot;/&quot;</span> + file</span><br><span class="line">            sourcelst.append(source)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">runs</span>(<span class="params">file</span>):</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&quot;&lt;!--This file was automatically formatted.--&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        run_once = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> run_once &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> sourcelst:</span><br><span class="line">                runs(file)</span><br><span class="line">                run_once += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.signed_files = []</span><br><span class="line">        <span class="keyword">for</span> source <span class="keyword">in</span> sourcelst:</span><br><span class="line">            self.signed_files.append(source)</span><br></pre></td></tr></table></figure><p> Now we get the HTML files, copy them to their original folder and there we<br> change the extension back to ‘.php’.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> self.signed_files:</span><br><span class="line">           src = file</span><br><span class="line">           new = os.path.dirname(__file__)</span><br><span class="line">           shutil.copy(src, new)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(new):</span><br><span class="line">           <span class="keyword">if</span> <span class="string">&quot;.html&quot;</span> <span class="keyword">in</span> file:</span><br><span class="line">               infilename = os.path.join(new, file)</span><br><span class="line">               newfile = infilename.replace(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.php&quot;</span>)</span><br><span class="line">               os.rename(infilename, newfile)</span><br></pre></td></tr></table></figure><p> And lastly a main function that sums up all the steps.  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.create_html_folder()</span><br><span class="line">self.available_php_files()</span><br><span class="line">self.create_files()</span><br><span class="line">self.open_write_comment()</span><br><span class="line">self.new_php()</span><br><span class="line">self.new_php</span><br></pre></td></tr></table></figure><p> With the awesomeness of Fire, most of my user interaction woes were resolved.<br> All it takes is putting a small snippet of code in the bottom of the class,<br> like this:  </p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    fire.Fire(PhpFormatter)</span><br></pre></td></tr></table></figure><p> and all the methods, objects and properties are accessible through this kind of<br> syntax:  </p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;filename&gt; &lt;method_name&gt; --&lt;properties&gt; &lt;arguments&gt;</span><br></pre></td></tr></table></figure><p> All in all, a fun project.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I just finished a project where I learned a lot of new things and I&lt;br&gt; need to put everything on paper, so I don’t forget.&lt;br&gt; I was fid</summary>
      
    
    
    
    
    <category term="php, python, formatter" scheme="http://constantconstipation.club/tags/php-python-formatter/"/>
    
  </entry>
  
  <entry>
    <title>notes_app_final_update</title>
    <link href="http://constantconstipation.club/2021/09/30/notes-app-final-update/"/>
    <id>http://constantconstipation.club/2021/09/30/notes-app-final-update/</id>
    <published>2021-09-30T03:18:23.000Z</published>
    <updated>2021-12-09T21:08:16.398Z</updated>
    
    <content type="html"><![CDATA[<p>And still the incessant tinkering in the notes app!<br>I, not knowing when to leave good enough alone, and wanting very much to put<br>everything in the app, forgot an earlier, short and rare moment of good<br>sense that concluded that all this was just very silly.<br>And although it is, really, overkill, there was a sensible reason behind it. To<br>augment my awareness of the tagging system, its evolution and growth, and<br>through this, make me do better choices in this regard. And this, I think, is<br>important. Messy tags are not unhelpful as they are an active hindrance.<br>Maybe its all for the better and this will make me a more thoughtfull user.<br>Maybe. But for now it justs feel like I’ve been gilding the lily.<br>So these are the things that I added:</p><h3><span id="tag_links">tag_links</span></h3><p>I added a method that downloads all tags in thew db, with their connections<br>values in a tuple.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queries = [</span><br><span class="line">        <span class="string">&quot;SELECT k1, count(*) as links FROM notes GROUP BY k1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k2, count(*) as links FROM notes GROUP BY k2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k3, count(*) as links FROM notes GROUP BY k3&quot;</span>,</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h3><span id="new_tag">new_tag</span></h3><p>This method checks keywords names against the db record, and if it doesn’t find<br>a match, it outputs a message saying the keyword x is new.<br>To find a substring inside a list of strings, as is the case in looking for<br>keywords values in the tag archive, I used this formulation, after not getting<br>to work something similar but as a list comprehension. I think this is somewhat<br>deprecated, which is too bad, as is a very clear and simple piece of code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="built_in">any</span>(k <span class="keyword">in</span> i <span class="keyword">for</span> i <span class="keyword">in</span> self.records)</span><br></pre></td></tr></table></figure><h3><span id="count_links">count_links</span></h3><p>This methods checks how many connections a keyword has, and returns that<br>information.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> self.links:</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] == self.k1:</span><br><span class="line">        new_i = <span class="built_in">list</span>(i)</span><br><span class="line">        new_val = [new_i[<span class="number">0</span>], (new_i[<span class="number">1</span>] + <span class="number">1</span>)]</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The updated value of the keyword links is <span class="subst">&#123;new_val&#125;</span>&quot;</span>, fore=<span class="string">&quot;#c6f188&quot;</span>))</span><br></pre></td></tr></table></figure><p>And that was it. Here is the full code of the methods.</p><ol><li><p>count_links:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_links</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Will check the new keywords, see how many links they&#x27;ll have, and return that</span></span><br><span class="line"><span class="string">    information.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.links:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] == self.k1:</span><br><span class="line">            new_i = <span class="built_in">list</span>(i)</span><br><span class="line">            new_val = [new_i[<span class="number">0</span>], (new_i[<span class="number">1</span>] + <span class="number">1</span>)]</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The updated value of the keyword links is <span class="subst">&#123;new_val&#125;</span>&quot;</span>, fore=<span class="string">&quot;#c6f188&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] == self.k2:</span><br><span class="line">            new_i = <span class="built_in">list</span>(i)</span><br><span class="line">            new_val = [new_i[<span class="number">0</span>], (new_i[<span class="number">1</span>] + <span class="number">1</span>)]</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The updated value of the keyword links is <span class="subst">&#123;new_val&#125;</span>&quot;</span>, fore=<span class="string">&quot;#c6f188&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] == self.k3:</span><br><span class="line">            new_i = <span class="built_in">list</span>(i)</span><br><span class="line">            new_val = [new_i[<span class="number">0</span>], (new_i[<span class="number">1</span>] + <span class="number">1</span>)]</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The updated value of the keyword links is <span class="subst">&#123;new_val&#125;</span>&quot;</span>, fore=<span class="string">&quot;#c6f188&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    count_links()</span><br></pre></td></tr></table></figure></li><li><p>new_tag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_tag</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Will check the keyword names against the db records. If it doesn&#x27;t find a</span></span><br><span class="line"><span class="string">    match, it will produce a message saying the tag is new.&quot;&quot;&quot;</span></span><br><span class="line">    self.keywords = [self.k1, self.k2, self.k3]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> self.keywords:</span><br><span class="line">        res = <span class="built_in">any</span>(k <span class="keyword">in</span> i <span class="keyword">for</span> i <span class="keyword">in</span> self.records)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The keyword <span class="subst">&#123;k&#125;</span> is new in the database.&quot;</span>, fore=<span class="string">&quot;#f18892&quot;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    new_tag()</span><br></pre></td></tr></table></figure></li><li><p>tag_links</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tag_links</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;I&#x27;ll join the three lists and order them by number of connections.&quot;&quot;&quot;</span></span><br><span class="line">        queries = [</span><br><span class="line">            <span class="string">&quot;SELECT k1, count(*) as links FROM notes GROUP BY k1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SELECT k2, count(*) as links FROM notes GROUP BY k2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SELECT k3, count(*) as links FROM notes GROUP BY k3&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> q <span class="keyword">in</span> queries:</span><br><span class="line">                conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">                cur = conn.cursor()</span><br><span class="line">                query = q</span><br><span class="line">                cur.execute(</span><br><span class="line">                    query,</span><br><span class="line">                )</span><br><span class="line">            self.links = cur.fetchall()</span><br><span class="line">            <span class="comment"># Records is a list and row is a tuple with the tag name and number of connections.</span></span><br><span class="line">            self.links.sort(</span><br><span class="line">                key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">            )  <span class="comment"># This sorts the list by the value of the second element. https://tinyurl.com/yfn9alt7</span></span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        tag_links()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;And still the incessant tinkering in the notes app!&lt;br&gt;I, not knowing when to leave good enough alone, and wanting very much to put&lt;br&gt;ev</summary>
      
    
    
    
    
    <category term="notes, python, web" scheme="http://constantconstipation.club/tags/notes-python-web/"/>
    
  </entry>
  
  <entry>
    <title>stats</title>
    <link href="http://constantconstipation.club/2021/09/29/stats/"/>
    <id>http://constantconstipation.club/2021/09/29/stats/</id>
    <published>2021-09-29T15:17:46.000Z</published>
    <updated>2021-09-29T16:10:51.590Z</updated>
    
    <content type="html"><![CDATA[<p>This conversation will be, yet again, about the notes app, and some minor<br>tweaks that I made. There was a lot of things I tried to implement in the<br>app that, although successful, were a bit too much information for little<br>value. As I didn’t want to loose all that I had did, as some have the<br>silly charm of things that are not serious, needed, but just superfluous<br>and mildly cool. Or at least that’s what I think.<br>I decided to aggregate all this spurious information in a small module<br>called ‘stats.py’. It is accessed through the main interface as its own<br>entry, so it won’t bother anyone who doesn’t want to be bothered.  </p><h3><span id="tag_list">tag_list</span></h3><p>The first one returns a list of tags ordered by the number of mentions it<br>has. I’ve done it thusly:<br>To present the tags by number of mentions, I used the MySQL expression:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queries = [</span><br><span class="line">        <span class="string">&quot;SELECT k1, count(*) as links FROM notes GROUP BY k1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k2, count(*) as links FROM notes GROUP BY k2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k3, count(*) as links FROM notes GROUP BY k3&quot;</span>,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>This returns a tuple with the tag and the number of links.<br>To sort the list of tuples by the link number values, I had to find a way to<br>sort the tuples by its second value.<br>I find the following expression that does just that but that, sadly, I don’t<br>understand at all.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">records.sort(</span><br><span class="line">            key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>In order to clean the output of all the tuple and list symbols, I used a list<br>comprehension to flatten out the list of tuples to just a list.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">records = [i <span class="keyword">for</span> t <span class="keyword">in</span> records <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br></pre></td></tr></table></figure><p>I now had a clean output but I wanted to give some colour to the presentation.<br>Specifically I wanted the tag name to be in a colour and the value in another.<br>The solution I found was to zip the list and iteratively connect it with<br>herself.<br>This was a very cool solution, that I’m not involved at all, except as avid<br>reader of Stack-Overflow.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">it = <span class="built_in">iter</span>(records)</span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(it, it):</span><br><span class="line">    <span class="built_in">print</span>(color(<span class="string">&quot;  &quot;</span> + x, fore=<span class="string">&quot;#acac87&quot;</span>)), <span class="built_in">print</span>(color(<span class="string">&quot;  &quot;</span> + <span class="built_in">str</span>(y), fore=<span class="string">&quot;#f18892&quot;</span>))</span><br></pre></td></tr></table></figure><h3><span id="entries">entries</span></h3><p>This functions just returns the number of entries in the database, with this<br>expression:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;SELECT COUNT(*) FROM notes&quot;</span></span><br></pre></td></tr></table></figure><p>And there is nothing more to say, really.  </p><h3><span id="tags">tags</span></h3><p>This one was surprisingly difficult.  I needed to make three queries to the<br>database, one for each keyword column, with this format:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;SELECT COUNT(DISTINCT k1) FROM notes&quot;</span></span><br></pre></td></tr></table></figure><p>“Count” adds the k1 entries and “distinct” ensures that no repeated value is<br>taken in consideration. My idea was to bundle all the queries, as done before,<br>and sum the results between the elements of a list. I thought wrong.<br>For some reason, each value taken from k1, k2, k3, were presented as a organic<br>whole. The list had just one entry and the values had no individual existence.<br>So, no way to sum them. The not elegant but efficacious solution was to process<br>each column separately, insuring that its output was separated from the other<br>values. Something like this:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    query = queryk1</span><br><span class="line">    cur.execute(</span><br><span class="line">        query,</span><br><span class="line">    )</span><br><span class="line">    recordk1 = cur.fetchone()</span><br><span class="line"></span><br><span class="line">    query = queryk2</span><br><span class="line">    cur.execute(</span><br><span class="line">        query,</span><br><span class="line">    )</span><br><span class="line">    recordk2 = cur.fetchone()</span><br><span class="line"></span><br><span class="line">    query = queryk3</span><br><span class="line">    cur.execute(</span><br><span class="line">        query,</span><br><span class="line">    )</span><br><span class="line">    recordk3 = cur.fetchone()</span><br></pre></td></tr></table></figure><p>This is atrocious I know, but I just couldn’t grok how to solve that problem.<br>Now I had three lists, each with a one-element tuple inside it, that I needed<br>to add up. Once again, I helped myself to some magical coding, and used a<br>solution that I don’t understand at all.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">soma = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, <span class="built_in">zip</span>(recordk1, recordk2, recordk3)))</span><br></pre></td></tr></table></figure><p>Here’s the complete code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module will aggregate disparate statistics about the app.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> colr <span class="keyword">import</span> color</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag_list</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;I&#x27;ll join the three lists and order them by number of connections.&quot;&quot;&quot;</span></span><br><span class="line">    queries = [</span><br><span class="line">        <span class="string">&quot;SELECT k1, count(*) as links FROM notes GROUP BY k1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k2, count(*) as links FROM notes GROUP BY k2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SELECT k3, count(*) as links FROM notes GROUP BY k3&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> queries:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = q</span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(</span><br><span class="line">                query,</span><br><span class="line">            )</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="comment"># Records is a list and row is a tuple with the tag name and number of connections.</span></span><br><span class="line"></span><br><span class="line">        records.sort(</span><br><span class="line">            key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]</span><br><span class="line">        )  <span class="comment"># This sorts the list by the value of the second element. https://tinyurl.com/yfn9alt7</span></span><br><span class="line">        records = [i <span class="keyword">for</span> t <span class="keyword">in</span> records <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br><span class="line">        it = <span class="built_in">iter</span>(records)  <span class="comment"># Solution to intercalate colorization, taken from here https://tinyurl.com/ygpwdrcl</span></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(it, it):</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot;  &quot;</span> + x, fore=<span class="string">&quot;#acac87&quot;</span>)), <span class="built_in">print</span>(color(<span class="string">&quot;  &quot;</span> + <span class="built_in">str</span>(y), fore=<span class="string">&quot;#f18892&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tag_list()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entries</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of entries in the database&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot;SELECT COUNT(*) FROM notes&quot;</span></span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        records = [i <span class="keyword">for</span> t <span class="keyword">in</span> records <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br><span class="line">        records = <span class="built_in">str</span>(records)</span><br><span class="line">        records = records[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line">        tag_num = <span class="built_in">int</span>(records) * <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;  The number of database entries is <span class="subst">&#123;records&#125;</span>&quot;</span>, fore=<span class="string">&quot;#a5a590&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    entries()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tags</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Counts all keywords without duplications&quot;&quot;&quot;</span></span><br><span class="line">    queryk1 = <span class="string">&quot;SELECT COUNT(DISTINCT k1) FROM notes&quot;</span></span><br><span class="line">    queryk2 = <span class="string">&quot;SELECT COUNT(DISTINCT k2) FROM notes&quot;</span></span><br><span class="line">    queryk3 = <span class="string">&quot;SELECT COUNT(DISTINCT k3) FROM notes&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = queryk1</span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        recordk1 = cur.fetchone()</span><br><span class="line"></span><br><span class="line">        query = queryk2</span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        recordk2 = cur.fetchone()</span><br><span class="line"></span><br><span class="line">        query = queryk3</span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        recordk3 = cur.fetchone()</span><br><span class="line"></span><br><span class="line">        soma = <span class="built_in">tuple</span>(<span class="built_in">map</span>(<span class="built_in">sum</span>, <span class="built_in">zip</span>(recordk1, recordk2, recordk3)))  <span class="comment"># Taken from here: https://tinyurl.com/y35we4g7</span></span><br><span class="line">        soma = <span class="built_in">str</span>(soma)</span><br><span class="line">        soma = soma[<span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;  The number of tags in the database is <span class="subst">&#123;soma&#125;</span>&quot;</span>, fore=<span class="string">&quot;a5a590&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This conversation will be, yet again, about the notes app, and some minor&lt;br&gt;tweaks that I made. There was a lot of things I tried to imp</summary>
      
    
    
    
    
    <category term="python, notes, web" scheme="http://constantconstipation.club/tags/python-notes-web/"/>
    
  </entry>
  
  <entry>
    <title>notes_project_part_three</title>
    <link href="http://constantconstipation.club/2021/09/29/notes-project-part-three/"/>
    <id>http://constantconstipation.club/2021/09/29/notes-project-part-three/</id>
    <published>2021-09-29T07:57:08.000Z</published>
    <updated>2021-09-29T16:31:50.537Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been fiddling with my notes app so as to get a bit more information and control regarding the keywords. I’ve noticed that there are some poor examples of tagging. Tags that I didn’t gave much thought and now signify nothing, tags that are only marginally diferent and report to the same thing and and use of singular and plural forms of the same word. Many times this is the best way to guarantee that the tag will be useful. If I put both versions of the word in the tags, I’m much more likely to find it at first try.<br>Off course, and this is what I intend to do henceforth, with just a smidge of<br>discipline, I could just use the plural form, and that will be enough.<br>I wrote some comments on a file, during the beginning of the project, just to be<br>sure that I wouldn’t loose my aim for the note app changes. That, as expected,<br>had mixed results. I couldn’t do all that I set out to do, mainly because some<br>of the ideas were stupid, or too contrived or just simply too verbose to be of<br>any real use.<br>After a few days, I got back to this problem and was able to reduce the<br>complexity of the code.<br>Although most of it it’s pretty self-explanatory, or at least it seems that way<br>when everything is still fresh on my head, there is two or three comments I<br>would like to make.<br>To add all the output of the keyword columns, I used this MySQL expression:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;SELECT k1 FROM notes UNION SELECT k2 FROM notes UNION SELECT k3 FROM notes&quot;</span></span><br></pre></td></tr></table></figure><p>If I just could remind myself what I had did just some hours ago, I would have<br>saved myself a lot of trouble; as you can in the “stats” post I wrote after this<br>one.<br>I think it’s important to mention how I used the fuzzy searcher because, even if<br>I believe it’s an easy library and all is clear for now. In two weeks or less<br>this code will become <em>terra incognita</em>.<br>To do this we created a list with the three keyword values, and for each one,<br>Thefuzz would run all the tags records in comparison, and output only the<br>highest similarity value found.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.keywords = [self.k1, self.k2, self.k3]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.keywords:</span><br><span class="line">            value = process.extractOne(k, self.records)</span><br></pre></td></tr></table></figure><p>Then a funny problem appeared. I had set the similarity threshold in everything<br>above 80. If it was that high, it would trigger a message asking the user if he<br>wanted to change the tag. The problem I didn’t foresaw was that old, repeated<br>tags would have a value of 100, and because of this the app was asking the user<br>if he wanted to exchange its tag by the exactly same tag!<br>This was easily resolved by defining a new interval where the upper tier would<br>be below 100.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">    <span class="number">80</span> &lt; value[<span class="number">1</span>] &lt; <span class="number">100</span></span><br><span class="line">    ):</span><br><span class="line"> chg_tag_decision = <span class="built_in">input</span>(</span><br><span class="line">                    click.style(</span><br><span class="line">                        <span class="string">f&quot;We have noticed that you inputed the word <span class="subst">&#123;k&#125;</span>, that is very similar to the word <span class="subst">&#123;value[<span class="number">0</span>]&#125;</span>, that we already have as a keyword. Won&#x27;t you use it instead? [y/n] &quot;</span>,</span><br><span class="line">                        fg=<span class="string">&quot;magenta&quot;</span>,</span><br><span class="line">                        bold=<span class="literal">True</span>,</span><br><span class="line">                    )</span><br><span class="line">                )</span><br></pre></td></tr></table></figure><p>Here it is the full code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Collects user input, checks keywords for similarity, if they&#x27;re new and their frequency.</span></span><br><span class="line"><span class="string">Sends information to the database and creates the md and html pages.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> click</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> thefuzz <span class="keyword">import</span> fuzz</span><br><span class="line"><span class="keyword">from</span> thefuzz <span class="keyword">import</span> process</span><br><span class="line"><span class="keyword">from</span> colr <span class="keyword">import</span> color</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The class starts with user input and a list with all tags in a string list.</span></span><br><span class="line"><span class="string">    Having them separated will simplify processes. With this information collected,</span></span><br><span class="line"><span class="string">    first we&#x27;ll ask the keywords questions and run its processes, one by one.</span></span><br><span class="line"><span class="string">    After this is done we&#x27;ll send the information to the database and create the</span></span><br><span class="line"><span class="string">    md and html files.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;All the user inputs needed to create a new entry are located here.&quot;&quot;&quot;</span></span><br><span class="line">        self.title = <span class="built_in">input</span>(click.style(<span class="string">&quot; Title? » &quot;</span>, fg=<span class="string">&quot;magenta&quot;</span>, bold=<span class="literal">True</span>))</span><br><span class="line">        self.k1 = <span class="built_in">input</span>(click.style(<span class="string">&quot; Choose a keyword » &quot;</span>, fg=<span class="string">&quot;magenta&quot;</span>, bold=<span class="literal">True</span>))</span><br><span class="line">        self.k2 = <span class="built_in">input</span>(click.style(<span class="string">&quot; Choose another... » &quot;</span>, fg=<span class="string">&quot;magenta&quot;</span>, bold=<span class="literal">True</span>))</span><br><span class="line">        self.k3 = <span class="built_in">input</span>(click.style(<span class="string">&quot; And another... » &quot;</span>, fg=<span class="string">&quot;magenta&quot;</span>, bold=<span class="literal">True</span>))</span><br><span class="line">        <span class="built_in">print</span>(click.style(<span class="string">&quot; Write a note.&quot;</span>, fg=<span class="string">&quot;magenta&quot;</span>, bold=<span class="literal">True</span>))</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        self.note = click.edit().rstrip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        input_data()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">taglst</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Union allows to combine two or more sets of results into one, but,</span></span><br><span class="line"><span class="string">        the number and order of columns that appear in the SELECT statement</span></span><br><span class="line"><span class="string">        must be the same, and the data types must be equal or compatible.</span></span><br><span class="line"><span class="string">        Union removes duplicates.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;SELECT k1 FROM notes UNION SELECT k2 FROM notes UNION SELECT k3 FROM notes&quot;</span></span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            records = cur.fetchall()  <span class="comment"># Results come as one-element tuples. It&#x27;s needed to turn it to list.</span></span><br><span class="line">            self.records = [i <span class="keyword">for</span> t <span class="keyword">in</span> records <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        taglst()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">issimilar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Uses Thefuzz library to compare keyword strings. If similarity is above 80%,</span></span><br><span class="line"><span class="string">        it prints a mesage asking if the user wants to change it.&quot;&quot;&quot;</span></span><br><span class="line">        self.keywords = [self.k1, self.k2, self.k3]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> self.keywords:</span><br><span class="line">            value = process.extractOne(k, self.records)</span><br><span class="line">            <span class="keyword">if</span> value[<span class="number">1</span>] &gt; <span class="number">80</span>:</span><br><span class="line">                chg_tag_decision = <span class="built_in">input</span>(</span><br><span class="line">                    <span class="string">f&quot;We have noticed that you inputed the word <span class="subst">&#123;k&#125;</span>, that is very similar to the word <span class="subst">&#123;value[<span class="number">0</span>]&#125;</span>, that we already have as a keyword. Won&#x27;t you use it instead? [y/n] &quot;</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">if</span> chg_tag_decision == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">                    <span class="keyword">if</span> k == self.k1:</span><br><span class="line">                        self.k1 = value[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> k == self.k2:</span><br><span class="line">                        self.k2 = value[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> k == self.k3:</span><br><span class="line">                        self.k3 = value[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        issimilar()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_to_db</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Creates the urls for pages and sends the data to the database&quot;&quot;&quot;</span></span><br><span class="line">        self.pg_tit = self.title.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        self.md_path = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span> + self.pg_tit + <span class="string">&quot;.md&quot;</span></span><br><span class="line">        self.url = <span class="string">&quot;http://localhost/notes/pages/html/&quot;</span> + self.pg_tit + <span class="string">&quot;.html&quot;</span></span><br><span class="line">        answers = [self.title, self.k1, self.k2, self.k3, self.note, self.url]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;INSERT INTO notes (title, k1, k2, k3, note, url) VALUES (%s, %s, %s, %s, %s, %s)&quot;</span></span><br><span class="line">            cur.execute(query, answers)</span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - The entry named: <span class="subst">&#123;self.title&#125;</span>, was added to the database.&quot;</span>, fore=<span class="string">&quot;#acac87&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        add_to_db()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_md_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We create a new markdown file in its folder and write to it, the content</span></span><br><span class="line"><span class="string">        of the meta-data, and the note.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;select * from notes order by ntid desc limit 1&quot;</span></span><br><span class="line">            cur.execute(</span><br><span class="line">                query,</span><br><span class="line">            )</span><br><span class="line">            records = cur.fetchall()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            <span class="built_in">id</span> = row[<span class="number">0</span>]</span><br><span class="line">            titulo = row[<span class="number">1</span>]</span><br><span class="line">            time = row[<span class="number">7</span>]</span><br><span class="line">            k1 = row[<span class="number">2</span>]</span><br><span class="line">            k2 = row[<span class="number">3</span>]</span><br><span class="line">            k3 = row[<span class="number">4</span>]</span><br><span class="line">            nota = row[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.md_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&quot;---&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;id: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">id</span>))</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;title: &quot;</span> + titulo)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;author: mclds&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;time: &quot;</span> + <span class="built_in">str</span>(time))</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;tags: &quot;</span> + k1 + <span class="string">&quot;, &quot;</span> + k2 + <span class="string">&quot;, &quot;</span> + k3)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;---&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(nota)</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - It was created the markdown file named, <span class="subst">&#123;self.md_path&#125;</span>.&quot;</span>, fore=<span class="string">&quot;#acac87&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        add_md_page()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_html_page</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Where we create a html version of the markdown file.</span></span><br><span class="line"><span class="string">        We just convert the md file into an html one, and</span></span><br><span class="line"><span class="string">        put it in the html folder.&quot;&quot;&quot;</span></span><br><span class="line">        html_path = <span class="string">&quot;/srv/http/notes/pages/html/&quot;</span> + self.pg_tit + <span class="string">&quot;.html&quot;</span></span><br><span class="line">        cmd = <span class="string">&quot;touch &quot;</span> + html_path</span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line">        cmd = (</span><br><span class="line">            <span class="string">&quot;pandoc --highlight-style=zenburn --metadata title=&#x27;&quot;</span></span><br><span class="line">            + self.title</span><br><span class="line">            + <span class="string">&quot;&#x27; -s &#x27;&quot;</span></span><br><span class="line">            + self.md_path</span><br><span class="line">            + <span class="string">&quot;&#x27; -o &#x27;&quot;</span></span><br><span class="line">            + html_path</span><br><span class="line">            + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">        )</span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">f&quot;[*] - It was created the html file named, <span class="subst">&#123;self.url&#125;</span>.&quot;</span>, fore=<span class="string">&quot;#acac87&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        add_html_page()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been fiddling with my notes app so as to get a bit more information and control regarding the keywords. I’ve noticed that there are </summary>
      
    
    
    
    
    <category term="python, web, notes" scheme="http://constantconstipation.club/tags/python-web-notes/"/>
    
  </entry>
  
  <entry>
    <title>Notes Tag Management Project Notes</title>
    <link href="http://constantconstipation.club/2021/09/19/tag_mgt/"/>
    <id>http://constantconstipation.club/2021/09/19/tag_mgt/</id>
    <published>2021-09-19T18:45:44.283Z</published>
    <updated>2021-09-19T18:45:44.283Z</updated>
    
    <content type="html"><![CDATA[<p>date: 03/09/2021<br>  title: The Basics  </p><p>  My objective now is to create a rough sketch of the macro tasks that the<br>  will entail. So as I not loose track, as I so often do.<br>  The idea is for the insertion of new tags and the deletion of old ones, be<br>  totally automatic, having no human participation.<br>  For this to happen we  need:  </p><ol><li>Know what the current tags are,  </li><li>verify all newly inputed tags to see if they are not in our record,  </li><li>add them to our record if they’re new.  </li><li>We need to know if someone updates a tag. He could have erased a tag<br>or created a new one.  </li><li>We need to update the file with new content,  </li><li>also we need to erase it when necessary.  </li><li>Tags that have 0 connections WILL BE ELIMINATED. </li></ol><p>  #####################     </p><p>  Looking at this, and from the top of my head; two ideas came to me:<br>  DISCARD THE FILE. It’s not needed, it’s the remnant of an old idea, we<br>  would be much better served with a database.<br>  USER GUIDANCE, when choosing the tags:  </p><ul><li>Create a system to tell them if there’s already tags with the same name.  </li></ul><p>  #####################  </p><p>  Database Roadmap:  </p><pre><code>- Test if everything is OK, when we discard of what, seems, to be    spurious code, since we abandoned the word cloud idea.  - Every time that the HP would be called, it would do a database query,    through php, asking for all the tags. That would be what it shows.- Maybe is not necessary to build anything vis a vis the database.    Probably the &#39;notes&#39; db is more than the enough. We just need:      tag names,      number of links. To know if they&#39;re dead or not.  </code></pre><p>  And I think that’s it for now. I’m going to start on the database, and see<br>  where we go from there.  </p><h3><span id="update">UPDATE:</span></h3><p>I’ve been thinking a little more about it, and there’s nothing we can add,<br>at this moment, with these objectives, to the db, that would make any<br>difference. What we have to do is create more awareness about the processes<br>of the functionalities modules, that’ll give us most of the information<br>we need. See entry below, for more on this issue.  </p><p>#############################################################################  </p><p>  date: 03/09/2021<br>  title: Tag Evaluation Structure  </p><p>  I’m thinking of something along these lines for the verification of the<br>  tags, at the moment of adding a or updating it.<br>  I think it can happen one of of three things:  </p><pre><code>1. The tag is new. Do nothing. The tag is already in the database,  our functions run from information from it. Nothing has to be updated.  It should output a &#39;The tag is new&#39; information string.  2. The tag is known. Do nothing. All the work is done.  Even the number of connections is automatically taken care of by  the database. Output, &#39;The tag X ha now y connections.&#39;  3. The tag is similar to other tags. This is more challenging.  I still have no idea how to do this.  I will take care first of linking the function modules to this new thing  we&#39;re doing.  </code></pre><p>#############################################################################</p><p>  date: 04/09/2021<br>  title: Connect Tag Evaluation to Functionalities Modules  </p><p>  The tag evaluation class is almost finished, I still have to add a method<br>  to erase the tag if the connection number gets to 0.<br>  But, at the moment it can:  </p><pre><code>1. Assess if the tag is new.  2. Send a message telling the user this.  3. Assess if it was already in the database.  3. If 3 is positive, send a message to the user, with the updated  connections number of tag.  4. Verify if the tag inserted is very much like an old tag, using a  library called &quot;Fuzzywuzzy&quot;, link in the &#39;bkmks&#39; app. If not, do nothing,  if yes, send a message to the user, suggesting him that he might want to replace it.  </code></pre><p>  I intend to add today, a link in the functionalities modules to the class that has all the tag evaluation methods.<br>  I’m thinking that creating a simple variable with a list of the three keywords, that can then be imported to class, will be enough.<br>  It’ll be also necessary to insert in ‘add.py’, a mechanism that allows the user to see the tag suggestion done by the similarites evaluation  method.<br>  Now that I think about it, this poses a problem, the class can’t be, at the same time, importing from ‘add.py’ and exporting to it.<br>  I think that the solution is to transform the evaluation function into a separate module.  </p><p>###############################################################################</p><p>  date: 07/09/2021<br>  title: Passed fuzzy function to ‘add.py’</p><p>  Because of import issues, I did what I didn’t want to do, added the fuzzy function to add.py.<br>  This didn’t solve anything as I am still unable to make it work, even inside the same file.<br>  It needs to be debugged.<br>  Another probable solution would be to turn add,py into a class. But that would certainly bring its own unknown quantity of problems.  </p><p>################################################################################</p><p> date: 19/09/21<br> title: Fuzzy function working in ‘add.py’</p><p> I, finally, made the ‘Thefuzz’ library, not ‘fuzzywuzzy’ anymore, working in ‘add.py’. I should’ve bee using the ‘process’ method o f the<br> library, not the default ‘fuzz.ratio’. Or, at least, that is how I made it run.<br> I’ve still to add all the other info calls, but, truth be told, I’m kind of scared of touching it after how long it took to make it work just  for similar keywords.  </p><p>##################################################################################</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;date: 03/09/2021&lt;br&gt;  title: The Basics  &lt;/p&gt;
&lt;p&gt;  My objective now is to create a rough sketch of the macro tasks that the&lt;br&gt;  will ent</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>the_notes_project</title>
    <link href="http://constantconstipation.club/2021/08/29/the-notes-project/"/>
    <id>http://constantconstipation.club/2021/08/29/the-notes-project/</id>
    <published>2021-08-29T20:26:45.000Z</published>
    <updated>2021-09-20T10:47:49.404Z</updated>
    
    <content type="html"><![CDATA[<p>Lately I returned to a project that had always some interesting challenges, my notes app. Because I already have something like two hundred and change notes, there is really no option but to mechanize all the steps. Doing it by hand, as I always do, is out of the question.<br>My objective is replicate my cli note taking app in a web setting. I already did this project, but the results were not very satisfactory, despite achieving everything I set out to do.<br>In broad strokes, to convert the app I need to:</p><ol><li>Take the notes from the database,</li><li>Convert them to markdown,</li><li>Do any changes needed to the content,</li><li>Convert them to html,</li><li>Put them in the app,</li><li>Update the database with new content URLs.</li><li>Make changes to the current functionalities, to accommodate the alterations.</li></ol><p>Unfortunately I didn’t do this documenting exercise when all was fresh in my mind, so, this all will be a archaeological in nature. Let’s hope we stay near the truth.<br>Although the project is not finished, it has a tendency to be more labour intensive than expected, and this list may change. I leave here a list of important project files, where they’re being used and what they do.</p> <br><table><thead><tr><th>Files</th><th>Sub-project</th><th>Objective</th></tr></thead><tbody><tr><td>html_converter.py</td><td>file_conversion</td><td>Converts markdown files to html.</td></tr><tr><td>md_converter.py</td><td>file_conversion</td><td>Converts database entries into markdown.</td></tr><tr><td>build_csv.py</td><td>csv_file_creation</td><td>Creates a list with the id of the notes and their URLs.</td></tr><tr><td>link_lst</td><td>csv_file_creation</td><td>File created by ‘build_csv.py’. Internal use.</td></tr><tr><td>id_lst</td><td>csv_file_creation</td><td>File created by ‘build_csv.py’. Internal use.</td></tr><tr><td>id_links.csv</td><td>csv_file_creation</td><td>File created by ‘build_csv.py’. Internal use.</td></tr><tr><td>csv_cleanup.py</td><td>csv_file_creation</td><td>Cleans the csv created automatically. Generates two lists: id’s and URLs.</td></tr><tr><td>build_csv.py</td><td>csv_file_creation</td><td>Writes a csv file with the two lists and uploads it to the database.</td></tr><tr><td>chg_wordcloud.py</td><td>wordcloud_tags</td><td>Several activities needed to insert our data in the svg file.</td></tr><tr><td>beautsoup2.txt</td><td>wordcloud_tags</td><td>File created by ‘chg_wordcloud.py’. Internal use.</td></tr><tr><td>complete_lines.txt</td><td>wordcloud_tags</td><td>File created by ‘chg_wordcloud.py’. Internal use.</td></tr><tr><td>comprehension_output</td><td>wordcloud_tags</td><td>File created by ‘chg_wordcloud.py’. Internal use.</td></tr><tr><td>lines_tags1.txt</td><td>wordcloud_tags</td><td>File created by ‘chg_wordcloud.py’. Internal use.</td></tr><tr><td>text_tags_order.txt</td><td>wordcloud_tags</td><td>File created by ‘chg_wordcloud.py’. Internal use.</td></tr><tr><td>wordcloud_linenumbers.py</td><td>wordcloud_tags</td><td>Defines what lines are to be edited in the svg file.</td></tr><tr><td>all_tags.txt</td><td>content_tags</td><td>Contains all ocurrences of tags. Regardless if they’re repeated or not.</td></tr><tr><td>sorted list.txt</td><td>content_tags</td><td>List of tags with no repeats.</td></tr></tbody></table><br><p>I’ll start by what is, more or less, the real beginning, a trove of notes, already in markdown, that I found inside a folder I use for archives.<br>At first I thought that I found a lot of notes that weren’t part of the current database. Because of this a lot of work went into preparing them and comparing them to the database content, to understand if they were, indeed, lost content. Turns out they weren’t and much of this work was in vain.  Not completely because, what was learned in this stage, was used after in other places. So, silver linings.<br>I imagine that the best beginning will be the file conversions. The seminal moment has to arrive when, in this second effort, we decide to let go of the files that we found, and focus only on converting the database’s content. Where, in the end, everything could be found.  </p><h3><span id="update">UPDATE</span></h3><p>This has much changed since I wrote it. It is now significantly shorter. Mainly because I understood that much of what they were doing, or trying to do, was either wrong or a dead end.<br>See the larger update at the bottom of this post.</p><br><br><hr><h3><span id="1-md_converterpy">1 - md_converter.py</span></h3><p>This file dumps the database, does some alterations to it, adds metadata fields, and writes the note content beneath.  </p><ol><li>Connects to the database:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">     conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">     cur = conn.cursor()</span><br><span class="line">     query = <span class="string">&quot;SELECT * FROM notes&quot;</span></span><br><span class="line">     cur.execute(</span><br><span class="line">         query,</span><br><span class="line">     )</span><br><span class="line">     records = cur.fetchall()</span><br></pre></td></tr></table></figure><ol start="2"><li>Gets the title value from the first row of returned values, puts a dash instead of empty spaces in it, deletes the slashes, and from these changes creates a new title, ended in ‘.md’:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">    title = <span class="built_in">str</span>(row[<span class="number">1</span>])</span><br><span class="line">    change_tit = title.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    change_tit1 = change_tit.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    filename = change_tit1 + <span class="string">&quot;.md&quot;</span></span><br><span class="line">    logger.info(filename)</span><br><span class="line">    writepath = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span> + filename</span><br><span class="line">    logger.info(writepath)</span><br></pre></td></tr></table></figure><ol start="3"><li>Now it’s created the front-matter fields. They are:<ul><li>ID,</li><li>Title,</li><li>Time,</li><li>Tags.</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(writepath, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;---\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;id: &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">0</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;title: &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">1</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;time: &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">7</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;tags: &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">2</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">3</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">4</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;\n---\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;~~~python\n&quot;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(row[<span class="number">5</span>]))</span><br><span class="line">    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;~~~&quot;</span>)</span><br></pre></td></tr></table></figure><p>The full text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Although some of the notes were already converted to markdown,</span></span><br><span class="line"><span class="string">   there is more content in the app database that can be used.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go into a log. Has to be on all functions.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">app_converter</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll dump the db and then iterate through it,</span></span><br><span class="line"><span class="string">    turning every entry in a md file.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot;SELECT * FROM notes&quot;</span></span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            title = <span class="built_in">str</span>(row[<span class="number">1</span>])</span><br><span class="line">            change_tit = title.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line">            change_tit1 = change_tit.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            filename = change_tit1 + <span class="string">&quot;.md&quot;</span></span><br><span class="line">            logger.info(filename)</span><br><span class="line">            writepath = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span> + filename</span><br><span class="line">            logger.info(writepath)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(writepath, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(<span class="string">&quot;---\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;id: &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">0</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;title: &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">1</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;time: &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">7</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;tags: &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">2</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">3</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;, &quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">4</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;\n---\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;~~~python\n&quot;</span>)</span><br><span class="line">                file.write(<span class="built_in">str</span>(row[<span class="number">5</span>]))</span><br><span class="line">                file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                file.write(<span class="string">&quot;~~~&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app_converter()</span><br></pre></td></tr></table></figure><br><br><hr><h3><span id="2-html_converterpy">2 - html_converter.py</span></h3><p>The module converts the markdown files just created to html ones. Because it’s easier, I used <a href="https://pandoc.org/">Pandoc</a> instead of relying in Python tools.</p><ol><li>If a filename is in the markdown folder, and is a markdown file, add its full path to a list.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">folder = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span></span><br><span class="line">paths = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">        paths.append(os.path.join(folder, filename))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><ol start="2"><li>For each of these full paths we collected, get just the filename part, take out the three last characters from it, add to them ‘.html’, and use them in Pandoc as objective files for the markdown files.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">    filename = os.path.basename(path)</span><br><span class="line">    html_url = filename[:-<span class="number">3</span>] + <span class="string">&quot;.html&quot;</span></span><br><span class="line">    logger.info(html_url)</span><br><span class="line">    cmd = <span class="string">&quot;pandoc --highlight-style=zenburn -s &quot;</span> + filename + <span class="string">&quot; -o&quot;</span> + html_url</span><br><span class="line">    logger.info(cmd)</span><br><span class="line">    subprocess.run(cmd, cwd=folder, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>Finally, pass all html files to their own folder.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">        cmd = <span class="string">&quot;mv &quot;</span> + folder + <span class="string">&quot;/&quot;</span> + filename + <span class="string">&quot; /srv/http/notes/pages/html/&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Full text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module that will convert all md files into html, using pandoc&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go into a log. Has to be on all functions.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;I&#x27;ll be using pandoc as shell command as it is easier than programming it&quot;&quot;&quot;</span></span><br><span class="line">    folder = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span></span><br><span class="line">    paths = []</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">            paths.append(os.path.join(folder, filename))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">        filename = os.path.basename(path)</span><br><span class="line">        html_url = filename[:-<span class="number">3</span>] + <span class="string">&quot;.html&quot;</span></span><br><span class="line">        logger.info(html_url)</span><br><span class="line">        cmd = <span class="string">&quot;pandoc --highlight-style=zenburn -s &quot;</span> + filename + <span class="string">&quot; -o&quot;</span> + html_url</span><br><span class="line">        logger.info(cmd)</span><br><span class="line">        subprocess.run(cmd, cwd=folder, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(folder):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&quot;.html&quot;</span>):</span><br><span class="line">            cmd = <span class="string">&quot;mv &quot;</span> + folder + <span class="string">&quot;/&quot;</span> + filename + <span class="string">&quot; /srv/http/notes/pages/html/&quot;</span></span><br><span class="line">            subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    convert()</span><br></pre></td></tr></table></figure><br><br><hr><h3><span id="3-id_url_listpy">3 - id_url_list.py</span></h3><p>This module creates a list with the id and URL of each note. This will serve to insert the URLs in the database.<br>The code is heavily commented, so I won’t say another word and publish the full version right now.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module to get a list with the id of the notes and their urls&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> markdown</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">id_url_list</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create a file with the id and url of each note.</span></span><br><span class="line"><span class="string">    This will be fed to the database.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    md_page = <span class="string">&quot;/srv/http/notes/pages/markdown/&quot;</span>  <span class="comment"># This is needed to extract metadata values from the notes.</span></span><br><span class="line">    db_html_page = (</span><br><span class="line">        <span class="string">&quot;http://localhost/notes/pages/html/&quot;</span>  <span class="comment"># Format changes as this is how Nginx will look for the pages in the site.</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    notes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(md_page):  <span class="comment"># For file in this folder:</span></span><br><span class="line">        notes.append(md_page + filename)  <span class="comment"># Creating the path for the markdown files</span></span><br><span class="line">    logger.info(notes)</span><br><span class="line"></span><br><span class="line">    id_list = []  <span class="comment"># The appending list must be outside of the loop. Took me forever to get this one.</span></span><br><span class="line">    title_list = []</span><br><span class="line">    <span class="keyword">for</span> note <span class="keyword">in</span> notes:</span><br><span class="line">        <span class="keyword">if</span> note[-<span class="number">3</span>:] == <span class="string">&quot;.md&quot;</span>:  <span class="comment"># There were python files in the folder, it was needed to specify only &#x27;md&#x27;.</span></span><br><span class="line">            data = Path(note).read_text(</span><br><span class="line">                encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">            )  <span class="comment"># Formulation from the libpath library. I think it enables reaching info tied to a path.</span></span><br><span class="line">            md = markdown.Markdown(extensions=[<span class="string">&quot;meta&quot;</span>])  <span class="comment"># Defines the meta.information extension.</span></span><br><span class="line">            md.convert(data)</span><br><span class="line">            str_id = <span class="built_in">list</span>(md.Meta.items())[<span class="number">0</span>][</span><br><span class="line">                <span class="number">1</span></span><br><span class="line">            ]  <span class="comment"># Extract id value from metadata, by its position in the result dictionary.</span></span><br><span class="line">            id_list.extend(str_id)  <span class="comment"># The extend() method adds all the elements of an iterable to the end of a list.</span></span><br><span class="line">            str_title = <span class="built_in">list</span>(md.Meta.items())[<span class="number">1</span>][<span class="number">1</span>]  <span class="comment"># Extract title metadata value.</span></span><br><span class="line">            title_list.extend(str_title)</span><br><span class="line"></span><br><span class="line">    titles = []</span><br><span class="line">    <span class="keyword">for</span> titsy <span class="keyword">in</span> title_list:</span><br><span class="line">        tits = titsy.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;_&quot;</span>)  <span class="comment"># Many titles were phrases, it was needed to connect them.</span></span><br><span class="line">        <span class="comment"># tit = tits.lower()  # Pass them all to lowercase.</span></span><br><span class="line">        title = db_html_page + tits + <span class="string">&quot;.html&quot;</span>  <span class="comment"># Add the html file identifier.</span></span><br><span class="line">        titles.append(title)</span><br><span class="line"></span><br><span class="line">    id_title_dict = &#123;id_list[i]: titles[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(id_list))&#125;  <span class="comment"># Converts two lists into a dictionary.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Let&#x27;s create a items list, so we can send two values when we are writing the csv.</span></span><br><span class="line">    <span class="comment"># https://www.delftstack.com/howto/python/python-dictionary-index/</span></span><br><span class="line">    itms = <span class="built_in">list</span>(id_title_dict.items())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Here will be passing the new dictionary into a csv file that can be understood by the database.</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;id_links.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> write_file:</span><br><span class="line">        writer = csv.writer(write_file, delimiter=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">        writer.writerow([<span class="string">&quot;ntid&quot;</span>, <span class="string">&quot;link&quot;</span>])</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> itms:</span><br><span class="line">            writer.writerow(&#123;item&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    id_url_list()</span><br></pre></td></tr></table></figure><br><br><hr><h3><span id="4-csv_cleanuppy">4 - csv_cleanup.py</span></h3><p>The csv produced by the Python library was far from OK. A case of garbage in, garbage out. Some cleaning was in order.<br>This file is mainly a series of text manipulations, with the objective of making the csv look more with a real csv.<br>As was the case with the last one, this file is also very commented, so I’ll post the complete version right now:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;The csv produced by the csv library is defective. To solve that</span></span><br><span class="line"><span class="string">    we&#x27;re going to clean it up after the fact. We&#x27;ll turn the id</span></span><br><span class="line"><span class="string">    and urls in two lists, and used them to build the csv manually.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_cleanup</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Several list and string manipulation commands will be used</span></span><br><span class="line"><span class="string">    until we achieve desired results.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;id_links.csv&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        outpt = f.read()</span><br><span class="line"></span><br><span class="line">    chng_chars0 = []  <span class="comment"># This kind of processes imply always a sequence of intermediate steps that have no</span></span><br><span class="line">    chng_chars1 = []  <span class="comment"># personality themselves, but are necessary for completing the task, Out of sheer</span></span><br><span class="line">    chng_chars2 = []  <span class="comment"># despair, I numerated the changes. I could&#x27;ve been able to use the same name, but it</span></span><br><span class="line">    chng_chars3 = []  <span class="comment"># wouldn&#x27;t have been as helpfull when debugging.</span></span><br><span class="line">    chng_chars3_id = []</span><br><span class="line">    chng_chars4_id = []</span><br><span class="line">    chng_chars4 = []</span><br><span class="line">    link_list = []</span><br><span class="line">    split_list = outpt.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> split_list:  <span class="comment"># The entries had superfluous &quot;(&#x27;&#x27;)&quot; characters. We eliminate them.</span></span><br><span class="line">        chng_chars0.append(i[<span class="number">2</span>:-<span class="number">2</span>])</span><br><span class="line">    logger.info(chng_chars0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chng_chars0:  <span class="comment"># There was also excessive &#x27;&quot;&#x27; characters. That was erased too.</span></span><br><span class="line">        chng_chars1.append(i.replace(<span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    logger.info(chng_chars1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chng_chars1:</span><br><span class="line">        chng_chars2.append(i.split(<span class="string">&quot;,&quot;</span>))  <span class="comment"># As the document was a string and didn&#x27;t had the concept of first</span></span><br><span class="line">    logger.info(chng_chars2)  <span class="comment"># and second bits of information; it was needed to divide the entries,</span></span><br><span class="line">    chng_chars2 = chng_chars2[<span class="number">1</span>:-<span class="number">1</span>]  <span class="comment"># with a comma as delimiter. Creates small lists of two elements.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chng_chars2)):  <span class="comment"># Separated the first element of the lists into a id list, and the</span></span><br><span class="line">        chng_chars3.append(chng_chars2[i][<span class="number">1</span>])  <span class="comment"># second to a link list.</span></span><br><span class="line">        chng_chars3_id.append(chng_chars2[i][<span class="number">0</span>])</span><br><span class="line">    logger.info(chng_chars3)</span><br><span class="line">    logger.info(chng_chars3_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chng_chars3:  <span class="comment"># There was, still, too much punctuation. Erased extraneous &quot;&#x27;&quot;.</span></span><br><span class="line">        chng_chars4.append(i.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    logger.info(chng_chars4)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chng_chars3_id:  <span class="comment"># There were, still, some left.</span></span><br><span class="line">        chng_chars4_id.append(i.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    logger.info(chng_chars4_id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> chng_chars4:  <span class="comment"># Did away with superfluous leading white space.</span></span><br><span class="line">        link_list.append(i.lstrip())</span><br><span class="line">    logger.info(link_list)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;link_lst&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># Wrote a list with urls for all html pages.</span></span><br><span class="line">        f.write(<span class="built_in">str</span>(link_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;id_lst&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> <span class="built_in">id</span>:  <span class="comment"># Wrote a list of database ids to go with urls.</span></span><br><span class="line">        <span class="built_in">id</span>.write(<span class="built_in">str</span>(chng_chars4_id))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    csv_cleanup()</span><br></pre></td></tr></table></figure><br><br><hr><h3><span id="5-build_csvpy">5 - build_csv.py</span></h3><p>This module starts from the two files produced by ‘id_url_list.py’, and inserted them into a csv file.<br>This file, as others in this project, is very commented, so no comments from me are necessary.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module That will send the info to the database and build the csv file as an alternative&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_build</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll start with the two files and write them to</span></span><br><span class="line"><span class="string">    a csv file manually.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(</span><br><span class="line">        <span class="string">&quot;id_lst&quot;</span>, <span class="string">&quot;r&quot;</span></span><br><span class="line">    ) <span class="keyword">as</span> idlst:  <span class="comment"># We open the file produced by the last module and turn its content into a object that we</span></span><br><span class="line">        id_src = idlst.read()  <span class="comment"># can work with. Opening the id list.</span></span><br><span class="line"></span><br><span class="line">    id_lt = id_src.split(</span><br><span class="line">        <span class="string">&quot;,&quot;</span></span><br><span class="line">    )  <span class="comment"># The read() function returns a string. To be able to have a concept of discrete elements,</span></span><br><span class="line">    csv_build.id_lt = id_lt[</span><br><span class="line">        <span class="number">1</span>:-<span class="number">1</span></span><br><span class="line">    ]  <span class="comment"># needed to run it to a list by spliting the string by a delimiter. The comma in this case.</span></span><br><span class="line">    <span class="built_in">print</span>(csv_build.id_lt[<span class="number">0</span>])  <span class="comment"># Elements came with superfluous &#x27;)&#x27; characters in the beginning and end.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;link_lst&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> lnklst:  <span class="comment"># Opening the link list.</span></span><br><span class="line">        lnk_src = lnklst.read()</span><br><span class="line"></span><br><span class="line">    lnk_lt = lnk_src.split()  <span class="comment"># Splitting the strings, for the same reasons explained above.</span></span><br><span class="line">    lnk_l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lnk_lt:</span><br><span class="line">        lnk_l.append(i[:-<span class="number">1</span>])  <span class="comment"># Erasing the last character in each element. I forget why.</span></span><br><span class="line">    csv_build.lnk_lt = lnk_l[</span><br><span class="line">        <span class="number">1</span>:-<span class="number">1</span></span><br><span class="line">    ]  <span class="comment"># Erased &quot;[]&quot; characters from list, as they were being considered as part of the first and last</span></span><br><span class="line">    <span class="built_in">print</span>(csv_build.lnk_lt[<span class="number">0</span>])  <span class="comment"># link elements.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;final.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># Creating the csv to be used to upload to the database.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span>, lnk <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            id_lt, lnk_lt</span><br><span class="line">        ):  <span class="comment"># Zip function permits to iterate between two functions, without one being first or second, but</span></span><br><span class="line">            f.write(<span class="built_in">id</span> + <span class="string">&quot;|&quot;</span> + lnk)  <span class="comment"># on equal footing. Useful when we needed to pair lists elements with each other.</span></span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    csv_build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db_send</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Send the results to the db with update commands.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">id</span>, lnk <span class="keyword">in</span> <span class="built_in">zip</span>(csv_build.id_lt, csv_build.lnk_lt):</span><br><span class="line">            query = <span class="string">&quot;UPDATE notes SET url = &quot;</span> + lnk + <span class="string">&quot; WHERE ntid = &quot;</span> + <span class="built_in">id</span></span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    db_send()</span><br></pre></td></tr></table></figure><br><br><hr><h3><span id="6-chg_wordcloudpy">6 - chg_wordcloud.py</span></h3><p>This module is completely filled with preparatory work to insert the html links of the notes in the svg image.<br>This haas proved to be more complicated than expected. Every time I think I’m near, there appears another preparatory work that must be done, and I’m again mired in a swamp of preliminary work.<br>I’m starting to feel that I’m probably loosing focus and letting myself get mired in all this preparative steps. That there’s a simple and clearer way of doing things. I just have to find it.  </p><ol><li>The first function I just called ‘prep-work’, and it contains various small tasks that, in itself, don’t amount to much, but prepare the way for other things.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prep_work</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We create a path containing object, turned wordcloud file into a list of lines,</span></span><br><span class="line"><span class="string">    created a file with the final lines that will house the a tag, enumerated the list</span></span><br><span class="line"><span class="string">    wordcloud. All prep-work necessary, we hope, to make the changes.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;path_lst.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> path:</span><br><span class="line">        path = path.read()</span><br><span class="line">    path = [path]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        path = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordcloud2.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> wordcloud:</span><br><span class="line">        wordcloud = wordcloud.read()</span><br><span class="line">    wordcloud = [wordcloud]</span><br><span class="line">    <span class="comment"># print(type(wordcloud))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> wordcloud:</span><br><span class="line">        wordcloud = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    subs = <span class="string">&quot;transform&quot;</span></span><br><span class="line"></span><br><span class="line">    res = [i <span class="keyword">for</span> i <span class="keyword">in</span> wordcloud <span class="keyword">if</span> subs <span class="keyword">in</span> i]</span><br><span class="line"></span><br><span class="line">    complete_lines = []</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(res, path):</span><br><span class="line">        complete_lines.append(x + y)</span><br><span class="line">    prep_work.complete_lines = complete_lines[:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;complete_lines.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> complete_lines:</span><br><span class="line">            f.write(line)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    wordcloud = <span class="built_in">enumerate</span>(wordcloud)</span><br><span class="line">    prep_work.wordcloud = <span class="built_in">list</span>(wordcloud)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    prep_work()</span><br></pre></td></tr></table></figure><ol start="2"><li>Here we connect the URLs to their corresponding tags.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbered_tags</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;In order to put the URLS to their corresponding text tag, we created a list</span></span><br><span class="line"><span class="string">    that has line numbers and tag names. This is to be used when we insert the</span></span><br><span class="line"><span class="string">    the lines from &#x27;complete_lines&#x27;, as a marker of where to put them in the</span></span><br><span class="line"><span class="string">    document.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    text_tags = []  <span class="comment"># Here I was trying to extract a substring from between two other substrings.</span></span><br><span class="line">    left_side = <span class="string">&#x27;alphabetic&quot;&gt;&#x27;</span>  <span class="comment"># I half failed as, if I did get what I wanted, I also collected a lot of shit</span></span><br><span class="line">    right_side = <span class="string">&quot;&lt;/text&gt;&quot;</span>  <span class="comment"># that I don&#x27;t know where it came from.</span></span><br><span class="line">    <span class="keyword">for</span> (</span><br><span class="line">        num,</span><br><span class="line">        line,</span><br><span class="line">    ) <span class="keyword">in</span> prep_work.wordcloud:  <span class="comment"># This is not the best praxis, but I&#x27;ll leave this here, for now, as it got me</span></span><br><span class="line">        idx_left_side = line.find(left_side) + <span class="built_in">len</span>(</span><br><span class="line">            left_side</span><br><span class="line">        )  <span class="comment"># nearer to where I want to get, and it&#x27;s late and I&#x27;m not nearly finished.</span></span><br><span class="line">        idx_right_side = line.find(right_side)</span><br><span class="line">        text_tags.append((num, line[idx_left_side:idx_right_side]))</span><br><span class="line">    <span class="keyword">for</span> num, line <span class="keyword">in</span> text_tags:  <span class="comment"># From here onwards things start to make sense again.</span></span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            <span class="keyword">del</span> line</span><br><span class="line">    text_tags = text_tags[<span class="number">8</span>:-<span class="number">4</span>]</span><br><span class="line">    numbered_tags.text_tags = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> t: <span class="string">&quot;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> t, text_tags))  <span class="comment"># https://tinyurl.com/yeqxxgrf</span></span><br><span class="line">    numbered_tags.text_tags = numbered_tags.text_tags[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numbered_tags()</span><br></pre></td></tr></table></figure><ol start="3"><li>Here the objective was to create a list with the tags and the lines of text, with original text and our own, already done. This proved too difficult in Python, so I used various shell tools, that are documented in the body of the function.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lines_tags</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Function to create a list with tags and complete lines&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_tag = numbered_tags.text_tags</span></span><br><span class="line">    <span class="comment"># Because I had a lot of difficulty doing this kind of operations in Python, I turned for Bash,</span></span><br><span class="line">    <span class="comment"># for help, specifcally Sed.</span></span><br><span class="line">    <span class="comment"># I added separated tag values to the complete lines file with this expression:</span></span><br><span class="line">    <span class="comment"># sed -e &quot;s/tag= \(.*\)\&quot;&gt;/\1/&quot; complete_lines.txt</span></span><br><span class="line">    <span class="comment"># More here - https://tinyurl.com/yfrayu96</span></span><br><span class="line">    <span class="comment"># But Sed put the tag immediately after the url. So I&#x27;ll use this function to create a list of</span></span><br><span class="line">    <span class="comment"># tuples.</span></span><br><span class="line">    <span class="comment"># UPDATE</span></span><br><span class="line">    <span class="comment"># I couldn&#x27;t acomplish even that.</span></span><br><span class="line">    <span class="comment"># So, the day was saved with this Sed expression:</span></span><br><span class="line">    <span class="comment"># sed &#x27;s/php?/&amp;, /&#x27; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># It adds a comma and a space after &#x27;php?&#x27;</span></span><br><span class="line">    <span class="comment"># It was also needed to add &#x27; characters around the entries.</span></span><br><span class="line">    <span class="comment"># To add one in the beginning of the line, I used this expression:</span></span><br><span class="line">    <span class="comment"># sed -ne &quot;s/.*/\&#x27;&amp;/p&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># To add another at the end of the line, I used:</span></span><br><span class="line">    <span class="comment"># It was needed to put one in the end of the first element:</span></span><br><span class="line">    <span class="comment"># sed &quot;s/php?/&amp;&#x27;/&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># and at the start of the second.</span></span><br><span class="line">    <span class="comment"># sed &quot;s/, /&amp;&#x27;/&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># I used Awk to add a tag field to the file. The script is this:</span></span><br><span class="line">    <span class="comment"># With all this we have a file that is more evolved than what I had before.</span></span><br><span class="line">    <span class="comment"># I&#x27;m going to import it, and try to finish in Python.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;lines_tags1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lt = f.read()</span><br><span class="line">    lt = [lt]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lt:</span><br><span class="line">        lt = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">del</span> lt[<span class="number">1</span>]</span><br><span class="line">    new_lt = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lt:</span><br><span class="line">        new_lt.append(i.split(<span class="string">&quot;, &quot;</span>))</span><br><span class="line">    <span class="keyword">del</span> new_lt[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_lt:</span><br><span class="line">        i[<span class="number">0</span>] = i[<span class="number">0</span>][:-<span class="number">3</span>] + i[<span class="number">1</span>] + i[<span class="number">0</span>][-<span class="number">2</span>]</span><br><span class="line">    lines_tags.new_lt = new_lt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lines_tags()</span><br></pre></td></tr></table></figure><ol start="4"><li>The svg file already has an order that the tags must obey, when being inserted into the body of the code. I analyzed the svg code with <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a>, to connect correctly our tags with the image’s.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beautsoup</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll use BeautifullSoup, a HTML interpreter to read the svg file and get the</span></span><br><span class="line"><span class="string">    value of each tag in the text, so as to connect it to right tag in the a tag.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordcloud.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        soup = BeautifulSoup(fp, <span class="string">&quot;xml&quot;</span>, from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    beautsoup.texts = soup.find_all(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    beautsoup.new = []</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> beautsoup.texts:</span><br><span class="line">        beautsoup.new.append(text.get_text())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> beautsoup.new:</span><br><span class="line">        i = <span class="string">&quot;&#x27;&quot;</span> + i + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;beautsoup.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(beautsoup.new))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    beautsoup()</span><br></pre></td></tr></table></figure><ol start="5"><li>Sorting the URLS in the same order as the tags.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taglines_sorting</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll sort the urls in the same order as the tags. We&#x27;ll look for</span></span><br><span class="line"><span class="string">    occurrences of the tags in the text in the urls. When found,</span></span><br><span class="line"><span class="string">    it&#x27;ll create a order that will be, we hope, easy to do.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    lt = lines_tags.new_lt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;beautsoup2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readline()</span><br><span class="line">    lines.split(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># Objects coming from files are very large strings, who are good for nothing. These steps were an</span></span><br><span class="line">    lines = lines.split()  <span class="comment"># effort at making it mnore elastic.</span></span><br><span class="line">    lines1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lines:</span><br><span class="line">        lines1.append(i.replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">    it_line = []</span><br><span class="line">    flat_lt = []</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(lines1)), lines1):  <span class="comment"># I use zip when I want to simultaneously open two iterables.</span></span><br><span class="line">        it_line.append((<span class="built_in">str</span>(i), line))</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it_line:  <span class="comment"># The list had another list inside. We simplified it.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(element) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> element:</span><br><span class="line">                flat_lt.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flat_lt.append(element)</span><br><span class="line">    flat_lt[<span class="number">0</span>] = (<span class="string">&quot;0&quot;</span>, <span class="string">&quot;python&quot;</span>)  <span class="comment"># These two entries had supirous charcters inside. We clean them</span></span><br><span class="line">    flat_lt[-<span class="number">1</span>] = (<span class="string">&quot;283&quot;</span>, <span class="string">&quot;array&quot;</span>)  <span class="comment"># with these commands</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flat_lt)):</span><br><span class="line">        line = flat_lt[i][<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            [x <span class="keyword">for</span> x <span class="keyword">in</span> lt <span class="keyword">if</span> line <span class="keyword">in</span> x]</span><br><span class="line">        )  <span class="comment"># List comprehension to ascertain if substring is contained inside a string.</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    taglines_sorting()</span><br></pre></td></tr></table></figure><p>The full text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module To insert in the Wordcloud file, the urls of the notes&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;tag_order.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prep_work</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We create a path containing object, turned wordcloud file into a list of lines,</span></span><br><span class="line"><span class="string">    created a file with the final lines that will house the a tag, enumerated the list</span></span><br><span class="line"><span class="string">    wordcloud. All prep-work necessary, we hope, to make the changes.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;path_lst.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> path:</span><br><span class="line">        path = path.read()</span><br><span class="line">    path = [path]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        path = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordcloud2.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> wordcloud:</span><br><span class="line">        wordcloud = wordcloud.read()</span><br><span class="line">    wordcloud = [wordcloud]</span><br><span class="line">    <span class="comment"># print(type(wordcloud))</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> wordcloud:</span><br><span class="line">        wordcloud = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    subs = <span class="string">&quot;transform&quot;</span></span><br><span class="line"></span><br><span class="line">    res = [i <span class="keyword">for</span> i <span class="keyword">in</span> wordcloud <span class="keyword">if</span> subs <span class="keyword">in</span> i]</span><br><span class="line"></span><br><span class="line">    complete_lines = []</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(res, path):</span><br><span class="line">        complete_lines.append(x + y)</span><br><span class="line">    prep_work.complete_lines = complete_lines[:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;complete_lines.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> complete_lines:</span><br><span class="line">            f.write(line)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    wordcloud = <span class="built_in">enumerate</span>(wordcloud)</span><br><span class="line">    prep_work.wordcloud = <span class="built_in">list</span>(wordcloud)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    prep_work()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numbered_tags</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;In order to put the URLS to their corresponding text tag, we created a list</span></span><br><span class="line"><span class="string">    that has line numbers and tag names. This is to be used when we insert the</span></span><br><span class="line"><span class="string">    the lines from &#x27;complete_lines&#x27;, as a marker of where to put them in the</span></span><br><span class="line"><span class="string">    document.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    text_tags = []  <span class="comment"># Here I was trying to extract a substring from between two other substrings.</span></span><br><span class="line">    left_side = <span class="string">&#x27;alphabetic&quot;&gt;&#x27;</span>  <span class="comment"># I half failed as, if I did get what I wanted, I also collected a lot of shit</span></span><br><span class="line">    right_side = <span class="string">&quot;&lt;/text&gt;&quot;</span>  <span class="comment"># that I don&#x27;t know where it came from.</span></span><br><span class="line">    <span class="keyword">for</span> (</span><br><span class="line">        num,</span><br><span class="line">        line,</span><br><span class="line">    ) <span class="keyword">in</span> prep_work.wordcloud:  <span class="comment"># This is not the best praxis, but I&#x27;ll leave this here, for now, as it got me</span></span><br><span class="line">        idx_left_side = line.find(left_side) + <span class="built_in">len</span>(</span><br><span class="line">            left_side</span><br><span class="line">        )  <span class="comment"># nearer to where I want to get, and it&#x27;s late and I&#x27;m not nearly finished.</span></span><br><span class="line">        idx_right_side = line.find(right_side)</span><br><span class="line">        text_tags.append((num, line[idx_left_side:idx_right_side]))</span><br><span class="line">    <span class="keyword">for</span> num, line <span class="keyword">in</span> text_tags:  <span class="comment"># From here onwards things start to make sense again.</span></span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            <span class="keyword">del</span> line</span><br><span class="line">    text_tags = text_tags[<span class="number">8</span>:-<span class="number">4</span>]</span><br><span class="line">    numbered_tags.text_tags = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> t: <span class="string">&quot;&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> t, text_tags))  <span class="comment"># https://tinyurl.com/yeqxxgrf</span></span><br><span class="line">    numbered_tags.text_tags = numbered_tags.text_tags[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numbered_tags()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lines_tags</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Function to create a list with tags and complete lines&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># num_tag = numbered_tags.text_tags</span></span><br><span class="line">    <span class="comment"># Because I had a lot of difficulty doing this kind of operations in Python, I turned for Bash,</span></span><br><span class="line">    <span class="comment"># for help, specifcally Sed.</span></span><br><span class="line">    <span class="comment"># I added separated tag values to the complete lines file with this expression:</span></span><br><span class="line">    <span class="comment"># sed -e &quot;s/tag= \(.*\)\&quot;&gt;/\1/&quot; complete_lines.txt</span></span><br><span class="line">    <span class="comment"># More here - https://tinyurl.com/yfrayu96</span></span><br><span class="line">    <span class="comment"># But Sed put the tag immediately after the url. So I&#x27;ll use this function to create a list of</span></span><br><span class="line">    <span class="comment"># tuples.</span></span><br><span class="line">    <span class="comment"># UPDATE</span></span><br><span class="line">    <span class="comment"># I couldn&#x27;t acomplish even that.</span></span><br><span class="line">    <span class="comment"># So, the day was saved with this Sed expression:</span></span><br><span class="line">    <span class="comment"># sed &#x27;s/php?/&amp;, /&#x27; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># It adds a comma and a space after &#x27;php?&#x27;</span></span><br><span class="line">    <span class="comment"># It was also needed to add &#x27; characters around the entries.</span></span><br><span class="line">    <span class="comment"># To add one in the beginning of the line, I used this expression:</span></span><br><span class="line">    <span class="comment"># sed -ne &quot;s/.*/\&#x27;&amp;/p&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># To add another at the end of the line, I used:</span></span><br><span class="line">    <span class="comment"># It was needed to put one in the end of the first element:</span></span><br><span class="line">    <span class="comment"># sed &quot;s/php?/&amp;&#x27;/&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># and at the start of the second.</span></span><br><span class="line">    <span class="comment"># sed &quot;s/, /&amp;&#x27;/&quot; lines_tags.txt</span></span><br><span class="line">    <span class="comment"># I used Awk to add a tag field to the file. The script is this:</span></span><br><span class="line">    <span class="comment"># With all this we have a file that is more evolved than what I had before.</span></span><br><span class="line">    <span class="comment"># I&#x27;m going to import it, and try to finish in Python.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;lines_tags1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lt = f.read()</span><br><span class="line">    lt = [lt]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lt:</span><br><span class="line">        lt = i.split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">del</span> lt[<span class="number">1</span>]</span><br><span class="line">    new_lt = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lt:</span><br><span class="line">        new_lt.append(i.split(<span class="string">&quot;, &quot;</span>))</span><br><span class="line">    <span class="keyword">del</span> new_lt[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> new_lt:</span><br><span class="line">        i[<span class="number">0</span>] = i[<span class="number">0</span>][:-<span class="number">3</span>] + i[<span class="number">1</span>] + i[<span class="number">0</span>][-<span class="number">2</span>]</span><br><span class="line">    lines_tags.new_lt = new_lt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    lines_tags()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">beautsoup</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll use BeautifullSoup, a HTML interpreter to read the svg file and get the</span></span><br><span class="line"><span class="string">    value of each tag in the text, so as to connect it to right tag in the a tag.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordcloud.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        soup = BeautifulSoup(fp, <span class="string">&quot;xml&quot;</span>, from_encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    beautsoup.texts = soup.find_all(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">    beautsoup.new = []</span><br><span class="line">    <span class="keyword">for</span> text <span class="keyword">in</span> beautsoup.texts:</span><br><span class="line">        beautsoup.new.append(text.get_text())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> beautsoup.new:</span><br><span class="line">        i = <span class="string">&quot;&#x27;&quot;</span> + i + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;beautsoup.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(beautsoup.new))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    beautsoup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">taglines_sorting</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll sort the urls in the same order as the tags. We&#x27;ll look for</span></span><br><span class="line"><span class="string">    occurrences of the tags in the text in the urls. When found,</span></span><br><span class="line"><span class="string">    it&#x27;ll create a order that will be, we hope, easy to do.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    lt = lines_tags.new_lt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;beautsoup2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readline()</span><br><span class="line">    lines.split(<span class="string">&quot;\n&quot;</span>)  <span class="comment"># Objects coming from files are very large strings, who are good for nothing. These steps were an</span></span><br><span class="line">    lines = lines.split()  <span class="comment"># effort at making it mnore elastic.</span></span><br><span class="line">    lines1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lines:</span><br><span class="line">        lines1.append(i.replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">    it_line = []</span><br><span class="line">    flat_lt = []</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(lines1)), lines1):  <span class="comment"># I use zip when I want to simultaneously open two iterables.</span></span><br><span class="line">        it_line.append((<span class="built_in">str</span>(i), line))</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> it_line:  <span class="comment"># The list had another list inside. We simplified it.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(element) <span class="keyword">is</span> <span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> element:</span><br><span class="line">                flat_lt.append(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flat_lt.append(element)</span><br><span class="line">    flat_lt[<span class="number">0</span>] = (<span class="string">&quot;0&quot;</span>, <span class="string">&quot;python&quot;</span>)  <span class="comment"># These two entries had supirous charcters inside. We clean them</span></span><br><span class="line">    flat_lt[-<span class="number">1</span>] = (<span class="string">&quot;283&quot;</span>, <span class="string">&quot;array&quot;</span>)  <span class="comment"># with these commands</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(flat_lt)):</span><br><span class="line">        line = flat_lt[i][<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            [x <span class="keyword">for</span> x <span class="keyword">in</span> lt <span class="keyword">if</span> line <span class="keyword">in</span> x]</span><br><span class="line">        )  <span class="comment"># List comprehension to ascertain if substring is contained inside a string.</span></span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    taglines_sorting()</span><br></pre></td></tr></table></figure><h1><span id="update">UPDATE</span></h1><p>Well, on the bright side, I finished what I set out to do, to set up the svg image with new links. On not so brighter note, I did almost all important work by hand or through the shell, and, in the end, this was nothing that I really wanted. Not really.<br>I had had, I thought, a simple task ahead of me: To insert into a file, lines that should be 3 lines apart between themselves.<br>I couldn’t do it. I stumbled on the problem of needing two iterators running at the same time, one giving the lines to insert, another for the line numbers, and, one, couldn’t solve it, and, two, couldn’t think of something else.<br>In the end I went with a solution who got me what I wanted, but it also produced a mountain of spurious data.<br>What I’ve done was this:  </p><ol><li>Created a list with the numbers I was going to need. Already skipping 3 numbers by iteration, already starting at the line number that the command I wanted to replace, first appears.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sel = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(word), <span class="number">3</span>)]</span><br></pre></td></tr></table></figure><ol start="2"><li>Set a loop through the list of the lines to insert, created a variable to:<ul><li>Define the number of the line that was going to be erased. In order for the new one to be inserted,</li><li>define, in the same manner, the line number for the insertion operation,</li><li>be the base for a variable that will write to file.<br>  The reason for the <em><strong>variable + 1</strong></em>, came from a need I had when building this solution, to see the evolution of the loops and how much were they covering the text-tags list. It’s there just so I can get my head around the problem.  </li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    pos = <span class="built_in">int</span>(sel[<span class="number">0</span>])</span><br><span class="line">    word.pop(pos)</span><br><span class="line">    word.insert(pos, url)</span><br><span class="line">    posi = pos + <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>And, finally, sent everything to a file. Because I couldn’t figure out how to keep in the same variable, the lines I didn’t want to change, and the ones I did.<br>Everything I tried, ended with a variable with only the changed lines or with the unchanged list. At least in this way, I could access what I wanted during the running of the loop. In the end it was just a case of separating the wheat from the chaff, which was simple, but didn’t alleviate the feeling that I was, both, an idiot and a cheat.<br>Here’s the full code:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Module to append the completed lines to the text tags.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">url_appending</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Although this produces far too much output that I need, the fact is</span></span><br><span class="line"><span class="string">    it does produce what I&#x27;m looking for. As this is a one-time project,</span></span><br><span class="line"><span class="string">    I&#x27;m just going to cut what I need, put it in a file, and do any</span></span><br><span class="line"><span class="string">    cleaning I need with sed, awk and things of that ilk.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordcloud1.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        word = f.readlines()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;line_complete.svg&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        urls = f.readlines()</span><br><span class="line"></span><br><span class="line">    sel = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(word), <span class="number">3</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        pos = <span class="built_in">int</span>(sel[<span class="number">0</span>])</span><br><span class="line">        word.pop(pos)</span><br><span class="line">        word.insert(pos, url)</span><br><span class="line">        posi = pos + <span class="number">1</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;final.svg&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="built_in">str</span>(word[:posi]))</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            pprint(word[:posi])</span><br><span class="line">        sel.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url_appending()</span><br></pre></td></tr></table></figure><p>After this, I still had much to do, using Sed and Awk to clean the files to the shape it was needed. In that respect, this effort was not in vain. I come out of this with a much clearer understanding of both these tools. But that was not my original intention.<br>It was happily fortuitous.<br>My intention was learn more about python with a project heavy on file manipulation. And it seemed I couldn’t understand it, so I used other means.<br>On top of all this, there’s the fact that, in the end, I decided I didn’t want the word cloud anymore. I am to build something from just the links that, if not so polished, it won’t so trite.<br>This project left me with an unfinished feeling. I know that are python solutions for the problem I was facing, and I imagine they won’t metaphysically complex, I just have to dig deeper.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lately I returned to a project that had always some interesting challenges, my notes app. Because I already have something like two hundr</summary>
      
    
    
    
    
    <category term="notes, web, python" scheme="http://constantconstipation.club/tags/notes-web-python/"/>
    
  </entry>
  
  <entry>
    <title>new-password-manager-incarnation</title>
    <link href="http://constantconstipation.club/2021/08/23/new-password-manager-incarnation/"/>
    <id>http://constantconstipation.club/2021/08/23/new-password-manager-incarnation/</id>
    <published>2021-08-23T00:06:02.000Z</published>
    <updated>2021-08-23T01:26:12.178Z</updated>
    
    <content type="html"><![CDATA[<p>I just had a rethink of my password manager app. I finally created a version where I can choose to name the password myself, as sometimes you can’t be bothered to find a true source of randomness just to create an account. It’s such a simple thing but, up until now, if I needed to add an account that I created the password, I had to change it directly on the database server.<br>Also I added a lot more crypto power to the these proceedings than in previous times. And if I still think it’s an overkill for my threat profile, it still feels good to have done a good job. Or, at least, a better job.<br>And the funniest thing is that, most probably, I won’t use this version.  For no other reason than it’s new and I don’t want to risk my passwords with a folder that I still don’t trust fully.<br>I think that what will happen in the end is … eventually I’ll add the new features to the old app. One by one. Slowly. Softly.<br>I probably won’t implement all the changes, just the more urgent ones. And then I’ll forget that I ever coded this version.<br>This, I think, is very unbecoming. I’m usually irreflexive and reckless. It’s not my thing to be cautious and mistrusting. But when were talking about my password accesses, I get violently middle-aged.<br>And this is what I done:  </p><ol><li>I had as objective to build a version that, as I said, would ask the user if he wanted to name the password himself, to have password length dependent of input, and seriously beef up security.  In this regard, as I don’t understand a lot about the subject, I think I went overboard, and have now a cartoonishly inadequate setup. Seriously, I would laugh if I was more sure about myself on this subject.<br>I create a inaugural function that collects all information needed to manage the process. From username, service, to if he wants to name it himself, it’s all here.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;All information but the password&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    info.service = <span class="built_in">input</span>(<span class="string">&quot;What is the service? &quot;</span>)</span><br><span class="line">    info.username = <span class="built_in">input</span>(<span class="string">&quot;What is the email/username? &quot;</span>)</span><br><span class="line">    info.string = <span class="built_in">input</span>(<span class="string">&quot;Choose a random, long, string &quot;</span>)</span><br><span class="line">    info.length = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;How long do you want your password to be? &quot;</span>))</span><br><span class="line">    info.creation = <span class="built_in">input</span>(<span class="string">&quot;Do you want to write your own password? [y/n] &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> info.creation == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">        info.user_pwd = <span class="built_in">input</span>(<span class="string">&quot;What password do you want? &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        info.user_pwd = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    info()</span><br></pre></td></tr></table></figure></li><li>Here I did some hashing magic that I didn’t understood fully, or at all, felt very covert and sub-rosa, and quickly abandoned it for other subjects. But to be true to the effort of documentation, what I thought was this. All passwords will be built from two main pieces, a random, long string that can be whatever you want. And the name of service/company that you are creating an account for. We then concatenate these two strings into a huge snake like new train of characters; and it’s this monstrosity that is hashed with sha256 encryption. That I heard say is a good thing.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go log. Has to be on all functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_string</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Where all the hashing operations are done&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    string_bt = info.string.encode()</span><br><span class="line">    service_bt = info.service.encode()</span><br><span class="line">    concat = <span class="string">b&quot;&quot;</span>.join([string_bt, service_bt])</span><br><span class="line">    h = hashlib.sha256()</span><br><span class="line">    h.update(concat)</span><br><span class="line">    hash_string.<span class="built_in">hex</span> = h.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    hash_string()</span><br></pre></td></tr></table></figure></li><li>In this function, I mainly concentrated on imposing a lot of transformations to the strings that we started from. With special attention to the use of randomness python libraries.<br>As the final password can be built in two different forms, by user, by random processes, I had to find a way for these paths to meet and use the same variable names, although the processes are completely different. For example; the name of the password variable that is imported to the database is defined in two different ways, if the user chose to name it itself, or chose to trust the mechanized route. If you choose the name, the value will be kept in a variable defined in the first function, and then, in the function that deals with inserting the values in the database. There’s a loop in the final function, where it verifies if said variable has a value different than ‘0’. As that is the set value for the variable if the naming choice is done automatically. If it has, the user chose the name and the database insertion variable for the password becomes equal to the variable defined in the first function.<br>If it’s the other way around, the variable will be granted a formal value of ‘0’, and the password definition will be done in the way we’ll see right now.<br>The final variable name for the password was named “complex.passwd”. Complex from the function where it was created, plus a function attribute, that enables the variable to be transported between the modules freely. It has to be created in this particular module because, in the automatic version of naming, It’s here that we reach the password value. So it needs the creation of two opposite instances of the password. If in a version the complex.passwd value is the final number arrived after: turning the hexadigest hash into a string, then into a list of individual characters, then appended with a random number of characters from a mixed alphabet composed of letters, numbers and symbols. As this creates an invariably enormous string, we collect one character in every four, to birth a more manageable string. Although at this time, we are still talking of lists. Finally we join all characters into one sole string, and name it, finally, complex.passwd.<br>But this is what happens when the process is automatic, what of the other option? The complex.passwd variable must assume some value, so as not to complain that it doesn’t exist. To remedy this, in the beginning of the ‘complex’ function, we define complex.passwd as a string space. This is enough to silence the linters, and can be changed later. So, all in all, this variable has three different definition moments, dependent on the optics of the user.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span>():</span></span><br><span class="line">    <span class="built_in">complex</span>.passwd = <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">hex</span> = <span class="built_in">str</span>(hash_string.<span class="built_in">hex</span>)</span><br><span class="line">    hex_list = [char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">hex</span>]</span><br><span class="line">    alpha = [</span><br><span class="line">        <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;A&quot;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;B&quot;</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;C&quot;</span>,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;D&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;E&quot;</span>,</span><br><span class="line">        <span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;F&quot;</span>,</span><br><span class="line">        <span class="string">&quot;f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;G&quot;</span>,</span><br><span class="line">        <span class="string">&quot;g&quot;</span>,</span><br><span class="line">        <span class="string">&quot;H&quot;</span>,</span><br><span class="line">        <span class="string">&quot;h&quot;</span>,</span><br><span class="line">        <span class="string">&quot;I&quot;</span>,</span><br><span class="line">        <span class="string">&quot;i&quot;</span>,</span><br><span class="line">        <span class="string">&quot;J&quot;</span>,</span><br><span class="line">        <span class="string">&quot;j&quot;</span>,</span><br><span class="line">        <span class="string">&quot;K&quot;</span>,</span><br><span class="line">        <span class="string">&quot;k&quot;</span>,</span><br><span class="line">        <span class="string">&quot;L&quot;</span>,</span><br><span class="line">        <span class="string">&quot;l&quot;</span>,</span><br><span class="line">        <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;m&quot;</span>,</span><br><span class="line">        <span class="string">&quot;N&quot;</span>,</span><br><span class="line">        <span class="string">&quot;n&quot;</span>,</span><br><span class="line">        <span class="string">&quot;O&quot;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>,</span><br><span class="line">        <span class="string">&quot;P&quot;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Q&quot;</span>,</span><br><span class="line">        <span class="string">&quot;q&quot;</span>,</span><br><span class="line">        <span class="string">&quot;R&quot;</span>,</span><br><span class="line">        <span class="string">&quot;r&quot;</span>,</span><br><span class="line">        <span class="string">&quot;S&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;t&quot;</span>,</span><br><span class="line">        <span class="string">&quot;U&quot;</span>,</span><br><span class="line">        <span class="string">&quot;u&quot;</span>,</span><br><span class="line">        <span class="string">&quot;V&quot;</span>,</span><br><span class="line">        <span class="string">&quot;v&quot;</span>,</span><br><span class="line">        <span class="string">&quot;W&quot;</span>,</span><br><span class="line">        <span class="string">&quot;w&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;!&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&quot;</span>,</span><br><span class="line">        <span class="string">&quot;%&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;(&quot;</span>,</span><br><span class="line">        <span class="string">&quot;)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;«&quot;</span>,</span><br><span class="line">        <span class="string">&quot;^&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;[&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;+&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">        <span class="string">&quot;`&quot;</span>,</span><br><span class="line">        <span class="string">&quot;~&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    add = random.sample(alpha, info.length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add:</span><br><span class="line">        hex_list.append(i)</span><br><span class="line">    cull = hex_list[::<span class="number">4</span>]</span><br><span class="line">    pwd = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">complex</span>.passwd = pwd.join(cull)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">complex</span>.passwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">complex</span>()</span><br></pre></td></tr></table></figure></li><li>Finally we reach the end of the voyage, where all that is left to do, is to insert the values into the database. I created a simple SQLite database, wholly appropriate for a project that probably will never go much farther than this. But it was fun to build, and I would do it again.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updt_database</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Updates the database&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = sqlite3.connect(<span class="string">&quot;new_pwd.db&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">if</span> info.user_pwd != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">complex</span>.passwd = info.user_pwd</span><br><span class="line">        answers = [info.service, info.username, info.string, <span class="built_in">complex</span>.passwd]</span><br><span class="line">        query = <span class="string">&quot;&quot;&quot;INSERT INTO new_pwd (service, username, string, password) VALUES (?, ?, ?, ?)&quot;&quot;&quot;</span></span><br><span class="line">        cur.execute(query, answers)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> sqlite3.Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    updt_database()</span><br></pre></td></tr></table></figure></li></ol><p>As always the full power of the blessed code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;A rethink of my password app. Added hashes to the mix&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;All information but the password&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    info.service = <span class="built_in">input</span>(<span class="string">&quot;What is the service? &quot;</span>)</span><br><span class="line">    info.username = <span class="built_in">input</span>(<span class="string">&quot;What is the email/username? &quot;</span>)</span><br><span class="line">    info.string = <span class="built_in">input</span>(<span class="string">&quot;Choose a random, long, string &quot;</span>)</span><br><span class="line">    info.length = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;How long do you want your password to be? &quot;</span>))</span><br><span class="line">    info.creation = <span class="built_in">input</span>(<span class="string">&quot;Do you want to write your own password? [y/n] &quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> info.creation == <span class="string">&quot;y&quot;</span>:</span><br><span class="line">        info.user_pwd = <span class="built_in">input</span>(<span class="string">&quot;What password do you want? &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        info.user_pwd = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    info()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go log. Has to be on all functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_string</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Where all the hashing operations are done&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    string_bt = info.string.encode()</span><br><span class="line">    service_bt = info.service.encode()</span><br><span class="line">    concat = <span class="string">b&quot;&quot;</span>.join([string_bt, service_bt])</span><br><span class="line">    h = hashlib.sha256()</span><br><span class="line">    h.update(concat)</span><br><span class="line">    hash_string.<span class="built_in">hex</span> = h.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    hash_string()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span>():</span></span><br><span class="line">    <span class="built_in">complex</span>.passwd = <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="built_in">hex</span> = <span class="built_in">str</span>(hash_string.<span class="built_in">hex</span>)</span><br><span class="line">    hex_list = [char <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">hex</span>]</span><br><span class="line">    alpha = [</span><br><span class="line">        <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;7&quot;</span>,</span><br><span class="line">        <span class="string">&quot;8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;A&quot;</span>,</span><br><span class="line">        <span class="string">&quot;a&quot;</span>,</span><br><span class="line">        <span class="string">&quot;B&quot;</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>,</span><br><span class="line">        <span class="string">&quot;C&quot;</span>,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;D&quot;</span>,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;E&quot;</span>,</span><br><span class="line">        <span class="string">&quot;e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;F&quot;</span>,</span><br><span class="line">        <span class="string">&quot;f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;G&quot;</span>,</span><br><span class="line">        <span class="string">&quot;g&quot;</span>,</span><br><span class="line">        <span class="string">&quot;H&quot;</span>,</span><br><span class="line">        <span class="string">&quot;h&quot;</span>,</span><br><span class="line">        <span class="string">&quot;I&quot;</span>,</span><br><span class="line">        <span class="string">&quot;i&quot;</span>,</span><br><span class="line">        <span class="string">&quot;J&quot;</span>,</span><br><span class="line">        <span class="string">&quot;j&quot;</span>,</span><br><span class="line">        <span class="string">&quot;K&quot;</span>,</span><br><span class="line">        <span class="string">&quot;k&quot;</span>,</span><br><span class="line">        <span class="string">&quot;L&quot;</span>,</span><br><span class="line">        <span class="string">&quot;l&quot;</span>,</span><br><span class="line">        <span class="string">&quot;M&quot;</span>,</span><br><span class="line">        <span class="string">&quot;m&quot;</span>,</span><br><span class="line">        <span class="string">&quot;N&quot;</span>,</span><br><span class="line">        <span class="string">&quot;n&quot;</span>,</span><br><span class="line">        <span class="string">&quot;O&quot;</span>,</span><br><span class="line">        <span class="string">&quot;o&quot;</span>,</span><br><span class="line">        <span class="string">&quot;P&quot;</span>,</span><br><span class="line">        <span class="string">&quot;p&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Q&quot;</span>,</span><br><span class="line">        <span class="string">&quot;q&quot;</span>,</span><br><span class="line">        <span class="string">&quot;R&quot;</span>,</span><br><span class="line">        <span class="string">&quot;r&quot;</span>,</span><br><span class="line">        <span class="string">&quot;S&quot;</span>,</span><br><span class="line">        <span class="string">&quot;s&quot;</span>,</span><br><span class="line">        <span class="string">&quot;T&quot;</span>,</span><br><span class="line">        <span class="string">&quot;t&quot;</span>,</span><br><span class="line">        <span class="string">&quot;U&quot;</span>,</span><br><span class="line">        <span class="string">&quot;u&quot;</span>,</span><br><span class="line">        <span class="string">&quot;V&quot;</span>,</span><br><span class="line">        <span class="string">&quot;v&quot;</span>,</span><br><span class="line">        <span class="string">&quot;W&quot;</span>,</span><br><span class="line">        <span class="string">&quot;w&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;y&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="string">&quot;!&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;$&quot;</span>,</span><br><span class="line">        <span class="string">&quot;%&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;(&quot;</span>,</span><br><span class="line">        <span class="string">&quot;)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;=&quot;</span>,</span><br><span class="line">        <span class="string">&quot;«&quot;</span>,</span><br><span class="line">        <span class="string">&quot;^&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&gt;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;[&quot;</span>,</span><br><span class="line">        <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;+&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ç&quot;</span>,</span><br><span class="line">        <span class="string">&quot;`&quot;</span>,</span><br><span class="line">        <span class="string">&quot;~&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;|&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    add = random.sample(alpha, info.length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> add:</span><br><span class="line">        hex_list.append(i)</span><br><span class="line">    cull = hex_list[::<span class="number">4</span>]</span><br><span class="line">    pwd = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">complex</span>.passwd = pwd.join(cull)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">complex</span>.passwd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">complex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updt_database</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Updates the database&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = sqlite3.connect(<span class="string">&quot;new_pwd.db&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">if</span> info.user_pwd != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">complex</span>.passwd = info.user_pwd</span><br><span class="line">        answers = [info.service, info.username, info.string, <span class="built_in">complex</span>.passwd]</span><br><span class="line">        query = <span class="string">&quot;&quot;&quot;INSERT INTO new_pwd (service, username, string, password) VALUES (?, ?, ?, ?)&quot;&quot;&quot;</span></span><br><span class="line">        cur.execute(query, answers)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> sqlite3.Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    updt_database()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I just had a rethink of my password manager app. I finally created a version where I can choose to name the password myself, as sometimes</summary>
      
    
    
    
    
    <category term="passwords, python, conservatorism" scheme="http://constantconstipation.club/tags/passwords-python-conservatorism/"/>
    
  </entry>
  
  <entry>
    <title>new-micro-blog</title>
    <link href="http://constantconstipation.club/2021/08/22/new-micro-blog/"/>
    <id>http://constantconstipation.club/2021/08/22/new-micro-blog/</id>
    <published>2021-08-22T15:40:33.000Z</published>
    <updated>2021-08-22T16:45:52.614Z</updated>
    
    <content type="html"><![CDATA[<p>I just remade the micro_blog app. Although I liked the way it looked and how it worked, I was extremely aware that the app was running on Urwid, that grand Dame of coding, all wit, charm and Alzheimer, and if I liked it, that had more to do to a rare and happy moment of serendipity, and not anything that we could ever hope to repeat and redo.<br>The inspiration came in a roundabout way. I was trying to wrap my head around <a href="https://www.sqlalchemy.org/">SQLAlchemy</a>, and why it was so bloody hard to understand, and why, Oh my God, why?!, the documentation was so breathlessly obscurantist. Honestly, in my opinion, it’s much, much simpler to try to understand SQL commands, than it is to venture to the esoteric realms of the ORMs.<br>I, personally always liked to learn SQL, it’s a fun language and it is used in a very cool area, databases. Can’t fathom why someone would sacrifice so much to avoid it.<br>As it was expected, I couldn’t make heads or tails of SQLAlchemy, so I started looking at other, simpler, ORMs, where I could have an introduction that wasn’t as violent. I finally ended up in <a href="http://docs.peewee-orm.com/">Peewee</a>, who has sane sounding documentation, and an apparent willingness to complicate things only if strictly necessary. Even so, I had some difficulty entering in the logic of these software. My breakthrough occurred when I gave up on their documentation and started building the project examples they have on their site. They’re all cool ideas, and I felt inspired to do them all.<br>The first one I did ended up substituting the old micro_blog app by a new one. So it’s engaging stuff.<br>The project proposed entailed creating a diary cli app that would have a encrypted database backend. Which I thought was pretty cool. This immediately reminded me of the micro_blog project, as I intended it to be a strongly confessional experience. It ended up being me absent mindedly writing some of the most inane and milquetoast observations ever heard outside a political parliament.<br>Not that I have given up on it. No. I still think the idea has value. It is just that I haven’t been on the right mindset for fearless self-examination for quite some time.<br>The project proved out to be as entertaining as its concept. The solutions presented are interesting and they were all in a comfortable level of difficulty. Not very overly hard, but with enough intelligence and creativity to be interesting.<br>And here’s what I did:  </p><ol><li>The module starts with the declaring of a SQLite variable as our database. It’s been a while since I used SQLite databases. That was fun too. Then, as is customary on this type of software, It will be instantiated a class, that in its constituent parts, will end up representing all the concepts of a traditional SQL database.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defines table and its structure</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param content: column/attribute, defines a text column in the table</span></span><br><span class="line"><span class="string">    :param timestamp: column/attribute defines timestamp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    content = TextField()</span><br><span class="line">    timestamp = DateTimeField(default=datetime.datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        database = db</span><br></pre></td></tr></table></figure></li><li>After that we define the database connection and its first table.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go log. Has to be on all functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defines db connection and a</span></span><br><span class="line"><span class="string">    db table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param db: init: application, defines connection</span></span><br><span class="line"><span class="string">        Entry.create_table, command, creates a db table</span></span><br><span class="line"><span class="string">    :param passphrase: str, password</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pwd = <span class="built_in">str</span>(os.environ[<span class="string">&quot;MICRO_PWD&quot;</span>])</span><br><span class="line">    db.init(<span class="string">&quot;micro_blog.db&quot;</span>, passphrase=pwd)</span><br><span class="line">    Entry.create_table()</span><br></pre></td></tr></table></figure></li><li>In this function we define the app’s work loop as well as present to the user, the functionalities that the app has to offer.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu_loop</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the loop where the all application will run.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param choice: Last choice of functionality to use,</span></span><br><span class="line"><span class="string">                   from the apps alternatives.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">            prints functionality menu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    choice = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> choice != <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> menu.items():</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot;%s) %s&quot;</span> % (key, value.__doc__), fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        choice = <span class="built_in">input</span>(color(<span class="string">&quot;Actions: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)).lower().strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> menu:</span><br><span class="line">            menu[choice]()</span><br></pre></td></tr></table></figure></li><li>Here we define how to add a entry to the app.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_entry</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add Entry</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param &#x27;Enter your entry...&#x27;: str, Asks for new content entry.</span></span><br><span class="line"><span class="string">    :param &#x27;Save entry...&#x27;: str, If yes creates content data and</span></span><br><span class="line"><span class="string">                              and prints &#x27;Saved sucessfully&#x27;</span></span><br><span class="line"><span class="string">    :returns: str</span></span><br><span class="line"><span class="string">    :rtype: &#x27;Saved sucessfully.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(color(<span class="string">&quot;Enter your entry. Press ctrl+d when finished.&quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">    data = sys.stdin.read().strip()</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="built_in">input</span>(color(<span class="string">&quot;Save entry? [Yn] &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)) != <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        Entry.create(content=data)</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;Saved successfully.&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br></pre></td></tr></table></figure></li><li>View all entries in the app:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_entries</span>(<span class="params">search_query=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;View previous entries</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param query: variable, Selects all content entries by descending order of</span></span><br><span class="line"><span class="string">         timestamp.</span></span><br><span class="line"><span class="string">    :param search_query: variable, If it originates in the search function,</span></span><br><span class="line"><span class="string">         redirect it to here. (Default value = None)</span></span><br><span class="line"><span class="string">    :returns: Timestamp, entries content and options to manage said content.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    query = Entry.select().order_by(Entry.timestamp.desc())</span><br><span class="line">    <span class="keyword">if</span> search_query:</span><br><span class="line">        query = query.where(Entry.content.contains(search_query))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> query:</span><br><span class="line">        timestamp = entry.timestamp.strftime(<span class="string">&quot;%A %B %d, %Y %I:%M%p&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(color(timestamp, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;=&quot;</span> * <span class="built_in">len</span>(timestamp), fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(entry.content, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;n) next entry&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;d) delete entry&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;q) return to main menu&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">input</span>(color(<span class="string">&quot;Choice? (Nq) &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>)) == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li>Search for entries. That in this case, piggybacks on the view entries function.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_entries</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Search entries</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :returns: Question regarding what is the keyword to use in</span></span><br><span class="line"><span class="string">             their search?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    view_entries(<span class="built_in">input</span>(color(<span class="string">&quot;Search query: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)))</span><br></pre></td></tr></table></figure></li><li>This function defines the deletion of content entries.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_entry</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Deletes entry in database</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param del_id: variable, ID value of the entry to delete</span></span><br><span class="line"><span class="string">    :param del_row: variable, The row to be deleted</span></span><br><span class="line"><span class="string">    :param del_row.execute: command, Order to erase entry.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    del_id = <span class="built_in">input</span>(color(<span class="string">&quot;What is the ID of the entry you want to delete? &quot;</span>))</span><br><span class="line">    del_row = Entry.delete().where(Entry.<span class="built_in">id</span> == del_id)</span><br><span class="line">    del_row.execute()</span><br></pre></td></tr></table></figure></li><li>And this one, the updating of the entries.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_query</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Updates a value in a row</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param updt_content: str, New content</span></span><br><span class="line"><span class="string">    :param updt_val: command, Update command</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    updt_id = <span class="built_in">input</span>(color(<span class="string">&quot;What is the id of your update? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    Entry.updt_column = <span class="built_in">input</span>(color(<span class="string">&quot;What column do you want to update? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    updt_content = <span class="built_in">input</span>(color(<span class="string">&quot;What is it you want to change? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    updt_val = Entry.update(&#123;Entry.updt_column: updt_content&#125;).where(Entry.<span class="built_in">id</span> == updt_id)</span><br><span class="line">    updt_val.execute()</span><br></pre></td></tr></table></figure></li><li>This is the menu that app loop keeps serving.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu = OrderedDict(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>, add_entry),</span><br><span class="line">        (<span class="string">&quot;v&quot;</span>, view_entries),</span><br><span class="line">        (<span class="string">&quot;s&quot;</span>, search_entries),</span><br><span class="line">        (<span class="string">&quot;d&quot;</span>, delete_entry),</span><br><span class="line">        (<span class="string">&quot;u&quot;</span>, update_query),</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>Finally it’s defined what to do when a user tries to login to the db.<br>In it’s first incarnation, the database was a impregnable fortress, ready to withstand any attack. An example of prudent common sense and sound security precautions. Unfortunately it also made entering in the app a drag. To cut a long story short, I sabotaged all the security measures, just so that I wouldn’t have to sign in every time I went to app.<br>I am not a wise man.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Collect the passphrase using a secure method.</span></span><br><span class="line">    pwd = <span class="built_in">str</span>(os.environ[<span class="string">&quot;MICRO_PWD&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> pwd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        passphrase = getpass(color(<span class="string">&quot;Enter password: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> passphrase != pwd:</span><br><span class="line">            sys.stderr.write(<span class="string">&quot;Passphrase required to access diary.\n&quot;</span>)</span><br><span class="line">            sys.stderr.flush()</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize the database.</span></span><br><span class="line">    initialize()</span><br><span class="line">    menu_loop()</span><br></pre></td></tr></table></figure></li></ol><p>The full code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Encrypted version of the Micro Blog. Now done with Peewee ORM&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> getpass <span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> peewee <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> playhouse.sqlcipher_ext <span class="keyword">import</span> SqlCipherDatabase</span><br><span class="line"><span class="keyword">from</span> colr <span class="keyword">import</span> color</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Defer initialization of the database until the script is executed from the</span></span><br><span class="line"><span class="comment"># command-line.</span></span><br><span class="line">db = SqlCipherDatabase(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span>(<span class="params">Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defines table and its structure</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param content: column/attribute, defines a text column in the table</span></span><br><span class="line"><span class="string">    :param timestamp: column/attribute defines timestamp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    content = TextField()</span><br><span class="line">    timestamp = DateTimeField(default=datetime.datetime.now)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        database = db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go log. Has to be on all functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Defines db connection and a</span></span><br><span class="line"><span class="string">    db table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param db: init: application, defines connection</span></span><br><span class="line"><span class="string">        Entry.create_table, command, creates a db table</span></span><br><span class="line"><span class="string">    :param passphrase: str, password</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pwd = <span class="built_in">str</span>(os.environ[<span class="string">&quot;MICRO_PWD&quot;</span>])</span><br><span class="line">    db.init(<span class="string">&quot;micro_blog.db&quot;</span>, passphrase=pwd)</span><br><span class="line">    Entry.create_table()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu_loop</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the loop where the all application will run.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param choice: Last choice of functionality to use,</span></span><br><span class="line"><span class="string">                   from the apps alternatives.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">            prints functionality menu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    choice = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> choice != <span class="string">&quot;q&quot;</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> menu.items():</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot;%s) %s&quot;</span> % (key, value.__doc__), fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        choice = <span class="built_in">input</span>(color(<span class="string">&quot;Actions: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)).lower().strip()</span><br><span class="line">        <span class="keyword">if</span> choice <span class="keyword">in</span> menu:</span><br><span class="line">            menu[choice]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_entry</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add Entry</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param &#x27;Enter your entry...&#x27;: str, Asks for new content entry.</span></span><br><span class="line"><span class="string">    :param &#x27;Save entry...&#x27;: str, If yes creates content data and</span></span><br><span class="line"><span class="string">                              and prints &#x27;Saved sucessfully&#x27;</span></span><br><span class="line"><span class="string">    :returns: str</span></span><br><span class="line"><span class="string">    :rtype: &#x27;Saved sucessfully.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(color(<span class="string">&quot;Enter your entry. Press ctrl+d when finished.&quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">    data = sys.stdin.read().strip()</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">and</span> <span class="built_in">input</span>(color(<span class="string">&quot;Save entry? [Yn] &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)) != <span class="string">&quot;n&quot;</span>:</span><br><span class="line">        Entry.create(content=data)</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;Saved successfully.&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_entries</span>(<span class="params">search_query=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;View previous entries</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param query: variable, Selects all content entries by descending order of</span></span><br><span class="line"><span class="string">         timestamp.</span></span><br><span class="line"><span class="string">    :param search_query: variable, If it originates in the search function,</span></span><br><span class="line"><span class="string">         redirect it to here. (Default value = None)</span></span><br><span class="line"><span class="string">    :returns: Timestamp, entries content and options to manage said content.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    query = Entry.select().order_by(Entry.timestamp.desc())</span><br><span class="line">    <span class="keyword">if</span> search_query:</span><br><span class="line">        query = query.where(Entry.content.contains(search_query))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> query:</span><br><span class="line">        timestamp = entry.timestamp.strftime(<span class="string">&quot;%A %B %d, %Y %I:%M%p&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(color(timestamp, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;=&quot;</span> * <span class="built_in">len</span>(timestamp), fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(entry.content, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;n) next entry&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;d) delete entry&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(color(<span class="string">&quot;q) return to main menu&quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">input</span>(color(<span class="string">&quot;Choice? (Nq) &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>)) == <span class="string">&quot;q&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_entries</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Search entries</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :returns: Question regarding what is the keyword to use in</span></span><br><span class="line"><span class="string">             their search?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    view_entries(<span class="built_in">input</span>(color(<span class="string">&quot;Search query: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_entry</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Deletes entry in database</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param del_id: variable, ID value of the entry to delete</span></span><br><span class="line"><span class="string">    :param del_row: variable, The row to be deleted</span></span><br><span class="line"><span class="string">    :param del_row.execute: command, Order to erase entry.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    del_id = <span class="built_in">input</span>(color(<span class="string">&quot;What is the ID of the entry you want to delete? &quot;</span>))</span><br><span class="line">    del_row = Entry.delete().where(Entry.<span class="built_in">id</span> == del_id)</span><br><span class="line">    del_row.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_query</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Updates a value in a row</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param updt_content: str, New content</span></span><br><span class="line"><span class="string">    :param updt_val: command, Update command</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    updt_id = <span class="built_in">input</span>(color(<span class="string">&quot;What is the id of your update? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    Entry.updt_column = <span class="built_in">input</span>(color(<span class="string">&quot;What column do you want to update? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    updt_content = <span class="built_in">input</span>(color(<span class="string">&quot;What is it you want to change? &quot;</span>, fore=<span class="string">&quot;#a4bdba&quot;</span>))</span><br><span class="line">    updt_val = Entry.update(&#123;Entry.updt_column: updt_content&#125;).where(Entry.<span class="built_in">id</span> == updt_id)</span><br><span class="line">    updt_val.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">menu = OrderedDict(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;a&quot;</span>, add_entry),</span><br><span class="line">        (<span class="string">&quot;v&quot;</span>, view_entries),</span><br><span class="line">        (<span class="string">&quot;s&quot;</span>, search_entries),</span><br><span class="line">        (<span class="string">&quot;d&quot;</span>, delete_entry),</span><br><span class="line">        (<span class="string">&quot;u&quot;</span>, update_query),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># Collect the passphrase using a secure method.</span></span><br><span class="line">    pwd = <span class="built_in">str</span>(os.environ[<span class="string">&quot;MICRO_PWD&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> pwd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        passphrase = getpass(color(<span class="string">&quot;Enter password: &quot;</span>, fore=<span class="string">&quot;#c3bcb1&quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> passphrase != pwd:</span><br><span class="line">            sys.stderr.write(<span class="string">&quot;Passphrase required to access diary.\n&quot;</span>)</span><br><span class="line">            sys.stderr.flush()</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize the database.</span></span><br><span class="line">    initialize()</span><br><span class="line">    menu_loop()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I just remade the micro_blog app. Although I liked the way it looked and how it worked, I was extremely aware that the app was running on</summary>
      
    
    
    
    
    <category term="blog, python, orm" scheme="http://constantconstipation.club/tags/blog-python-orm/"/>
    
  </entry>
  
  <entry>
    <title>bookmark_prompt_toolkit</title>
    <link href="http://constantconstipation.club/2021/08/21/bookmark-prompt-toolkit/"/>
    <id>http://constantconstipation.club/2021/08/21/bookmark-prompt-toolkit/</id>
    <published>2021-08-21T01:58:19.000Z</published>
    <updated>2021-08-21T03:14:51.322Z</updated>
    
    <content type="html"><![CDATA[<p>I was making some updates on the bookmarks app, Urwid version, when it came to me that a change of UI provider was in order.<br>All the examples in Urwid work under the premise that every time you make a choice in a menu or prompt, there’s always another step that reiterates that you have, indeed, made that choice, and your choice value is kept not as the choice, but as the equal confirmation value. I think this will be clearer with an example:</p><p>In the ‘Simple Menu’ example of the <a href="http://urwid.org/tutorial/index.html">Urwid tutorial</a>, you select an option from choices <code>choices = u&#39;Chapman Cleese Gilliam Idle Jones Palin&#39;.split()</code>, and instead of using the direct value <code>choice</code>, it’s created a button that, when printed the <code>choice</code> value, clicks OK, and ends the choice process. In short instead of having a choice and a <code>enter</code> key-press, we have that plus clicking on a button that the only thing it does is confirm what you have just done.  </p><p>If you’re doing an UI that has few interactions with the user, this is not very taxing. But if you need to concatenate one or more commands in sequence, these confirmations start to feel as stumbling blocks.<br>I did some research and all the examples I saw followed this blueprint. So much so that I now am convinced that this is a feature of how Urwid functions.<br>Obviously I might be wrong and there is indeed a way to circumvent the confirmations, but I wasn’t able to figure it out.<br>Add to this the fact that you can only make one request by function, and I started to think that, even if prompt_toolkit is hard to grasp, it couldn’t be as hard as this. And I was right.<br>Prompt_toolkit has some ready to use dialog boxes that if not very flexible, are extremely simple and quick to implement.  </p><p>This build had two very nice bonuses, that solved two problems that I was trying to resolve for some time:</p><ol><li>How to create a class where all information is added by user input,</li><li>How to instantiate a class without instantiation values.</li></ol><p>I see now that the solutions were obvious and not very difficult to reach. But difficult, for me, it was. And I’m happy I solved it.  </p><p>In this case all information needed to run the methods is specific to one method only. There aren’t any variables that are needed by more than one method. This enabled me to not use a __init__ method and thus avoided having to inject values when instantiating the class. So I was free to insert on the methods the input queries for each functionality.  </p><ol><li>I created an add a bookmark method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_bkmk</span>(<span class="params">self</span>):</span></span><br><span class="line">    title = input_dialog(title=<span class="string">&quot;Title&quot;</span>, text=<span class="string">&quot;What is the title? &quot;</span>).run()</span><br><span class="line">    comment = input_dialog(title=<span class="string">&quot;Comment&quot;</span>, text=<span class="string">&quot;What is your comment? &quot;</span>).run()</span><br><span class="line">    link = input_dialog(title=<span class="string">&quot;Link&quot;</span>, text=<span class="string">&quot;What is the link? &quot;</span>).run()</span><br><span class="line">    k1 = input_dialog(title=<span class="string">&quot;K1&quot;</span>, text=<span class="string">&quot;Choose a keyword &quot;</span>).run()</span><br><span class="line">    k2 = input_dialog(title=<span class="string">&quot;K2&quot;</span>, text=<span class="string">&quot;Choose another... &quot;</span>).run()</span><br><span class="line">    k3 = input_dialog(title=<span class="string">&quot;K3&quot;</span>, text=<span class="string">&quot;And another...&quot;</span>).run()</span><br><span class="line"></span><br><span class="line">    answers = [title, comment, link, k1, k2, k3]</span><br><span class="line">    logger.info(answers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot;&quot;&quot;INSERT INTO bkmks (title, comment, link, k1, k2, k3) VALUES (%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span></span><br><span class="line">        logger.info(query)</span><br><span class="line">        cur.execute(query, answers)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li><li>A delete a bookmark method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We must use &#x27;ident&#x27;, not &#x27;id&#x27; in choosing the variable name, as the latter is a reserved word&quot;&quot;&quot;</span></span><br><span class="line">    ident = input_dialog(title=<span class="string">&quot;Delete Entry&quot;</span>, text=<span class="string">&quot;What is the ID? &quot;</span>).run()</span><br><span class="line">    logger.info(ident)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot; DELETE FROM bkmks WHERE id = &quot;</span> + ident</span><br><span class="line">        logger.info(query)</span><br><span class="line">        cur.execute(query)</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li><li>A see all bookmarks method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">see</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot;&quot;&quot; SELECT * FROM bkmks &quot;&quot;&quot;</span></span><br><span class="line">        logger.info(query)</span><br><span class="line">        cur.execute(query)</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] ID » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">0</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))  <span class="comment"># 1</span></span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] TITLE » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">1</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] COMMENT » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">2</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] LINK ? &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">3</span>]), fore=<span class="string">&quot;#a2cff0&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 1 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">4</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 2 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">5</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 3 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">6</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] TIME » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">7</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li><li>A search the bookmarks method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        busca = input_dialog(title=<span class="string">&quot;Search Bookmarks&quot;</span>, text=<span class="string">&quot;What are you searching for? &quot;</span>).run()</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = (</span><br><span class="line">            <span class="string">&quot; SELECT * FROM bkmks WHERE MATCH(title, comment, link, k1, k2, k3) AGAINST (&#x27;&quot;</span></span><br><span class="line">            + busca</span><br><span class="line">            + <span class="string">&quot;&#x27; IN NATURAL LANGUAGE MODE)&quot;</span></span><br><span class="line">        )</span><br><span class="line">        logger.info(query)</span><br><span class="line">        cur.execute(query)</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] ID » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">0</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] TITLE » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">1</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] COMMENT » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">2</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] LINK ? &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">3</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 1 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">4</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 2 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">5</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 3 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">6</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(color(<span class="string">&quot; [*] TIME » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">7</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li><li>And an update a bookmark method:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">    coluna = input_dialog(title=<span class="string">&quot;Update Column&quot;</span>, text=<span class="string">&quot;Column? &quot;</span>).run()</span><br><span class="line">    ident = input_dialog(title=<span class="string">&quot;Entry ID&quot;</span>, text=<span class="string">&quot;ID? &quot;</span>).run()</span><br><span class="line">    update = input_dialog(title=<span class="string">&quot;Update Text&quot;</span>, text=<span class="string">&quot;Write your update.&quot;</span>).run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&quot;UPDATE bkmks SET &quot;</span> + coluna + <span class="string">&quot; = &#x27;&quot;</span> + update + <span class="string">&quot;&#x27; WHERE id = &quot;</span> + ident</span><br><span class="line">        logger.info(query)</span><br><span class="line">        cur.execute(</span><br><span class="line">            query,</span><br><span class="line">        )</span><br><span class="line">        conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> conn:</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li></ol><p>This is the whole class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> prompt_toolkit.shortcuts <span class="keyword">import</span> input_dialog</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"><span class="keyword">from</span> colr <span class="keyword">import</span> color</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># @author      : mclds</span></span><br><span class="line"><span class="comment"># @file        : add</span></span><br><span class="line"><span class="comment"># @created     : 21/08/2021</span></span><br><span class="line"><span class="comment"># @email       : mclds@protonmail.com</span></span><br><span class="line"><span class="comment"># @description : Bookmark manager app. Adds, deletes, updates, searches, sees</span></span><br><span class="line"><span class="comment"># the bookmark database. The UI is done in Prompt_Toolkit</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;This file is organized as a class just because the functions can be organized under the app umbrella. But in reality</span></span><br><span class="line"><span class="string">    there&#x27;s no __init__ variables as there are no variables that are needed by more than one method. As user input is the</span></span><br><span class="line"><span class="string">    base of all methods, we are working without __init__ method, that would force us to have pre-determined values to</span></span><br><span class="line"><span class="string">    instantiate the class. This way we can instantiate the class, empty of attributes.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_bkmk</span>(<span class="params">self</span>):</span></span><br><span class="line">        title = input_dialog(title=<span class="string">&quot;Title&quot;</span>, text=<span class="string">&quot;What is the title? &quot;</span>).run()</span><br><span class="line">        comment = input_dialog(title=<span class="string">&quot;Comment&quot;</span>, text=<span class="string">&quot;What is your comment? &quot;</span>).run()</span><br><span class="line">        link = input_dialog(title=<span class="string">&quot;Link&quot;</span>, text=<span class="string">&quot;What is the link? &quot;</span>).run()</span><br><span class="line">        k1 = input_dialog(title=<span class="string">&quot;K1&quot;</span>, text=<span class="string">&quot;Choose a keyword &quot;</span>).run()</span><br><span class="line">        k2 = input_dialog(title=<span class="string">&quot;K2&quot;</span>, text=<span class="string">&quot;Choose another... &quot;</span>).run()</span><br><span class="line">        k3 = input_dialog(title=<span class="string">&quot;K3&quot;</span>, text=<span class="string">&quot;And another...&quot;</span>).run()</span><br><span class="line"></span><br><span class="line">        answers = [title, comment, link, k1, k2, k3]</span><br><span class="line">        logger.info(answers)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;&quot;&quot;INSERT INTO bkmks (title, comment, link, k1, k2, k3) VALUES (%s, %s, %s, %s, %s, %s)&quot;&quot;&quot;</span></span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query, answers)</span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We must use &#x27;ident&#x27;, not &#x27;id&#x27; in choosing the variable name, as the latter is a reserved word&quot;&quot;&quot;</span></span><br><span class="line">        ident = input_dialog(title=<span class="string">&quot;Delete Entry&quot;</span>, text=<span class="string">&quot;What is the ID? &quot;</span>).run()</span><br><span class="line">        logger.info(ident)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot; DELETE FROM bkmks WHERE id = &quot;</span> + ident</span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">see</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;&quot;&quot; SELECT * FROM bkmks &quot;&quot;&quot;</span></span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            records = cur.fetchall()</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] ID » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">0</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))  <span class="comment"># 1</span></span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] TITLE » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">1</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] COMMENT » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">2</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] LINK ? &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">3</span>]), fore=<span class="string">&quot;#a2cff0&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 1 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">4</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 2 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">5</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 3 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">6</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] TIME » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">7</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            busca = input_dialog(title=<span class="string">&quot;Search Bookmarks&quot;</span>, text=<span class="string">&quot;What are you searching for? &quot;</span>).run()</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = (</span><br><span class="line">                <span class="string">&quot; SELECT * FROM bkmks WHERE MATCH(title, comment, link, k1, k2, k3) AGAINST (&#x27;&quot;</span></span><br><span class="line">                + busca</span><br><span class="line">                + <span class="string">&quot;&#x27; IN NATURAL LANGUAGE MODE)&quot;</span></span><br><span class="line">            )</span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            records = cur.fetchall()</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] ID » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">0</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] TITLE » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">1</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] COMMENT » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">2</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] LINK ? &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">3</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 1 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">4</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 2 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">5</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] KEYWORD 3 » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">6</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(color(<span class="string">&quot; [*] TIME » &quot;</span>, fore=<span class="string">&quot;#928b7f&quot;</span>), color(<span class="built_in">str</span>(row[<span class="number">7</span>]), fore=<span class="string">&quot;#ffffff&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @logger.catch</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self</span>):</span></span><br><span class="line">        coluna = input_dialog(title=<span class="string">&quot;Update Column&quot;</span>, text=<span class="string">&quot;Column? &quot;</span>).run()</span><br><span class="line">        ident = input_dialog(title=<span class="string">&quot;Entry ID&quot;</span>, text=<span class="string">&quot;ID? &quot;</span>).run()</span><br><span class="line">        update = input_dialog(title=<span class="string">&quot;Update Text&quot;</span>, text=<span class="string">&quot;Write your update.&quot;</span>).run()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;bkmks&quot;</span>)</span><br><span class="line">            cur = conn.cursor()</span><br><span class="line">            query = <span class="string">&quot;UPDATE bkmks SET &quot;</span> + coluna + <span class="string">&quot; = &#x27;&quot;</span> + update + <span class="string">&quot;&#x27; WHERE id = &quot;</span> + ident</span><br><span class="line">            logger.info(query)</span><br><span class="line">            cur.execute(</span><br><span class="line">                query,</span><br><span class="line">            )</span><br><span class="line">            conn.commit()</span><br><span class="line">        <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> conn:</span><br><span class="line">                conn.close()</span><br></pre></td></tr></table></figure><hr><h2><span id="main-file">Main File</span></h2><p>I created a main file where I concentrated the access to the functionalities through a menu, where the user can choose what is going to do with the app.<br>The user choice variable is kept in the ‘result’ variable. So as to access it when instantiating the class, I used the convention that variables named with the function name, ‘main’, and a variable name, are accessible outside the function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Inside the function we build the radio button questionnaire. Outside the function,</span></span><br><span class="line"><span class="string">    and necessarily so, we declare the instantiation of the imported class.</span></span><br><span class="line"><span class="string">    Finally we connect each radio button option to a specific method, mediated by the</span></span><br><span class="line"><span class="string">    instance&quot;&quot;&quot;</span></span><br><span class="line">    main.result = radiolist_dialog(</span><br><span class="line">        title=<span class="string">&quot;Main&quot;</span>,</span><br><span class="line">        text=<span class="string">&quot;What Do You Want To Do?&quot;</span>,</span><br><span class="line">        values=[</span><br><span class="line">            (<span class="string">&quot;add&quot;</span>, <span class="string">&quot;Add a Bookmark&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;delete&quot;</span>, <span class="string">&quot;Delete a Bookmark&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;see&quot;</span>, <span class="string">&quot;See All Bookmarks&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;search&quot;</span>, <span class="string">&quot;Search the Bookmarks&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;update&quot;</span>, <span class="string">&quot;Update a Bookmark&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">    ).run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>Outside the main function I instantiated the Add class that I imported to this file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = Add()</span><br></pre></td></tr></table></figure><p>Note that ‘Add’ is empty and it will accept whatever values the input objects will create inside the methods.<br>Now is just the case of connecting the menu alternatives to their corresponding methods:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.add_bkmk()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.delete()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;see&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.see()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;search&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.search()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;update&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.update()</span><br></pre></td></tr></table></figure><p>The whole main file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> prompt_toolkit.shortcuts <span class="keyword">import</span> radiolist_dialog</span><br><span class="line"><span class="keyword">from</span> bkmk_class <span class="keyword">import</span> Add</span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment"># @author      : mclds</span></span><br><span class="line"><span class="comment"># @file        : main</span></span><br><span class="line"><span class="comment"># @created     : 21/08/2021</span></span><br><span class="line"><span class="comment"># @email       : mclds@protonmail.com</span></span><br><span class="line"><span class="comment"># @description : Main file where all functionalities are concentrated and</span></span><br><span class="line"><span class="comment"># accessed.</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch  </span><span class="comment"># Decorator for loguru. All errors will go log. Has to be on all functions</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Inside the function we build the radio button questionnaire. Outside the function,</span></span><br><span class="line"><span class="string">    and necessarily so, we declare the instantiation of the imported class.</span></span><br><span class="line"><span class="string">    Finally we connect each radio button option to a specific method, mediated by the</span></span><br><span class="line"><span class="string">    instance&quot;&quot;&quot;</span></span><br><span class="line">    main.result = radiolist_dialog(</span><br><span class="line">        title=<span class="string">&quot;Main&quot;</span>,</span><br><span class="line">        text=<span class="string">&quot;What Do You Want To Do?&quot;</span>,</span><br><span class="line">        values=[</span><br><span class="line">            (<span class="string">&quot;add&quot;</span>, <span class="string">&quot;Add a Bookmark&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;delete&quot;</span>, <span class="string">&quot;Delete a Bookmark&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;see&quot;</span>, <span class="string">&quot;See All Bookmarks&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;search&quot;</span>, <span class="string">&quot;Search the Bookmarks&quot;</span>),</span><br><span class="line">            (<span class="string">&quot;update&quot;</span>, <span class="string">&quot;Update a Bookmark&quot;</span>),</span><br><span class="line">        ],</span><br><span class="line">    ).run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = Add()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.add_bkmk()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;delete&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.delete()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;see&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.see()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;search&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.search()</span><br><span class="line"><span class="keyword">if</span> main.result == <span class="string">&quot;update&quot;</span>:</span><br><span class="line">    <span class="built_in">sum</span>.update()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I was making some updates on the bookmarks app, Urwid version, when it came to me that a change of UI provider was in order.&lt;br&gt;All the e</summary>
      
    
    
    
    
    <category term="python, prompt_toolkit, cli" scheme="http://constantconstipation.club/tags/python-prompt-toolkit-cli/"/>
    
  </entry>
  
  <entry>
    <title>git_manager</title>
    <link href="http://constantconstipation.club/2021/08/11/git-manager/"/>
    <id>http://constantconstipation.club/2021/08/11/git-manager/</id>
    <published>2021-08-11T18:51:07.000Z</published>
    <updated>2021-08-21T10:12:15.536Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been thinking for some time in ways to automate the git uploading process.<br>I have eighteen repositories now and it’s getting harder to track down their state.<br>I wanted something that would automate the repetitive parts, (init, the commit then push…) and that was aware of their update needs.<br>So, I thought of this:  </p><ol><li><p>First create a dictionary with names and urls of all the repositories and keep it in a file:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Dictionary with lists of my git projects&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repo_list</span>():</span></span><br><span class="line">    repo_list.<span class="built_in">dict</span> = &#123;</span><br><span class="line">        <span class="string">&quot;bkmks&quot;</span>: <span class="string">&quot;/home/mic/python/bkmk&quot;</span>,</span><br><span class="line">        <span class="string">&quot;urwid&quot;</span>: <span class="string">&quot;/home/mic/python/bkmks_urwid&quot;</span>,</span><br><span class="line">        <span class="string">&quot;books&quot;</span>: <span class="string">&quot;/home/mic/python/books&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cli_app&quot;</span>: <span class="string">&quot;/home/mic/python/cli_app_list&quot;</span>,</span><br><span class="line">        <span class="string">&quot;micro_diary&quot;</span>: <span class="string">&quot;/home/mic/python/micro_diary&quot;</span>,</span><br><span class="line">        <span class="string">&quot;notes&quot;</span>: <span class="string">&quot;/home/mic/python/notes&quot;</span>,</span><br><span class="line">        <span class="string">&quot;old_projects&quot;</span>: <span class="string">&quot;/home/mic/python/old_alternative_projects&quot;</span>,</span><br><span class="line">        <span class="string">&quot;player&quot;</span>: <span class="string">&quot;/home/mic/python/player&quot;</span>,</span><br><span class="line">        <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;/home/mic/python/pwd&quot;</span>,</span><br><span class="line">        <span class="string">&quot;rss&quot;</span>: <span class="string">&quot;/home/mic/python/rss&quot;</span>,</span><br><span class="line">        <span class="string">&quot;scraper&quot;</span>: <span class="string">&quot;/home/mic/python/scraper&quot;</span>,</span><br><span class="line">        <span class="string">&quot;todos&quot;</span>: <span class="string">&quot;/home/mic/python/todos&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tree&quot;</span>: <span class="string">&quot;/home/mic/python/tree&quot;</span>,</span><br><span class="line">        <span class="string">&quot;urlshort&quot;</span>: <span class="string">&quot;/home/mic/python/urlshort&quot;</span>,</span><br><span class="line">        <span class="string">&quot;scripts&quot;</span>: <span class="string">&quot;/home/mic/scripts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;python_blog&quot;</span>: <span class="string">&quot;/home/mic/hexo-python-blog&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hexo-poems&quot;</span>: <span class="string">&quot;/home/mic/hexo-poems&quot;</span>,</span><br><span class="line">        <span class="string">&quot;site&quot;</span>: <span class="string">&quot;/srv/http&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> repo_list.<span class="built_in">dict</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repo_list()</span><br></pre></td></tr></table></figure></li><li><p>Now we will test all repositories to know if they need updating, by going in their directories and typing the command “git status”. We convert the function object in a dictionary so as to be simple to handle.<br>We iterate through a loop for all the values of the dictionary, go to their location and do ‘git status’. We collect the output to a file. I used a bash expression so as to be able to use the git command “git status”. The ‘$()’ is the format for commands in bash.  I used the expression ‘&amp;&gt;’ instead of only ‘&gt;’, to write to a file because the ampersand diverts standard error as the ‘&gt;’ diverts output. ‘cwd’ means ‘current working directory’ and determines where the subprocess command will take place.  </p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repositories</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we harvest a &#x27;git status&#x27; of all the repositories&quot;&quot;&quot;</span></span><br><span class="line">    repositories.repos = repo_list()</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> repositories.repos.values():</span><br><span class="line">        cmd = <span class="string">&quot;echo $(git status) &amp;&gt; status_results.txt&quot;</span></span><br><span class="line">        subprocess.run(cmd, cwd=value, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repositories()</span><br></pre></td></tr></table></figure><ol start="3"><li>Again we iterate through the list of values of our dictionary to find the files with the answers to our former query. We open them and if the strings “Changes no staged for commit” and “Untracked files” are present, we put them in a list of repositories to update.  </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we verify who needs an update&quot;&quot;&quot;</span></span><br><span class="line">    update.lst = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> repositories.repos.values():</span><br><span class="line">        path = value + <span class="string">&quot;/status_results.txt&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            status_content = f.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Changes not staged for commit&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Untracked files&quot;</span> <span class="keyword">in</span> status_content:</span><br><span class="line">            update.lst.append(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    update()</span><br></pre></td></tr></table></figure><ol start="4"><li>And, at last, we iterate through a list of dictionary items, (key:value), and if we find the path in the list of repositories to update, we take it’s name and put it in a list.<br>To update the repositories it was needed to create specific scripts for each repo, and this is because I used <a href="https://linux.die.net/man/1/autoexpect">Autoexpect</a> to create them. Autoexpect ‘films’ us doing a given set of commands and operations and repeats them when called out to. It’s particularly useful when having scripts that need authentication.<br>Here’s and example of one of the scripts:  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/expect -f</span><br><span class="line">#</span><br><span class="line"># This Expect script was generated by autoexpect on Wed Aug 11 18:18:48 2021</span><br><span class="line"># Expect and autoexpect were both written by Don Libes, NIST.</span><br><span class="line">#</span><br><span class="line"># Note that autoexpect does not guarantee a working script.  It</span><br><span class="line"># necessarily has to guess about certain things.  Two reasons a script</span><br><span class="line"># might fail are:</span><br><span class="line">#</span><br><span class="line"># 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,</span><br><span class="line"># etc.) and devices discard or ignore keystrokes that arrive &quot;too</span><br><span class="line"># quickly&quot; after prompts.  If you find your new script hanging up at</span><br><span class="line"># one spot, try adding a short sleep just before the previous send.</span><br><span class="line"># Setting &quot;force_conservative&quot; to 1 (see below) makes Expect do this</span><br><span class="line"># automatically - pausing briefly before sending each character.  This</span><br><span class="line"># pacifies every program I know of.  The -c flag makes the script do</span><br><span class="line"># this in the first place.  The -C flag allows you to define a</span><br><span class="line"># character to toggle this mode off and on.</span><br><span class="line"></span><br><span class="line">set force_conservative 0  ;# set to 1 to force conservative mode even if</span><br><span class="line"> ;# script wasn&#x27;t run conservatively originally</span><br><span class="line">if &#123;$force_conservative&#125; &#123;</span><br><span class="line">set send_slow &#123;1 .1&#125;</span><br><span class="line">proc send &#123;ignore arg&#125; &#123;</span><br><span class="line">sleep .1</span><br><span class="line">exp_send -s -- $arg</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># 2) differing output - Some programs produce different output each time</span><br><span class="line"># they run.  The &quot;date&quot; command is an obvious example.  Another is</span><br><span class="line"># ftp, if it produces throughput statistics at the end of a file</span><br><span class="line"># transfer.  If this causes a problem, delete these patterns or replace</span><br><span class="line"># them with wildcards.  An alternative is to use the -p flag (for</span><br><span class="line"># &quot;prompt&quot;) which makes Expect only look for the last line of output</span><br><span class="line"># (i.e., the prompt).  The -P flag allows you to define a character to</span><br><span class="line"># toggle this mode off and on.</span><br><span class="line">#</span><br><span class="line"># Read the man page for more info.</span><br><span class="line">#</span><br><span class="line"># -Don</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set timeout -1</span><br><span class="line">spawn $env(SHELL)</span><br><span class="line">match_max 100000</span><br><span class="line">expect -exact &quot;[1m[7m#[27m[1m[0m                              \r \r\r[0m[27m[24m[Jmicaldas# [K[?2004h&quot;</span><br><span class="line">send -- &quot;gi&quot;</span><br><span class="line">expect -exact gi&quot;</span><br><span class="line">send -- &quot;t add .\r&quot;</span><br><span class="line">expect -exact &quot;[?2004l\r\r</span><br><span class="line">[1m[7m#[27m[1m[0m               \r \r\r[0m[27m[24m[Jmicaldas# [K[?2004h&quot;</span><br><span class="line">send -- &quot;gi&quot;</span><br><span class="line">expect -exact gi&quot;</span><br><span class="line">send -- &quot;t commit -m \&quot;Nth commit\&quot;\r&quot;</span><br><span class="line">expect -exact &quot;[?2004l\r\r</span><br><span class="line">\[master e2c3369\] Nth commit\r</span><br><span class="line"> 2 files changed, 1 insertion(+)\r</span><br><span class="line"> create mode 100755 script.exp\r</span><br><span class="line"> create mode 100644 status_results.txt\r</span><br><span class="line">[1m[7m#[27m[1m[0m               \r \r\r[0m[27m[24m[Jmicaldas# [K[?2004h&quot;</span><br><span class="line">send -- &quot;gi&quot;</span><br><span class="line">expect -exact gi&quot;</span><br><span class="line">send -- &quot;t push origin master\r&quot;</span><br><span class="line">expect -exact &quot;[?2004l\r\r</span><br><span class="line">fatal: &#x27;origin&#x27; does not appear to be a git repository\r</span><br><span class="line">fatal: Could not read from remote repository.\r</span><br><span class="line">\r</span><br><span class="line">Please make sure you have the correct access rights\r</span><br><span class="line">and the repository exists.\r</span><br><span class="line">[1m[7m#[27m[1m[0m               \r \r\r[0m[27m[24m[Jmicaldas# [K[?2004h&quot;</span><br><span class="line">send -- &quot;[A&quot;</span><br><span class="line">expect -exact &quot;git push origin master&quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;[D&quot;</span><br><span class="line">expect -exact &quot;</span><br><span class="line">send -- &quot;_&quot;</span><br><span class="line">expect -exact &quot;_&quot;master</span><br><span class="line">send -- &quot;g&quot;</span><br><span class="line">expect -exact &quot;g&quot;master</span><br><span class="line">send -- &quot;o&quot;</span><br><span class="line">expect -exact &quot;o&quot;master</span><br><span class="line">send -- &quot;g&quot;</span><br><span class="line">expect -exact &quot;g&quot;master</span><br><span class="line">send -- &quot;s&quot;</span><br><span class="line">expect -exact &quot;s&quot;master</span><br><span class="line">send -- &quot;\r&quot;</span><br><span class="line">expect -exact &quot;[?2004l\r\r</span><br><span class="line">Enumerating objects: 5, done.\r</span><br><span class="line">Counting objects:  20% (1/5)\rCounting objects:  40% (2/5)\rCounting objects:  60% (3/5)\rCounting objects:  80% (4/5)\rCounting objects: 100% (5/5)\rCounting objects: 100% (5/5), done.\r</span><br><span class="line">Delta compression using up to 8 threads\r</span><br><span class="line">Compressing objects:  33% (1/3)\rCompressing objects:  66% (2/3)\rCompressing objects: 100% (3/3)\rCompressing objects: 100% (3/3), done.\r</span><br><span class="line">Writing objects:  25% (1/4)\rWriting objects:  50% (2/4)\rWriting objects:  75% (3/4)\rWriting objects: 100% (4/4)\rWriting objects: 100% (4/4), 486 bytes | 486.00 KiB/s, done.\r</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0), pack-reused 0\r</span><br><span class="line">Username for &#x27;http://localhost:3000&#x27;: &quot;</span><br><span class="line">send -- &quot;mic\r&quot;</span><br><span class="line">expect -exact &quot;mic\r</span><br><span class="line">Password for &#x27;http://mic@localhost:3000&#x27;: &quot;</span><br><span class="line">send -- &quot;xxxx\r&quot;</span><br><span class="line">expect -exact &quot;\r</span><br><span class="line">To http://localhost:3000/mic/tree.git\r</span><br><span class="line">   5bd1295..e2c3369  master -&gt; master\r</span><br><span class="line">[1m[7m#[27m[1m[0m               \r \r\r[0m[27m[24m[Jmicaldas# [K[?2004h&quot;</span><br><span class="line">send -- &quot;&quot;</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure></li></ol><p>Getting back to the python document. For each name that we find in our list of paths to repos that needed updating, write the url to the bash script that’ll do the job, and run it with subprocess.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">final_update</span>():</span></span><br><span class="line">    <span class="string">&quot;Here we proceed at the actual update&quot;</span></span><br><span class="line">    names = []</span><br><span class="line">    <span class="keyword">for</span> name, path <span class="keyword">in</span> repositories.repos.items():</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">in</span> update.lst:</span><br><span class="line">            names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        cmd = <span class="string">&quot;/home/mic/scripts/git_manager/&quot;</span> + name + <span class="string">&quot;.exp&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Here’s the final document:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;This function checks if the output says that is needed to update the repository&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"><span class="keyword">from</span> dic <span class="keyword">import</span> repo_list</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repositories</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we harvest a &#x27;git status&#x27; of all the repositories&quot;&quot;&quot;</span></span><br><span class="line">    repositories.repos = repo_list()</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> repositories.repos.values():</span><br><span class="line">        cmd = <span class="string">&quot;echo $(git status) &amp;&gt; status_results.txt&quot;</span></span><br><span class="line">        subprocess.run(cmd, cwd=value, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repositories()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we verify who needs an update&quot;&quot;&quot;</span></span><br><span class="line">    update.lst = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> repositories.repos.values():</span><br><span class="line">        path = value + <span class="string">&quot;/status_results.txt&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            status_content = f.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Changes not staged for commit&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Untracked files&quot;</span> <span class="keyword">in</span> status_content:</span><br><span class="line">            update.lst.append(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">final_update</span>():</span></span><br><span class="line">    <span class="string">&quot;Here we proceed at the actual update&quot;</span></span><br><span class="line">    names = []</span><br><span class="line">    <span class="keyword">for</span> name, path <span class="keyword">in</span> repositories.repos.items():</span><br><span class="line">        <span class="keyword">if</span> path <span class="keyword">in</span> update.lst:</span><br><span class="line">            names.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        cmd = <span class="string">&quot;/home/mic/scripts/git_manager/&quot;</span> + name + <span class="string">&quot;.exp&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    final_update()</span><br></pre></td></tr></table></figure><hr><h2><span id="update">UPDATE</span></h2><p>Apparently I was hasty giving this module as terminated. I assumed that the Expect scripts would work as expected, and didn’t took the time to test them. Which is a particularly egregious mistake as they are numerous. A lot of work could have been spared if I just took the sensible precaution to see if the scripts were doing what they were supposed to do.<br>The problem, to add insult to injury, is very quickly diagnosed. Take the former Expect script example: when I do  a ‘git commit’, Expect ‘expects’ that the result of the commit is, <em>ipsis verbis</em>, equal to the one that was done when ‘recording’ the script:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">send -- &quot;t commit -m \&quot;Nth commit\&quot;\r&quot;</span><br><span class="line">expect -exact &quot;[?2004l\r\r</span><br><span class="line">\[master e2c3369\] Nth commit\r</span><br><span class="line"> 2 files changed, 1 insertion(+)\r</span><br></pre></td></tr></table></figure><p> Obviously when the script runs a second time, this does not happen and it stops, not knowing what to do.<br> There is a way around this, and it’s to use Expect as was originally intended, as a coding language, and write how you want it to react. Not just putting it ‘recording’ blindly your actions.<br> The problem with this is that the language is both ancient and hard. But I’m somewhat committed to making this work, so I won’t quit just now.<br> Asides from that, I made several changes to the code, that seemed excessively complex to me, to reach, I expected, a cleaner, simpler version.<br> But now, looking at it, it seems that my attempts to simplify made it hopelessly convoluted.<br> I seem to remember that these changes were done because the code was not working, asides from the Expect problem, and hence the necessity of this added complexity.<br> But, to be honest, I really don’t remember if my recollection is correct.<br> As I’m questioning this code, what I’ll do now is comment it and see if by retracing my steps this makes more sense. If not, I’ll change it as I write this.<br> The first thing I would like to get out of the way is the ‘logger’ statements. These are logging commands for <a href="https://loguru.readthedocs.io/en/stable/overview.html">Loguru</a>. The ‘@logger.catch’ decorator collects all error messages produced by a specific function. The other logger statements are generally to let me visualize the state of a variable in a particular moment in time. It’s like ‘print’ but it doesn’t necessarily goes to standard output.  </p><ol><li>First thing I did was bring to the main file the repos list and turn it in a dictionary in global setting, so it can be used by all functions.  </li></ol> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">repo_dict = &#123;</span><br><span class="line">    <span class="string">&quot;bkmks&quot;</span>: <span class="string">&quot;/home/mic/python/bkmk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bkmks_urwid&quot;</span>: <span class="string">&quot;/home/mic/python/bkmks_urwid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;books&quot;</span>: <span class="string">&quot;/home/mic/python/books&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cli_app_list&quot;</span>: <span class="string">&quot;/home/mic/python/cli_app_list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;micro_diary&quot;</span>: <span class="string">&quot;/home/mic/python/micro_diary&quot;</span>,</span><br><span class="line">    <span class="string">&quot;notes&quot;</span>: <span class="string">&quot;/home/mic/python/notes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;old_alternative_projects&quot;</span>: <span class="string">&quot;/home/mic/python/old_alternative_projects&quot;</span>,</span><br><span class="line">    <span class="string">&quot;player&quot;</span>: <span class="string">&quot;/home/mic/python/player&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;/home/mic/python/pwd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rss&quot;</span>: <span class="string">&quot;/home/mic/python/rss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scraper&quot;</span>: <span class="string">&quot;/home/mic/python/scraper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: <span class="string">&quot;/home/mic/scripts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;todos&quot;</span>: <span class="string">&quot;/home/mic/python/todos&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tree&quot;</span>: <span class="string">&quot;/home/mic/python/tree&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;/home/mic/python/urlshort&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-python-blog&quot;</span>: <span class="string">&quot;/home/mic/hexo-python-blog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo_poems&quot;</span>: <span class="string">&quot;/home/mic/hexo-poems&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;/srv/http&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>The first function verifies what repos need an update.<br>We create a loop that runs through the paths to repos in said dictionary, and adds to them the name of the file that will be created when we run the ‘git status’ command through all repositories. This new list with the updated URLs, is called ‘paths’.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logger.info(repo_dict)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> repo_dict.values():</span><br><span class="line">    path.append(value + <span class="string">&quot;/status_results.txt&quot;</span>)</span><br><span class="line">logger.info(path)</span><br></pre></td></tr></table></figure></li><li>Now we look to the paths in the ‘path’ list, and check for the patterns that’ll tell us if its necessary to update the repo or not. These patterns are:</li></ol><ul><li>‘Changes not staged for commit’,</li><li>‘Untracked files’.<br>If we find these patterns in the file with the output of the ‘git status’ command, we append the URLs to a new list called ‘repositories.lst’.<br>From that list we take out only the repository names, with the <a href="https://www.w3schools.com/python/ref_string_rsplit.asp">rsplit</a> method, that splits a string to a list. We define that we want only the penultimate value (-2), counted if we split the string by ‘/‘. This list will have only the repo names that need updating.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Changes not staged for commit&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Untracked files&quot;</span> <span class="keyword">in</span> i:</span><br><span class="line">        repositories.lst.append(i)</span><br><span class="line">logger.info(repositories.lst)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repositories.lst:</span><br><span class="line">    repositories.chaves.append(i.rsplit(<span class="string">&quot;/&quot;</span>)[-<span class="number">2</span>])</span><br><span class="line">logger.info(repositories.chaves)</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>As there is one Expect script per repository, we build a string URL that is composed of the path to these scripts, plus the repo names to update, that we take from repositories.chaves. As they are bash scripts, it’s necessary to use subprocess.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="string">&quot;Here we do the update&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> repositories.chaves:</span><br><span class="line">        cmd = <span class="string">&quot;/home/mic/scripts/git_manager/&quot;</span> + i + <span class="string">&quot;.exp&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(cmd)</span><br></pre></td></tr></table></figure></li></ol><p>Of course that even with these changes the script still doesn’t work. It needs the Expect scripts working correctly.<br>But,<br>while writing this,<br>I corrected a lot of ‘corrections’ I did to the original version; that weren’t corrections at all, but added confusion, written when my brain was in a particularly foggy state.<br>Expect another update when I solve the Expect problem. I hope it’s soon.<br>Here is the updated file:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;logging/spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;logging/error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line">logger.add(<span class="string">&quot;logging/info.log&quot;</span>, level=<span class="string">&quot;INFO&quot;</span>, <span class="built_in">format</span>=fmt, backtrace=<span class="literal">True</span>, diagnose=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">repo_dict = &#123;</span><br><span class="line">    <span class="string">&quot;bkmks&quot;</span>: <span class="string">&quot;/home/mic/python/bkmk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bkmks_urwid&quot;</span>: <span class="string">&quot;/home/mic/python/bkmks_urwid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;books&quot;</span>: <span class="string">&quot;/home/mic/python/books&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cli_app_list&quot;</span>: <span class="string">&quot;/home/mic/python/cli_app_list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;micro_diary&quot;</span>: <span class="string">&quot;/home/mic/python/micro_diary&quot;</span>,</span><br><span class="line">    <span class="string">&quot;notes&quot;</span>: <span class="string">&quot;/home/mic/python/notes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;old_alternative_projects&quot;</span>: <span class="string">&quot;/home/mic/python/old_alternative_projects&quot;</span>,</span><br><span class="line">    <span class="string">&quot;player&quot;</span>: <span class="string">&quot;/home/mic/python/player&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;/home/mic/python/pwd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rss&quot;</span>: <span class="string">&quot;/home/mic/python/rss&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scraper&quot;</span>: <span class="string">&quot;/home/mic/python/scraper&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: <span class="string">&quot;/home/mic/scripts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;todos&quot;</span>: <span class="string">&quot;/home/mic/python/todos&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tree&quot;</span>: <span class="string">&quot;/home/mic/python/tree&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;/home/mic/python/urlshort&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo-python-blog&quot;</span>: <span class="string">&quot;/home/mic/hexo-python-blog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hexo_poems&quot;</span>: <span class="string">&quot;/home/mic/hexo-poems&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;/srv/http&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repositories</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Verify what repos need an update&quot;&quot;&quot;</span></span><br><span class="line">    repositories.lst = []</span><br><span class="line">    path = []</span><br><span class="line">    repositories.chaves = []</span><br><span class="line"></span><br><span class="line">    logger.info(repo_dict)</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> repo_dict.values():</span><br><span class="line">        path.append(value + <span class="string">&quot;/status_results.txt&quot;</span>)</span><br><span class="line">    logger.info(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Changes not staged for commit&quot;</span> <span class="keyword">or</span> <span class="string">&quot;Untracked files&quot;</span> <span class="keyword">in</span> i:</span><br><span class="line">            repositories.lst.append(i)</span><br><span class="line">    logger.info(repositories.lst)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> repositories.lst:</span><br><span class="line">        repositories.chaves.append(i.rsplit(<span class="string">&quot;/&quot;</span>)[-<span class="number">2</span>])</span><br><span class="line">    logger.info(repositories.chaves)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repositories()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@logger.catch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>():</span></span><br><span class="line">    <span class="string">&quot;Here we do the update&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> repositories.chaves:</span><br><span class="line">        cmd = <span class="string">&quot;/home/mic/scripts/git_manager/&quot;</span> + i + <span class="string">&quot;.exp&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    update()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been thinking for some time in ways to automate the git uploading process.&lt;br&gt;I have eighteen repositories now and it’s getting hard</summary>
      
    
    
    
    
    <category term="python, git" scheme="http://constantconstipation.club/tags/python-git/"/>
    
  </entry>
  
  <entry>
    <title>scraper</title>
    <link href="http://constantconstipation.club/2021/08/10/scraper/"/>
    <id>http://constantconstipation.club/2021/08/10/scraper/</id>
    <published>2021-08-10T08:34:18.000Z</published>
    <updated>2021-08-20T18:33:21.168Z</updated>
    
    <content type="html"><![CDATA[<p>I just wrote a web-scraping tool based on <a href="https://docs.scrapy.org/">Scrapy</a>.<br>There was a lot of new things that popped up during the build that I want to register while it’s still fresh in my mind.<br>My idea was this,</p><ul><li>check what are the steps necessary to have a spider up and running,  </li><li>Turn all steps into python functions,  </li><li>Create a class to host them. It facilitates the communication between the functions,  </li><li>Add the needed information as class instances items.<br>In the end it worked pretty well. The build was uneventful and I did what I set out to do. Could it be always like that.<br>The app is made from two modules, one that houses the class and does all the heavy lifting, the other, a lighter, simpler file, where you input data to build the instance that’ll become your scraper. I also call the functions from this file.<br>Regarding the class, the file is called ‘scraper.py’, and it’s built like this:<br>In the __init__ function of the class I define what will be the instances requisites.<br>The items are:  </li><li>Name: Name of the publication.</li><li>Project Name: Name for the project folder.I just use ‘name’ and prefix it with ‘_info’.  </li><li>Path: Path to your project.  </li><li>Beginning URLs: The pages that you want to scrape first.  </li><li>Content Title: The title that accompanies the news.  </li><li>Content Author: Who wrote the piece.  </li><li>Content Date Altered: When, if when, was the piece revised.  </li><li>Content: The text of the piece.  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, project_name, path, start_urls, title, author, date_altered, content</span>):</span></span><br><span class="line">     self.name = name</span><br><span class="line">     self.project_name = project_name</span><br><span class="line">     self.path = path</span><br><span class="line">     self.start_urls = start_urls</span><br><span class="line">     self.title = title</span><br><span class="line">     self.author = author</span><br><span class="line">     self.date_altered = date_altered</span><br><span class="line">     self.content = content</span><br></pre></td></tr></table></figure><p>First we have go to where we want to keep the projects. ‘os.chdir’ is a Python command to change the current working directory. os.mkdir creates a directory.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dislocation1</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We head for designated local for the app and create a folder to house it&quot;&quot;&quot;</span></span><br><span class="line">    os.chdir(<span class="string">&quot;/home/mic/python/scraper&quot;</span>)</span><br><span class="line">    os.mkdir(<span class="string">f&quot;<span class="subst">&#123;self.project_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>The next step is to let Scrapy create the project folders and files. For that we are going to use a bash command which forces us to run it through Subprocess. The ‘cwd=path’ part, instructs Subprocess to execute it in the specified folder. While defining ‘path’ we use <a href="https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/">f-Strings</a>, where we input an ‘f’ in the beginning of the string and envelop a variable name with ‘{}’ to represent their value.   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_project</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Scrapy command to start a project&quot;&quot;&quot;</span></span><br><span class="line">    path = <span class="string">f&quot;/home/mic/python/scraper/<span class="subst">&#123;self.project_name&#125;</span>&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;scrapy startproject &quot;</span> + self.name</span><br><span class="line">    subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>It is now time to start building the spider. For that it’s needed to run another command-line, command. Because of this, the structure of the function is very similar to the former.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_spider</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Scrapy command to initiate a spider&quot;&quot;&quot;</span></span><br><span class="line">    project_name = self.project_name</span><br><span class="line">    name = self.name</span><br><span class="line">    paths = <span class="string">&quot;/home/mic/python/scraper/&quot;</span> + project_name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/spiders&quot;</span></span><br><span class="line">    cmd = <span class="string">f&quot;scrapy genspider <span class="subst">&#123;self.name&#125;</span>_info <span class="subst">&#123;self.start_urls&#125;</span>&quot;</span>  <span class="comment"># O nome tem de ser diferente do projecto.</span></span><br><span class="line">    subprocess.run(cmd, cwd=paths, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>We now need to erase some text from the files and add a new one.<br>In this function will do only the erasing.<br>We will delete the string “http”, because when we put our URLs, it latches on to them and creates URLs with this format: “<a href="http://https//new_url.com&quot;">http://https://new_url.com&quot;</a>.<br>In the text on the file, there’s a class that expects our input, as it only has “pass” as content. We’ll erase it. Because this implies changing a file, and files in Python are immutable, we need to take the following steps:  </p><ol><li>First we change current working directory to where the file is with os.chdir.  </li><li>We open it in ‘read’ mode, and create an output file to put the original text, plus the changes we want to make.  </li><li>We replace “http://“ with nothing.  </li><li>We replace “pass” with nothing.  </li><li>We write these changes on the output file.  </li><li>We remove the original file.  </li><li>We change the output file name to the name of the original file.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_spider_file_clean_file</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we clean the spider file a bit. It comes a bit dirty when it is generated by Scrapy&quot;&quot;&quot;</span></span><br><span class="line">    os.chdir(<span class="string">f&quot;/<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> infile, <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_output.py&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">        data = infile.read()</span><br><span class="line">        data = data.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        data = data.replace(<span class="string">&quot;pass&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        outfile.write(data)</span><br><span class="line">        os.remove(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>)</span><br><span class="line">        cmd = <span class="string">f&quot;mv <span class="subst">&#123;self.name&#125;</span>_output.py <span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span></span><br><span class="line">        subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><p> Then we arrive to the trickiest function to write. We have to insert strings on a file, taking into account that they need to be in particular places on it. This was harder than I thought.<br> The first four changes pertain to <a href="https://www.w3.org/TR/xpath20/">Xpath</a> commands, that’ll define what from where in the webpage we’ll be scraping.<br> They all take the form of variables and all have the suffix “response.xpath()”, that indicates that we’re seeing something collected from the scraping, the “response” part, encoded in Xpath. The browser’s developer tools lets us choose a CSS element and copy its Xpath address, making the job even easier than using CSS names. They will all be organized as a Python dictionary with the <a href="https://www.w3schools.com/python/ref_func_zip.asp">zip</a> command. If it’s not a dictionary, XML, JSON and some other type of file I cannot remember right now, Scrapy won’t accept it.<br> We open the file in writing and execute the commands therein.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_spider_file_parse_function</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="string">&quot;&quot;&quot;We add to the file information regarding the areas of the site we want to target&quot;&quot;&quot;</span></span><br><span class="line">       os.chdir(<span class="string">f&quot;/<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders&quot;</span>)</span><br><span class="line">       <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">           f.write(<span class="string">f&quot;        title = response.xpath(&#x27;<span class="subst">&#123;self.title&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">f&quot;        author = response.xpath(&#x27;<span class="subst">&#123;self.author&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">f&quot;        date_altered = response.xpath(&#x27;<span class="subst">&#123;self.date_altered&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">f&quot;        content = response.xpath(&#x27;<span class="subst">&#123;self.content&#125;</span>&#x27;).getall()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;        data = zip(title, author, date_altered, content)&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;        for item in data:\n&quot;</span>)</span><br><span class="line">           f.write(</span><br><span class="line">               <span class="string">&quot;            info = &#123;&#x27;title&#x27;: i:wtem[0], &#x27;author&#x27;: item[1], &#x27;date_altered&#x27;: item[2], &#x27;content&#x27;: item[3]&#125;&quot;</span></span><br><span class="line">           )</span><br><span class="line">           f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;        yield info&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;        with open(&#x27;content.txt&#x27;, &#x27;w&#x27;) as cont:&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">f&quot;            for i in response.xpath(&#x27;<span class="subst">&#123;self.content&#125;</span>&#x27;).getall():&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">           f.write(<span class="string">&quot;                cont.write(str(i))&quot;</span>)</span><br></pre></td></tr></table></figure><p>We now change folders with os.chdir(), to get to the settings.py file, and add two settings:  </p><ol><li>We define the feed format. ‘json’ in this case.  </li><li>The name of the file that will host the scraped information.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">settings</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We add information regarding the format of the output&quot;&quot;&quot;</span></span><br><span class="line">    os.chdir(<span class="string">f&quot;<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;settings.py&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&#x27;FEED_FORMAT = &quot;json&quot;&#x27;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;FEED_URI = &#x27;<span class="subst">&#123;self.name&#125;</span>.json&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Changes to settings are done&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>Now we start, finally, crawling the site. As it’s another command line command, we’ll be using Subprocess again.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We initiate the scraping&quot;&quot;&quot;</span></span><br><span class="line">    path = self.path</span><br><span class="line">    project_name = self.project_name</span><br><span class="line">    name = self.name</span><br><span class="line">    path = path + <span class="string">&quot;/&quot;</span> + project_name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/spiders/&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;scrapy crawl &quot;</span> + name + <span class="string">&quot;_info&quot;</span></span><br><span class="line">    subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>We now open the file created on the last step, and check if all was scraped correctly.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Verifying the output file, to see if everything is OK&quot;&quot;&quot;</span></span><br><span class="line">    name = self.name</span><br><span class="line">    path = <span class="string">f&quot;<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders/&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;vim &quot;</span> + name + <span class="string">&quot;.json&quot;</span></span><br><span class="line">    subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>Here is all the code:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;The objective of this module is to automate the steps to scrape a given publication&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scraper</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;This class will be broken in the steps needed to create a scraping campaign. Each step a function.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, project_name, path, start_urls, title, author, date_altered, content</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.project_name = project_name</span><br><span class="line">        self.path = path</span><br><span class="line">        self.start_urls = start_urls</span><br><span class="line">        self.title = title</span><br><span class="line">        self.author = author</span><br><span class="line">        self.date_altered = date_altered</span><br><span class="line">        self.content = content</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dislocation1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We head for designated local for the app and create a folder to house it&quot;&quot;&quot;</span></span><br><span class="line">        os.chdir(<span class="string">&quot;/home/mic/python/scraper&quot;</span>)</span><br><span class="line">        os.mkdir(<span class="string">f&quot;<span class="subst">&#123;self.project_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_project</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Scrapy command to start a project&quot;&quot;&quot;</span></span><br><span class="line">        path = <span class="string">f&quot;/home/mic/python/scraper/<span class="subst">&#123;self.project_name&#125;</span>&quot;</span></span><br><span class="line">        cmd = <span class="string">&quot;scrapy startproject &quot;</span> + self.name</span><br><span class="line">        subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_spider</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Scrapy command to initiate a spider&quot;&quot;&quot;</span></span><br><span class="line">        project_name = self.project_name</span><br><span class="line">        name = self.name</span><br><span class="line">        paths = <span class="string">&quot;/home/mic/python/scraper/&quot;</span> + project_name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/spiders&quot;</span></span><br><span class="line">        cmd = <span class="string">f&quot;scrapy genspider <span class="subst">&#123;self.name&#125;</span>_info <span class="subst">&#123;self.start_urls&#125;</span>&quot;</span>  <span class="comment"># O nome tem de ser diferente do projecto.</span></span><br><span class="line">        subprocess.run(cmd, cwd=paths, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_spider_file_clean_file</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Here we clean the spider file a bit. It comes a bit dirty when it is generated by Scrapy&quot;&quot;&quot;</span></span><br><span class="line">        os.chdir(<span class="string">f&quot;/<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> infile, <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_output.py&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">            data = infile.read()</span><br><span class="line">            data = data.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            data = data.replace(<span class="string">&quot;pass&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            outfile.write(data)</span><br><span class="line">            os.remove(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>)</span><br><span class="line">            cmd = <span class="string">f&quot;mv <span class="subst">&#123;self.name&#125;</span>_output.py <span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span></span><br><span class="line">            subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit_spider_file_parse_function</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We add to the file information regarding the areas of the site we want to target&quot;&quot;&quot;</span></span><br><span class="line">        os.chdir(<span class="string">f&quot;/<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>_info.py&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;        title = response.xpath(&#x27;<span class="subst">&#123;self.title&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;        author = response.xpath(&#x27;<span class="subst">&#123;self.author&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;        date_altered = response.xpath(&#x27;<span class="subst">&#123;self.date_altered&#125;</span>&#x27;).extract()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;        content = response.xpath(&#x27;<span class="subst">&#123;self.content&#125;</span>&#x27;).getall()&quot;</span> <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;        data = zip(title, author, date_altered, content)&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;        for item in data:\n&quot;</span>)</span><br><span class="line">            f.write(</span><br><span class="line">                <span class="string">&quot;            info = &#123;&#x27;title&#x27;: i:wtem[0], &#x27;author&#x27;: item[1], &#x27;date_altered&#x27;: item[2], &#x27;content&#x27;: item[3]&#125;&quot;</span></span><br><span class="line">            )</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;        yield info&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;        with open(&#x27;content.txt&#x27;, &#x27;w&#x27;) as cont:&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;            for i in response.xpath(&#x27;<span class="subst">&#123;self.content&#125;</span>&#x27;).getall():&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;                cont.write(str(i))&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">settings</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We add information regarding the format of the output&quot;&quot;&quot;</span></span><br><span class="line">        os.chdir(<span class="string">f&quot;<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;settings.py&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">&#x27;FEED_FORMAT = &quot;json&quot;&#x27;</span>)</span><br><span class="line">            f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;FEED_URI = &#x27;<span class="subst">&#123;self.name&#125;</span>.json&#x27;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Changes to settings are done&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;We initiate the scraping&quot;&quot;&quot;</span></span><br><span class="line">        path = self.path</span><br><span class="line">        project_name = self.project_name</span><br><span class="line">        name = self.name</span><br><span class="line">        path = path + <span class="string">&quot;/&quot;</span> + project_name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;/spiders/&quot;</span></span><br><span class="line">        cmd = <span class="string">&quot;scrapy crawl &quot;</span> + name + <span class="string">&quot;_info&quot;</span></span><br><span class="line">        subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Verifying the output file, to see if everythng is ok&quot;&quot;&quot;</span></span><br><span class="line">        name = self.name</span><br><span class="line">        path = <span class="string">f&quot;<span class="subst">&#123;self.path&#125;</span>/<span class="subst">&#123;self.project_name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/<span class="subst">&#123;self.name&#125;</span>/spiders/&quot;</span></span><br><span class="line">        cmd = <span class="string">&quot;vim &quot;</span> + name + <span class="string">&quot;.json&quot;</span></span><br><span class="line">        subprocess.run(cmd, cwd=path, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><h2><span id="the-main-function">The Main Function</span></h2><p>On another file named ‘main_scraper.py’, we define the instances arguments for the class we just saw.<br>The last thing to do is run sequentially the functions that were created, to create simple and fast spider bot.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Main module of the app. Where all functionalities are accessed from&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">import</span> questionary</span><br><span class="line"><span class="keyword">from</span> scraper <span class="keyword">import</span> Scraper</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(<span class="string">&quot;error.log&quot;</span>, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Here we start, sequentially, all the steps needed to create a scraping campaign.&quot;&quot;&quot;</span></span><br><span class="line">    rasoura = Scraper(</span><br><span class="line">        <span class="string">&quot;eco&quot;</span>,</span><br><span class="line">        <span class="string">&quot;eco_newspaper&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/home/mic/python/scraper&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://eco.sapo.pt/2021/08/10/chineses-obrigam-loja-da-xiaomi-em-portugal-a-desistir-de-pagamentos-com-criptomoedas/&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;post-878113&quot;]/div/div[1]/header/h1/text()&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;post-878113&quot;]/div/div[1]/header/div[2]/div/div[1]/ul/li[1]/a/text()&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;post-878113&quot;]/div/div[1]/header/div[2]/div/div[1]/ul/li[2]&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;//*[@id=&quot;post-878113&quot;]/div/div[1]/div[1]/p/text()&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    rasoura.dislocation1()</span><br><span class="line">    rasoura.start_project()</span><br><span class="line">    rasoura.start_spider()</span><br><span class="line">    rasoura.edit_spider_file_clean_file()</span><br><span class="line">    rasoura.edit_spider_file_parse_function()</span><br><span class="line">    rasoura.settings()</span><br><span class="line">    rasoura.crawl()</span><br><span class="line">    rasoura.result()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I just wrote a web-scraping tool based on &lt;a href=&quot;https://docs.scrapy.org/&quot;&gt;Scrapy&lt;/a&gt;.&lt;br&gt;There was a lot of new things that popped up </summary>
      
    
    
    
    
    <category term="python, scraping, web" scheme="http://constantconstipation.club/tags/python-scraping-web/"/>
    
  </entry>
  
  <entry>
    <title>urwid_project</title>
    <link href="http://constantconstipation.club/2021/08/07/urwid-project/"/>
    <id>http://constantconstipation.club/2021/08/07/urwid-project/</id>
    <published>2021-08-07T11:45:05.000Z</published>
    <updated>2021-08-20T19:29:30.938Z</updated>
    
    <content type="html"><![CDATA[<p>For no reason in particular, I’ve been playing with a version of the bookmarks app done in <a href="http://urwid.org/">Urwid</a>.<br>One of the first things that strikes you while using this library is that it is old. The examples have the fit and finish of a 80’s Visual Basic cassette and the library has the clunky, organic charm of a project that grew naturally for many years.<br>Urwid has tons of charm.<br>And, on top of the charm, there’s the fact that I still can’t grok how <a href="https://github.com/prompt-toolkit/python-prompt-toolkit">Prompt Toolkit</a> actually works.<br>So, for now, Urwid is my go-to.<br>One thing that doesn’t work in urwid is, making several questions in the same function.<br>Because of this, to add a bookmark entry in Urwid, I created six files:</p><ul><li>One to insert the title,</li><li>another for the comment,</li><li>another for the link,</li><li>and three more for the tag entries. k1, k2, k3.</li></ul><p>The same happened when I adapted the update function to Urwid. I had to create a file for each of the data points, that are needed to make an update. One for the column, another for the id and another for the update.<br>Only now, after it’s done, comes to me that I could have pooled all the add and update functions in two modules. I just had to create different functions for each one, and I would have now much less files.<br>But, at the same time, I like the cleanliness of having them distributed by files. It’s easier to isolate and debug.<br>Besides Urwid I also imported <a href="https://loguru.readthedocs.io/en/stable/index.html">Loguru</a>, a simple to setup and use logging app; that I intend to install in all my future projects.<br>sys is needed for Loguru.<br>Here is the example of one such file, ‘add_title.py’:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urwid</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br></pre></td></tr></table></figure><p>Here I define the parameters for Loguru. It has nothing to do with our current subject.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(sys.stderr, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br></pre></td></tr></table></figure><p>First we create a function that defines the exit key as ‘Q’ or ‘q’.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_on_q</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="string">&quot;q&quot;</span>, <span class="string">&quot;Q&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> urwid.ExitMainLoop()</span><br></pre></td></tr></table></figure><p>Next we call the QuestionBox class and, inside it, create a function that defines that Urwid will record all keyboard key-presses as input; with the exception of of ‘enter’.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionBox</span>(<span class="params">urwid.Filler</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll create a tui window in urwid to ask the question&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keypress</span>(<span class="params">self, size, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key != <span class="string">&quot;enter&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>(QuestionBox, self).keypress(size, key)</span><br><span class="line">        texto = <span class="string">u&quot;%s.\n\nPRESS Q TO EXIT.&quot;</span> % edit.edit_text</span><br><span class="line">        self.original_widget = urwid.Text(texto, align=<span class="string">&quot;center&quot;</span>)</span><br></pre></td></tr></table></figure><p>We define a color palette for the window.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">palette = [</span><br><span class="line">    (<span class="string">&quot;banner&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;#ff6f69&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;streak&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;light red&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;bg&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;#ff6f69&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>We ask for the title name from the user.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit = urwid.Edit((<span class="string">&quot;banner&quot;</span>, <span class="string">u&quot;WHAT IS THE TITTLE?\n&quot;</span>), align=<span class="string">&quot;center&quot;</span>)</span><br></pre></td></tr></table></figure><p>Create the fill and loop objects:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fill = QuestionBox(edit)</span><br><span class="line">loop = urwid.MainLoop(fill, palette, unhandled_input=exit_on_q)</span><br></pre></td></tr></table></figure><p>Set the terminal color for 256.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop.screen.set_terminal_properties(colors=<span class="number">256</span>)</span><br></pre></td></tr></table></figure><p>An <a href="https://tinyurl.com/ye9kwop6">AttrMap</a> decoration is created to wrap the text widget with display attribute ‘streak’. AttrMap widgets allow you to map any display attribute to any other display attribute, but by default they will set the display attribute of everything that does not already have a display attribute. A second AttrMap widget is created to wrap the Filler widget with attribute ‘bg’.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop.widget = urwid.AttrMap(fill, <span class="string">&quot;bg&quot;</span>)</span><br></pre></td></tr></table></figure><p>And, finally, we run the loop.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loop.run()</span><br></pre></td></tr></table></figure><p>Since I can’t send the information immediately to the database, as all the data points required are dispersed by three files, I chose to store it in a file, yes, more files, so I could send it later. And by later I mean, after having all the information needed.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;title.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(edit.get_edit_text())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>The full document:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Adding a new note. Title question&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urwid</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(sys.stderr, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_on_q</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">in</span> (<span class="string">&quot;q&quot;</span>, <span class="string">&quot;Q&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> urwid.ExitMainLoop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionBox</span>(<span class="params">urwid.Filler</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;We&#x27;ll create a tui window in urwid to ask the question&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keypress</span>(<span class="params">self, size, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key != <span class="string">&quot;enter&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>(QuestionBox, self).keypress(size, key)</span><br><span class="line">        texto = <span class="string">u&quot;%s.\n\nPRESS Q TO EXIT.&quot;</span> % edit.edit_text</span><br><span class="line">        self.original_widget = urwid.Text(texto, align=<span class="string">&quot;center&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">palette = [</span><br><span class="line">    (<span class="string">&quot;banner&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;#ff6f69&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;streak&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;light red&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;bg&quot;</span>, <span class="string">&quot;white&quot;</span>, <span class="string">&quot;#ff6f69&quot;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">edit = urwid.Edit((<span class="string">&quot;banner&quot;</span>, <span class="string">u&quot;WHAT IS THE TITTLE?\n&quot;</span>), align=<span class="string">&quot;center&quot;</span>)</span><br><span class="line">fill = QuestionBox(edit)</span><br><span class="line">loop = urwid.MainLoop(fill, palette, unhandled_input=exit_on_q)</span><br><span class="line">loop.screen.set_terminal_properties(colors=<span class="number">256</span>)</span><br><span class="line">loop.widget = urwid.AttrMap(fill, <span class="string">&quot;bg&quot;</span>)</span><br><span class="line">loop.run()</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;title.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">f.write(edit.get_edit_text())</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><hr><p>When I finally ended writing the app, and all the work was, apparently, done, I realized something that it could have been brought to my attention earlier. The Urwid documentation syntax, has a lot of content outside functions. This will be a big problem when importing all the files to the main file.<br>Add to this that, because I slavishly/mindlessly copied what I had seen in the documentation, I didn’t use any <code>if __name__ == &#39;__main__&#39;:</code> code in any file. This was shaping up to be an import nightmare.<br>I really didn’t wanted to refactor all  my code, so as to put it inside functions. If for nothing else, because Urwid wouldn’t probably work that way.<br>The solution I came up with was, create a python script where I execute all files, in Subprocess, as if they were running in the shell, ‘python &lt;file_name.py&gt;.<br>Let’s see an example. First we define the options on this main.py file. The ‘u’ in the beginning of the string defines its content as unicode. This is a definition that is not needed <a href="https://docs.python.org/3/howto/unicode.html">since the birth of python3</a>, but this is how it’s written in Urwid’s documentation; and, because I only knew this after writing the app, it stays in the code until such time as I feel willing to refactor.   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">choices = <span class="string">u&quot;Add, See, Search, Delete, Update, Exit&quot;</span>.split()</span><br></pre></td></tr></table></figure><p>We define a vertical menu with this options.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">title, choices</span>):</span></span><br><span class="line">    body = [urwid.Text(title), urwid.Divider()]</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> choices:</span><br><span class="line">        button = urwid.Button(c)</span><br><span class="line">        urwid.connect_signal(button, <span class="string">&quot;click&quot;</span>, item_chosen, c)</span><br><span class="line">        body.append(urwid.AttrMap(button, <span class="literal">None</span>, focus_map=<span class="string">&quot;reversed&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> urwid.ListBox(urwid.SimpleFocusListWalker(body))</span><br></pre></td></tr></table></figure><p>Then we define the choice process.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item_chosen</span>(<span class="params">button, choice</span>):</span></span><br><span class="line">    response = urwid.Text([<span class="string">u&quot;You chose &quot;</span>, choice, <span class="string">u&quot;\n&quot;</span>])</span><br><span class="line">    done = urwid.Button(<span class="string">u&quot;OK&quot;</span>)</span><br><span class="line">    urwid.connect_signal(done, <span class="string">&quot;click&quot;</span>, exit_program)</span><br><span class="line">    main.original_widget = urwid.Filler(urwid.Pile([response, urwid.AttrMap(done, <span class="literal">None</span>, focus_map=<span class="string">&quot;reversed&quot;</span>)]))</span><br><span class="line">    item_chosen.pick = <span class="built_in">str</span>(choice[:-<span class="number">1</span>])  <span class="comment"># Result comes with trailing comma. This gets rid of it.</span></span><br></pre></td></tr></table></figure><p>And the conditions for exiting the program.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_program</span>(<span class="params">button</span>):</span></span><br><span class="line">    <span class="keyword">raise</span> urwid.ExitMainLoop()</span><br></pre></td></tr></table></figure><p>Here we define the visual look of the widget.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main = urwid.Padding(menu(<span class="string">u&quot;Pythons&quot;</span>, choices), left=<span class="number">2</span>, right=<span class="number">2</span>)</span><br><span class="line">top = urwid.Overlay(</span><br><span class="line">    main,</span><br><span class="line">    urwid.SolidFill(<span class="string">u&quot;\N&#123;MEDIUM SHADE&#125;&quot;</span>),</span><br><span class="line">    align=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">    width=(<span class="string">&quot;relative&quot;</span>, <span class="number">60</span>),</span><br><span class="line">    valign=<span class="string">&quot;middle&quot;</span>,</span><br><span class="line">    height=(<span class="string">&quot;relative&quot;</span>, <span class="number">60</span>),</span><br><span class="line">    min_width=<span class="number">20</span>,</span><br><span class="line">    min_height=<span class="number">9</span>,</span><br><span class="line">)</span><br><span class="line">urwid.MainLoop(top, palette=[(<span class="string">&quot;reversed&quot;</span>, <span class="string">&quot;standout&quot;</span>, <span class="string">&quot;&quot;</span>)]).run()</span><br></pre></td></tr></table></figure><p>And finally we arrive at the main function, where I use subprocess to start the files in python through the shell; thus circumventing the import problem.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Add&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_title.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_comment.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_link.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k1.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k2.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k3.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python connections.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;See&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python see.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Search&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python  search.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Delete&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python delete.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Update&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_column.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_id.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_update.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python updt_connections.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Exit&quot;</span>:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure><p>The full text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/python3.9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Main Module of the App. Where all the commands are accessed from&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> urwid</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fmt = <span class="string">&quot;&#123;time&#125; - &#123;name&#125; - &#123;level&#125; - &#123;message&#125;&quot;</span></span><br><span class="line">logger.add(<span class="string">&quot;spam.log&quot;</span>, level=<span class="string">&quot;DEBUG&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line">logger.add(sys.stderr, level=<span class="string">&quot;ERROR&quot;</span>, <span class="built_in">format</span>=fmt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choices = <span class="string">u&quot;Add, See, Search, Delete, Update, Exit&quot;</span>.split()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>(<span class="params">title, choices</span>):</span></span><br><span class="line">    body = [urwid.Text(title), urwid.Divider()]</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> choices:</span><br><span class="line">        button = urwid.Button(c)</span><br><span class="line">        urwid.connect_signal(button, <span class="string">&quot;click&quot;</span>, item_chosen, c)</span><br><span class="line">        body.append(urwid.AttrMap(button, <span class="literal">None</span>, focus_map=<span class="string">&quot;reversed&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> urwid.ListBox(urwid.SimpleFocusListWalker(body))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item_chosen</span>(<span class="params">button, choice</span>):</span></span><br><span class="line">    response = urwid.Text([<span class="string">u&quot;You chose &quot;</span>, choice, <span class="string">u&quot;\n&quot;</span>])</span><br><span class="line">    done = urwid.Button(<span class="string">u&quot;Ok&quot;</span>)</span><br><span class="line">    urwid.connect_signal(done, <span class="string">&quot;click&quot;</span>, exit_program)</span><br><span class="line">    main.original_widget = urwid.Filler(urwid.Pile([response, urwid.AttrMap(done, <span class="literal">None</span>, focus_map=<span class="string">&quot;reversed&quot;</span>)]))</span><br><span class="line">    item_chosen.pick = <span class="built_in">str</span>(choice[:-<span class="number">1</span>])  <span class="comment"># Result comes with trailing comma. This gets rid of it.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_program</span>(<span class="params">button</span>):</span></span><br><span class="line">    <span class="keyword">raise</span> urwid.ExitMainLoop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main = urwid.Padding(menu(<span class="string">u&quot;Pythons&quot;</span>, choices), left=<span class="number">2</span>, right=<span class="number">2</span>)</span><br><span class="line">top = urwid.Overlay(</span><br><span class="line">    main,</span><br><span class="line">    urwid.SolidFill(<span class="string">u&quot;\N&#123;MEDIUM SHADE&#125;&quot;</span>),</span><br><span class="line">    align=<span class="string">&quot;center&quot;</span>,</span><br><span class="line">    width=(<span class="string">&quot;relative&quot;</span>, <span class="number">60</span>),</span><br><span class="line">    valign=<span class="string">&quot;middle&quot;</span>,</span><br><span class="line">    height=(<span class="string">&quot;relative&quot;</span>, <span class="number">60</span>),</span><br><span class="line">    min_width=<span class="number">20</span>,</span><br><span class="line">    min_height=<span class="number">9</span>,</span><br><span class="line">)</span><br><span class="line">urwid.MainLoop(top, palette=[(<span class="string">&quot;reversed&quot;</span>, <span class="string">&quot;standout&quot;</span>, <span class="string">&quot;&quot;</span>)]).run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Add&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_title.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_comment.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_link.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k1.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k2.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python add_k3.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python connections.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;See&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python see.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Search&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python  search.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Delete&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python delete.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Update&quot;</span>:</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_column.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_id.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python update_update.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">        subprocess.run(<span class="string">&quot;python updt_connections.py&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> item_chosen.pick == <span class="string">&quot;Exit&quot;</span>:</span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;For no reason in particular, I’ve been playing with a version of the bookmarks app done in &lt;a href=&quot;http://urwid.org/&quot;&gt;Urwid&lt;/a&gt;.&lt;br&gt;One </summary>
      
    
    
    
    
    <category term="urwid, python, cli" scheme="http://constantconstipation.club/tags/urwid-python-cli/"/>
    
  </entry>
  
  <entry>
    <title>quick_and_easy-part-3</title>
    <link href="http://constantconstipation.club/2021/07/19/quick-and-easy-part-3/"/>
    <id>http://constantconstipation.club/2021/07/19/quick-and-easy-part-3/</id>
    <published>2021-07-19T06:19:41.000Z</published>
    <updated>2021-08-21T03:37:24.842Z</updated>
    
    <content type="html"><![CDATA[<p>These things grow organically.<br>When I say “these things”, I’m talking about projects from tinkerers such as myself. As we don’t know what we don’t know, it’s very difficult to plan ahead in development.<br>One recurring and perennial consequence, is the inability of doing things twice the same way.<br>This last project is no exception.<br>When I started thinking in automating the creation a web page every time a new note is inserted via cli, I realized that I didn’t had, in web page form, some of the notes that existed in the database; and were accessible through the cli app.<br>So, this is what i did:</p><ol><li>These are my imports. I’ll just leave them here. Their role will be clearer later on.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> low_range <span class="keyword">import</span> low_range</span><br><span class="line"><span class="keyword">from</span> high_range <span class="keyword">import</span> high_range</span><br><span class="line"><span class="keyword">from</span> medium_range <span class="keyword">import</span> medium_range</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br></pre></td></tr></table></figure></li><li>Created a function that’ll house too much of the code of the creation of the web pages.<br>I should’ve broken this is 2 or 3 functions, probably created a class, but I was lazy, and did it all in one function.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto</span>():</span></span><br></pre></td></tr></table></figure></li><li>Remember when I said that one my best design decisions was to separate the web and cli databases? Well, turns out it wasn’t. It was a good decision while I thought on how I was going to structure the app. I didn’t want to mess up what I already had running and this solution minimized risks. But when I started thinking on the daily care of both the cli and web app it soon became apparent that this was no solution.<br>My first step was to ascertain what notes were exclusively in the cli database.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">        host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">        password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br></pre></td></tr></table></figure></li><li>I created a list, asked what notes didn’t have a URL and stored them in the list.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">null_list = []</span><br><span class="line">query = <span class="string">&quot;SELECT * FROM notes WHERE url is NULL&quot;</span></span><br><span class="line">cur.execute(query)</span><br><span class="line">records = cur.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">    null_list.append(row)</span><br></pre></td></tr></table></figure></li><li>Turned the list of tuples supplied, to a list of strings.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null_list = [[<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> tup] <span class="keyword">for</span> tup <span class="keyword">in</span> null_list]</span><br></pre></td></tr></table></figure></li><li>Replaced the dashes I use in the cli version as separators, to spaces.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null_list = [[x.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> null_list]</span><br></pre></td></tr></table></figure></li><li>Replaced the new line symbol by a break tag, that would be honored when I turned it to a php file.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null_list = [[x.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&lt;br&gt;&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> null_list]</span><br></pre></td></tr></table></figure></li><li>Created a list with only the id’s.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_id_list = []</span><br><span class="line"><span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">    new_id_list.append(lst[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li><li>Created a empty URL list,  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_url_list = []</span><br></pre></td></tr></table></figure></li><li>To create the new files, I used a template I called “source”. Defined both the location on the server and on the folder structure.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">    source = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/index.php&#x27;</span></span><br><span class="line">    destination = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + <span class="built_in">str</span>(lst[<span class="number">0</span>]) + <span class="string">&#x27;-page.php&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://localhost/notes/pages/styled_notes/&#x27;</span> + <span class="built_in">str</span>(lst[<span class="number">0</span>]) + <span class="string">&#x27;-page.php&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Now that I had the URLs, I could fill my list.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_url_list.append(url)</span><br></pre></td></tr></table></figure></li><li>Copied the source file into the new files.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copyfile(source, destination)</span><br></pre></td></tr></table></figure></li><li>Opened all new notes pages,  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br></pre></td></tr></table></figure></li><li>Inserted the text of the note at the line 19.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lines[<span class="number">19</span>] = <span class="built_in">str</span>(lst[<span class="number">5</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(lines)</span><br></pre></td></tr></table></figure></li><li>To help me dimension the boxes that encircle the notes, I counted the lines they occupied.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line_count = []</span><br><span class="line"><span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">    line_count.append(lst[<span class="number">5</span>].count(<span class="string">&#x27;&lt;br&gt;&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>Gathered the line count, id, URL lists into one sole list. This is needed to write <code>list(result)</code>, because zip is a byte object, and it only is accessible this way.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="built_in">zip</span>(line_count, new_id_list, new_url_list)</span><br><span class="line">result = (<span class="built_in">list</span>(result))</span><br></pre></td></tr></table></figure></li><li>For row in the database, if the line count value is higher or equal to 11 but smaller than 18, it opens a file that writes to index.css a CSS description of the note box, tailored for content that is a bit larger than the default. There is also an alteration in the html, so the new note box name in the CSS, is mirrored in the html.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">0</span>] &gt;= <span class="number">11</span> <span class="keyword">and</span> i[<span class="number">0</span>] &lt;= <span class="number">18</span>:</span><br><span class="line">        low_range(i[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">            lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + i[<span class="number">1</span>] + <span class="string">&#x27;-page.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(lines)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;low  range&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>If the line count is between 18 and 36, there is another CSS profile.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i[<span class="number">0</span>] &gt; <span class="number">18</span> <span class="keyword">and</span> i[<span class="number">0</span>] &lt;= <span class="number">36</span>:</span><br><span class="line">    medium_range(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + i[<span class="number">1</span>] + <span class="string">&#x27;-page.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(lines)</span><br></pre></td></tr></table></figure></li><li>And if it’s bigger, another.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i[<span class="number">0</span>] &gt; <span class="number">36</span>:</span><br><span class="line">    high_range(i[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writelines(lines)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;high range&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>Finally, I connect again to the database, now just one database, and write the URL paths in the lines that don’t have values.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">        host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">        password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;url - &#x27;</span>, <span class="built_in">str</span>(i[<span class="number">2</span>]))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;id - &#x27;</span>, <span class="built_in">str</span>(i[<span class="number">1</span>]))</span><br><span class="line">        query = <span class="string">&quot;UPDATE notes SET url = &#x27;&quot;</span> + <span class="built_in">str</span>(i[<span class="number">2</span>]) + <span class="string">&quot;&#x27; WHERE ntid = &quot;</span> + <span class="built_in">str</span>(i[<span class="number">1</span>])</span><br><span class="line">        <span class="built_in">print</span>(query)</span><br><span class="line">        cur.execute(query)</span><br><span class="line">        conn.commit()</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br></pre></td></tr></table></figure></li></ol><p>The whole file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"><span class="comment"># @author      : mic (mic@$HOSTNAME)</span></span><br><span class="line"><span class="comment"># @file        : auto_notes.sh</span></span><br><span class="line"><span class="comment"># @created     : Saturday Jun 26, 2021 03:52:05 WEST</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @description : Publish notes inserted on cli on the website</span></span><br><span class="line"><span class="comment">######################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> low_range <span class="keyword">import</span> low_range</span><br><span class="line"><span class="keyword">from</span> high_range <span class="keyword">import</span> high_range</span><br><span class="line"><span class="keyword">from</span> medium_range <span class="keyword">import</span> medium_range</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        null_list = []</span><br><span class="line">        query = <span class="string">&quot;SELECT * FROM notes WHERE url is NULL&quot;</span></span><br><span class="line">        cur.execute(query)</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            null_list.append(row)</span><br><span class="line">        null_list = [[<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> tup] <span class="keyword">for</span> tup <span class="keyword">in</span> null_list]</span><br><span class="line">        <span class="comment"># print(null_list)</span></span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">    null_list = [[x.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> null_list]</span><br><span class="line">    null_list = [[x.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&lt;br&gt;&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> i] <span class="keyword">for</span> i <span class="keyword">in</span> null_list]</span><br><span class="line"></span><br><span class="line">    new_id_list = []</span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">        new_id_list.append(lst[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    new_url_list = []</span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">        source = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/index.php&#x27;</span></span><br><span class="line">        destination = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + <span class="built_in">str</span>(lst[<span class="number">0</span>]) + <span class="string">&#x27;-page.php&#x27;</span></span><br><span class="line">        url = <span class="string">&#x27;http://localhost/notes/pages/styled_notes/&#x27;</span> + <span class="built_in">str</span>(lst[<span class="number">0</span>]) + <span class="string">&#x27;-page.php&#x27;</span></span><br><span class="line">        new_url_list.append(url)</span><br><span class="line">        shutil.copyfile(source, destination)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">        lines[<span class="number">19</span>] = <span class="built_in">str</span>(lst[<span class="number">5</span>])</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(lines)</span><br><span class="line"></span><br><span class="line">    line_count = []</span><br><span class="line">    <span class="keyword">for</span> lst <span class="keyword">in</span> null_list:</span><br><span class="line">        line_count.append(lst[<span class="number">5</span>].count(<span class="string">&#x27;&lt;br&gt;&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    result = <span class="built_in">zip</span>(line_count, new_id_list, new_url_list)</span><br><span class="line">    result = (<span class="built_in">list</span>(result))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt;= <span class="number">11</span> <span class="keyword">and</span> i[<span class="number">0</span>] &lt;= <span class="number">18</span>:</span><br><span class="line">            low_range(i[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line">                lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + i[<span class="number">1</span>] + <span class="string">&#x27;-page.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.writelines(lines)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;low  range&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt; <span class="number">18</span> <span class="keyword">and</span> i[<span class="number">0</span>] &lt;= <span class="number">36</span>:</span><br><span class="line">            medium_range(i[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line">                lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + i[<span class="number">1</span>] + <span class="string">&#x27;-page.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.writelines(lines)</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt; <span class="number">36</span>:</span><br><span class="line">            high_range(i[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                lines = f.readlines()</span><br><span class="line">                lines[<span class="number">15</span>] = <span class="string">&quot;&lt;div class=&#x27;box-&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;&#x27;&gt;&lt;i class=&#x27;fas fa-quote-left fa2&#x27;&gt;&lt;/i&gt;&lt;div class=&#x27;text&#x27;&gt;&lt;i class=&#x27;fas fa-quote-right fa1&#x27;&gt;&lt;/i&gt;&lt;div&gt;&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/srv/http/notes/pages/styled_notes/&quot;</span> + i[<span class="number">1</span>] + <span class="string">&quot;-page.php&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.writelines(lines)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;high range&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;url - &#x27;</span>, <span class="built_in">str</span>(i[<span class="number">2</span>]))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;id - &#x27;</span>, <span class="built_in">str</span>(i[<span class="number">1</span>]))</span><br><span class="line">            query = <span class="string">&quot;UPDATE notes SET url = &#x27;&quot;</span> + <span class="built_in">str</span>(i[<span class="number">2</span>]) + <span class="string">&quot;&#x27; WHERE ntid = &quot;</span> + <span class="built_in">str</span>(i[<span class="number">1</span>])</span><br><span class="line">            <span class="built_in">print</span>(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(datetime.now)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    auto()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;These things grow organically.&lt;br&gt;When I say “these things”, I’m talking about projects from tinkerers such as myself. As we don’t know w</summary>
      
    
    
    
    
    <category term="python, web, php" scheme="http://constantconstipation.club/tags/python-web-php/"/>
    
  </entry>
  
  <entry>
    <title>web-apps-structural-reasoning</title>
    <link href="http://constantconstipation.club/2021/07/17/web-apps-structural-reasoning/"/>
    <id>http://constantconstipation.club/2021/07/17/web-apps-structural-reasoning/</id>
    <published>2021-07-17T13:42:06.000Z</published>
    <updated>2021-08-21T04:37:17.096Z</updated>
    
    <content type="html"><![CDATA[<p>While doing the web apps projects, I realized that I, fortuitously, had come upon a template for web setups.<br>In the very beginning of these projects, I was still trying to understand what would be the substitute of Python in the web world; as the tools I knew, cursorily, HTML and CSS, didn’t do what I needed.<br>I then discovered PHP, that uncool, unhip, language that I grew to love.<br>I was also positively impressed by how easy I could port my knowledge of Python and its syntax to this new language. So it was very much love at first site, in a inversely proportional relationship with JavaScript. Which I maintain is not a language, but the world’s most elaborated practical joke.<br>As my use of PHP continued, some patterns started to emerge.  </p><ol><li>Database Calls. Their structure is almost always the same. They may differ if the call has something to show or not; but the need to create:<ul><li>a form to interact with the database,</li><li>a action page to host the PHP code, proper,</li><li>a page where this items would be injected through “request” tags,</li><li>and finally, one CSS file to rule them all.  </li></ul></li></ol><p>So, at the moment, the template structure is this:<br><br><br><br></p><p>| Project Folder|</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      +————–| CSS |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; index.css<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|     +——————-| ACTIONS |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|     |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; search_action.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; add_action.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; delete_action.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; see-all.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      +——————| PAGES |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; search_page.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; add_page.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; delete_page.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; see-all.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|     +——————-| FORMS |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|     |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; search_form<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; add_form<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; delete_form<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                        +– &gt; see-all_form<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      +——————| PAGES |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|      |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         +– &gt; search.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         +– &gt; add.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         +– &gt; delete.php<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         |<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|                         +—&gt; see-all.php</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;While doing the web apps projects, I realized that I, fortuitously, had come upon a template for web setups.&lt;br&gt;In the very beginning of </summary>
      
    
    
    
    
    <category term="php, web, python" scheme="http://constantconstipation.club/tags/php-web-python/"/>
    
  </entry>
  
  <entry>
    <title>quick_and_easy-part-2</title>
    <link href="http://constantconstipation.club/2021/07/17/quick-and-easy-part-2/"/>
    <id>http://constantconstipation.club/2021/07/17/quick-and-easy-part-2/</id>
    <published>2021-07-17T11:38:28.000Z</published>
    <updated>2021-08-21T05:29:36.806Z</updated>
    
    <content type="html"><![CDATA[<p>After the last post, the notes web-app has developed considerably and I would like to document the changes I needed to do.<br>Due to the large number of notes, everything in this project has to be automated, to be, in the least, time-efficient.<br>That has presented me with a lot of opportunities to deepen my Python knowledge, in order to achieve said automation. At times it has been so vexing and frustrating, that I looked for solutions in shell scripting. Something I know very little about, but where I was fairly certain the solutions to my problems were already found.<br>In the end it was more instructional than a great furtherance of my objectives. Most of the found solutions were found with Python, with one or two exceptions, I think.<br>That said, I would like very much to know more about shell scripting because, although the syntax is eye-watering, there is a lot of work already done there. The solutions are present and real. You just have to enjoy the fruits of past work.<br>Another problem was the inevitable need to interact with code structures like <a href="https://sass-lang.com/">SASS</a> and <a href="https://pugjs.org/api/getting-started.html">Pug</a>. Which, even if very enticing, especially Pug, implied that I had to learn a new framework.<br>I’m using a lot of pre-built, free-to-use, CSS snippets, made accessible by kind hearted designers, and if that gives me access to better ideas and execution, it makes me also contact with more sophisticated tools.<br>In the end, I minimized complexity to the maximum. From SASS I used it exclusively to convert SCSS files, as they were made available, to traditional CSS, which, for now, is what browsers accept.<br>I used Pug also to convert a file written in its markup style. But Pug presented a very interesting concept in HTML writing rationalization and simplification. I hope to get back to this, with more time and in more depth.<br>For all the work that it created, the Notes Manager app is surprisingly, still, bare-boned. At this moment I’m still ironing out the kinks in site search, and haven’t introduced any other functionality.<br>This is also because search made me deviate from what I wanted to do in the beginning, <em>vis a vis</em> databases. I didn’t understood that there was absolutely no reason to presume a simpler, lighter data structure for the web version. This made me look into content tags, search and db structure. And hence the slowness.<br>Add to this the fact that you have to standardize and make alterations in around 140 pages, and the time investment doesn’t seem that huge.<br>Coming, finally, to the files I created for this project; let’s start with ‘auto.py’, that intends to automate content page creation.<br>If you remember, I had exported all note entries in the database to individual text files, to later turn into php or html.<br>This, I noticed suitably later, was a mistake.<br>I could just as well converted them to php files immediately, which is what I’m using right now, and I would have saved a lot of cumbersome steps.<br>I’m using PHP because of its ability to be injected into files, really helps when creating large volume content files. I have seen myself veer away from HTML and head, more and more, to PHP country.<br>Some of these design decisions have to do with project structure I created for database oriented, web apps. I intend to do a small post just in that very same subject. Not to get very deeply into this here, I wanted to separate the html part that is viewable to the user, and a php file that would address backend needs.<br>I created the pages that would receive php code through a ‘require’ tag. In the end I would have the specific individual note content in a folder, and in another, the display html pages where they will be seen.<br>This is how it was structured:</p><hr><h2><span id="1-autopy">1 - auto.py</span></h2><ol><li>Imported <a href="https://docs.python.org/3/library/shutil.html">shutil</a>, to copy files around.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br></pre></td></tr></table></figure></li><li>created a function and determined what and where would be the template file.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto</span>():</span></span><br><span class="line">    source = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/index.php&#x27;</span></span><br></pre></td></tr></table></figure></li><li>In the beginning, boneheadedly, I thought I would make do only with integer id’s and URLs to identify the content. To do that, I completed a list of all the note id’s I had uploaded to the site. And that was my base.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;number_list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>I stripped them of newline symbols and organized them in their own rows, and closed the connection to the file.    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = [(line.strip()).split() <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li>These id numbers were being outputted by MySQL like this: “‘[6]’”. It was necessary to strip everything that wasn’t the string character from the output.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        numero = <span class="built_in">str</span>(number)</span><br><span class="line">        numero = numero[<span class="number">2</span>:-<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li>Defined the URL of the display files to be created.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">destination = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + numero + <span class="string">&#x27;-page.php&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Copied the file.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.copyfile(source, destination)</span><br></pre></td></tr></table></figure></li><li>Opened the display pages to read,  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.readlines()</span><br></pre></td></tr></table></figure></li><li>On line 19 of the file, I inserted a php tag with the note content and its title.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">19</span>] = <span class="string">&quot;&lt;?php require &#x27;http://localhost/notes/pages/text1/&quot;</span> + numero + <span class="string">&quot;.php&#x27;; ?&gt;&quot;</span></span><br></pre></td></tr></table></figure></li><li>and wrote to it.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(data)</span><br></pre></td></tr></table></figure></li></ol><p>Full code document:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auto</span>():</span></span><br><span class="line">    source = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/index.php&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;number_list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    numbers = [(line.strip()).split() <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">        numero = <span class="built_in">str</span>(number)</span><br><span class="line">        numero = numero[<span class="number">2</span>:-<span class="number">2</span>]</span><br><span class="line">        destination = <span class="string">&#x27;/srv/http/notes/pages/styled_notes/&#x27;</span> + numero + <span class="string">&#x27;-page.php&#x27;</span></span><br><span class="line">        shutil.copyfile(source, destination)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.readlines()</span><br><span class="line">        data[<span class="number">19</span>] = <span class="string">&quot;&lt;?php require &#x27;http://localhost/notes/pages/text1/&quot;</span> + numero + <span class="string">&quot;.php&#x27;; ?&gt;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(destination, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.writelines(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    auto()</span><br></pre></td></tr></table></figure><hr><h2><span id="2-htmlpy">2 - html.py</span></h2><p>This is a file that has precedence in the process in relation to the last file.<br>It’s a script to convert text to html. As I said, a step I didn’t need to take.<br>When I said that had looked, and found, shell solutions to my problems, but kept most of the code as Python; this is what I’m talking about: Subprocess.  </p><ol><li>Import os and subprocess:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br></pre></td></tr></table></figure></li><li>Created a python function and used txt2html to convert the files:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">filepath</span>):</span></span><br><span class="line">    cmd = <span class="string">&#x27;txt2html --infile &#x27;</span> + filepath + <span class="string">&#x27; --outfile &#x27;</span> + filepath + <span class="string">&#x27;.html&#x27;</span></span><br></pre></td></tr></table></figure></li><li>called the function through subprocess, as txt2html its not a Python app.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li>Defined where the text files were, and iterated through them, creating html files.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/clean&#x27;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">    filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br><span class="line">    convert(filepath)</span><br></pre></td></tr></table></figure></li></ol><p>Whole code document:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Script to convert text files in html. &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">filepath</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; First it is defined how to replace the characters and after how to access the files &quot;&quot;&quot;</span></span><br><span class="line">    cmd = <span class="string">&#x27;txt2html --infile &#x27;</span> + filepath + <span class="string">&#x27; --outfile &#x27;</span> + filepath + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/clean&#x27;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">    filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br><span class="line">    convert(filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    convert(filepath)</span><br></pre></td></tr></table></figure><hr><h2><span id="3-db_uploadpy">3 - db_upload.py</span></h2><p>For some reason I can not remember at this moment, it wasn’t easy to translate the cli notes to web form. I had to go back and forth between the db and the site to get all the data.<br>This is, summarily, all the work that was done in the next files presented here.<br>In this file we uploaded the tags content to the site, in bunches of three tags per note and their respective ids.  </p><ol><li>Imported mysql to connect to the database and itertools for grouping the entries.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br></pre></td></tr></table></figure></li><li>As per last time, I opened a file with the entries and cleaned them a bit:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tagsaa.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.read().splitlines()</span><br></pre></td></tr></table></figure></li><li>Turn them into a python list:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string_list = [<span class="string">&#x27;8,backblaze,duplicity,backup&#x27;</span>, <span class="string">&#x27;10,flake8,error,ignore&#x27;</span>, <span class="string">&#x27;12,cc,card,credit&#x27;</span>, <span class="string">&#x27;14,backblaze,keys,backups&#x27;</span>, <span class="string">&#x27;15,umount,mount,unmounting&#x27;</span>, <span class="string">&#x27;16,numpy,array,append&#x27;</span>, <span class="string">&#x27;26,openssl,ssl,mail&#x27;</span>, <span class="string">&#x27;28,bind,keys,bindkeys&#x27;</span>, <span class="string">&#x27;30,editor,command line,editing&#x27;</span>, <span class="string">&#x27;32,markdown,line break,notabug&#x27;</span>, <span class="string">&#x27;34,python,delete,file&#x27;</span>, <span class="string">&#x27;38,table,tables,sqlite&#x27;</span>, <span class="string">&#x27;41,dictionary,python,key&#x27;</span>, <span class="string">&#x27;49,rowid,id,sqlite&#x27;</span>, <span class="string">&#x27;51,fulltext,sqlite utils,full text&#x27;</span>, <span class="string">&#x27;55,sqlite-utils,triggers,trigger&#x27;</span>, <span class="string">&#x27;63,strings,string,python&#x27;</span>, <span class="string">&#x27;66,string,skip,strings&#x27;</span>, <span class="string">&#x27;67,dictionary,item,dictionaries&#x27;</span>, <span class="string">&#x27;68,list,skip,remove&#x27;</span>, <span class="string">&#x27;74,cmus,player,music&#x27;</span>, <span class="string">&#x27;78,goaccess,logs,analytics&#x27;</span>, <span class="string">&#x27;86,mysql,columns,generated&#x27;</span>, <span class="string">&#x27;88,mysql,last row,rows&#x27;</span>, <span class="string">&#x27;91,mysql,backup,dump&#x27;</span>, <span class="string">&#x27;92,epub,web,self-hosted&#x27;</span>, <span class="string">&#x27;95,xdg-open,default,xdg&#x27;</span>, <span class="string">&#x27;99,ufw,port,range&#x27;</span>, <span class="string">&#x27;102,zsh-autosuggestions,zsh,oh-my-zsh&#x27;</span>, <span class="string">&#x27;103,sudo,password,script&#x27;</span>, <span class="string">&#x27;108,pip,pip3,python&#x27;</span>, <span class="string">&#x27;110,white house,market,white&#x27;</span>, <span class="string">&#x27;116,vim,clipboard,ssh&#x27;</span>, <span class="string">&#x27;125,user.,group,ps&#x27;</span>, <span class="string">&#x27;129,arch,source,aur&#x27;</span>, <span class="string">&#x27;130,indentation,python,unindent&#x27;</span>, <span class="string">&#x27;133,vim,commentar,comment&#x27;</span>, <span class="string">&#x27;134,php code sniffer,php,linter&#x27;</span>, <span class="string">&#x27;136,css,name,selector&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li>Cleaned again the content,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newlist = [i <span class="keyword">for</span> item <span class="keyword">in</span> string_list <span class="keyword">for</span> i <span class="keyword">in</span> item.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br></pre></td></tr></table></figure></li><li>Used the grouper function to chunk the entries together.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span>(<span class="params">iterable_obj, count, fillvalue=<span class="literal">None</span></span>):</span></span><br><span class="line">    args = [<span class="built_in">iter</span>(iterable_obj)] * count</span><br><span class="line">    <span class="keyword">return</span> zip_longest(*args, fillvalue=fillvalue)</span><br><span class="line">iterable = newlist</span><br></pre></td></tr></table></figure></li><li>Created a function to insert the grouper content into the site.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> grouper(iterable, <span class="number">4</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">            query = <span class="string">&#x27;UPDATE notes_web SET k1 = &quot;&#x27;</span> + x[<span class="number">1</span>] + <span class="string">&#x27;&quot;, k2 = &quot;&#x27;</span> + x[<span class="number">2</span>] + <span class="string">&#x27;&quot;, k3 = &quot;&#x27;</span> + x[<span class="number">3</span>] + <span class="string">&#x27;&quot; WHERE id = &quot;&#x27;</span> + x[<span class="number">0</span>] + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br></pre></td></tr></table></figure></li></ol><p>The whole content:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tagsaa.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.read().splitlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string_list = [<span class="string">&#x27;8,backblaze,duplicity,backup&#x27;</span>, <span class="string">&#x27;10,flake8,error,ignore&#x27;</span>, <span class="string">&#x27;12,cc,card,credit&#x27;</span>, <span class="string">&#x27;14,backblaze,keys,backups&#x27;</span>, <span class="string">&#x27;15,umount,mount,unmounting&#x27;</span>, <span class="string">&#x27;16,numpy,array,append&#x27;</span>, <span class="string">&#x27;26,openssl,ssl,mail&#x27;</span>, <span class="string">&#x27;28,bind,keys,bindkeys&#x27;</span>, <span class="string">&#x27;30,editor,command line,editing&#x27;</span>, <span class="string">&#x27;32,markdown,line break,notabug&#x27;</span>, <span class="string">&#x27;34,python,delete,file&#x27;</span>, <span class="string">&#x27;38,table,tables,sqlite&#x27;</span>, <span class="string">&#x27;41,dictionary,python,key&#x27;</span>, <span class="string">&#x27;49,rowid,id,sqlite&#x27;</span>, <span class="string">&#x27;51,fulltext,sqlite utils,full text&#x27;</span>, <span class="string">&#x27;55,sqlite-utils,triggers,trigger&#x27;</span>, <span class="string">&#x27;63,strings,string,python&#x27;</span>, <span class="string">&#x27;66,string,skip,strings&#x27;</span>, <span class="string">&#x27;67,dictionary,item,dictionaries&#x27;</span>, <span class="string">&#x27;68,list,skip,remove&#x27;</span>, <span class="string">&#x27;74,cmus,player,music&#x27;</span>, <span class="string">&#x27;78,goaccess,logs,analytics&#x27;</span>, <span class="string">&#x27;86,mysql,columns,generated&#x27;</span>, <span class="string">&#x27;88,mysql,last row,rows&#x27;</span>, <span class="string">&#x27;91,mysql,backup,dump&#x27;</span>, <span class="string">&#x27;92,epub,web,self-hosted&#x27;</span>, <span class="string">&#x27;95,xdg-open,default,xdg&#x27;</span>, <span class="string">&#x27;99,ufw,port,range&#x27;</span>, <span class="string">&#x27;102,zsh-autosuggestions,zsh,oh-my-zsh&#x27;</span>, <span class="string">&#x27;103,sudo,password,script&#x27;</span>, <span class="string">&#x27;108,pip,pip3,python&#x27;</span>, <span class="string">&#x27;110,white house,market,white&#x27;</span>, <span class="string">&#x27;116,vim,clipboard,ssh&#x27;</span>, <span class="string">&#x27;125,user.,group,ps&#x27;</span>, <span class="string">&#x27;129,arch,source,aur&#x27;</span>, <span class="string">&#x27;130,indentation,python,unindent&#x27;</span>, <span class="string">&#x27;133,vim,commentar,comment&#x27;</span>, <span class="string">&#x27;134,php code sniffer,php,linter&#x27;</span>, <span class="string">&#x27;136,css,name,selector&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line">newlist = [i <span class="keyword">for</span> item <span class="keyword">in</span> string_list <span class="keyword">for</span> i <span class="keyword">in</span> item.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span>(newlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://tinyurl.com/yk472wo3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span>(<span class="params">iterable_obj, count, fillvalue=<span class="literal">None</span></span>):</span></span><br><span class="line">    args = [<span class="built_in">iter</span>(iterable_obj)] * count</span><br><span class="line">    <span class="keyword">return</span> zip_longest(*args, fillvalue=fillvalue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iterable = newlist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> grouper(iterable, <span class="number">4</span>, <span class="string">&#x27;&#x27;</span>):</span><br><span class="line">            query = <span class="string">&#x27;UPDATE notes_web SET k1 = &quot;&#x27;</span> + x[<span class="number">1</span>] + <span class="string">&#x27;&quot;, k2 = &quot;&#x27;</span> + x[<span class="number">2</span>] + <span class="string">&#x27;&quot;, k3 = &quot;&#x27;</span> + x[<span class="number">3</span>] + <span class="string">&#x27;&quot; WHERE id = &quot;&#x27;</span> + x[<span class="number">0</span>] + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="built_in">print</span>(query)</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    insert()</span><br></pre></td></tr></table></figure><hr><h2><span id="4-titlespy">4 - titles.py</span></h2><p>At some moment in the process, I, finally, understood that the notes titles were a necessity, and I had to import them to this project. This is what I did in this module.  </p><ol><li>Import MySQL connection to Python.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br></pre></td></tr></table></figure></li><li>To compartmentalize and avoid heartbreak, I decided that the cli version and the web version would have their own separate databases, and that was one of my best design decisions to date. I took the entries in the ‘title’ column of the cli app, put them in a list and closed this connection.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">        host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">        password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    tit_list = []</span><br><span class="line">    title_list = <span class="string">&quot;&quot;&quot; SELECT ntid, title from notes &quot;&quot;&quot;</span></span><br><span class="line">    cur.execute(title_list)</span><br><span class="line">    records = cur.fetchall()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">        tit_list.append(row)</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br></pre></td></tr></table></figure></li><li>After that, I started another MySQL connection, now to my web database, to update it with the new/old content.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">        host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">        password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="built_in">print</span>(tit_list)</span><br><span class="line">    <span class="keyword">for</span> tit <span class="keyword">in</span> tit_list:</span><br><span class="line">        answer = [<span class="built_in">str</span>(tit[<span class="number">1</span>]), <span class="built_in">int</span>(tit[<span class="number">0</span>])]</span><br><span class="line">        <span class="built_in">print</span>(answer)</span><br><span class="line">        query = <span class="string">&quot;&quot;&quot; UPDATE notes_web SET title = %s WHERE id = %s&quot;&quot;&quot;</span></span><br><span class="line">        cur.execute(query, answer)</span><br><span class="line">        <span class="built_in">print</span>(query)</span><br><span class="line">        conn.commit()</span><br></pre></td></tr></table></figure></li></ol><p>Complete file:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">titles</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        tit_list = []</span><br><span class="line">        title_list = <span class="string">&quot;&quot;&quot; SELECT ntid, title from notes &quot;&quot;&quot;</span></span><br><span class="line">        cur.execute(title_list)</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            tit_list.append(row)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="built_in">print</span>(tit_list)</span><br><span class="line">        <span class="keyword">for</span> tit <span class="keyword">in</span> tit_list:</span><br><span class="line">            answer = [<span class="built_in">str</span>(tit[<span class="number">1</span>]), <span class="built_in">int</span>(tit[<span class="number">0</span>])]</span><br><span class="line">            <span class="built_in">print</span>(answer)</span><br><span class="line">            query = <span class="string">&quot;&quot;&quot; UPDATE notes_web SET title = %s WHERE id = %s&quot;&quot;&quot;</span></span><br><span class="line">            cur.execute(query, answer)</span><br><span class="line">            <span class="built_in">print</span>(query)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    titles()</span><br></pre></td></tr></table></figure><hr><h2><span id="5-urlspy">5 - urls.py</span></h2><p>This files creates and uploads to the database the notes URLs in the site.  </p><ol><li>I take the display pages already created, extract the URLs and the id’s from their links into two parallel lists, that I posteriorly join into a dictionary, through zip.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;/srv/http/notes/pages/styled_notes&#x27;</span></span><br><span class="line">files = os.listdir(path)</span><br><span class="line">linques = []</span><br><span class="line">ids = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">    linques.append(<span class="string">&#x27;http://localhost/notes/pages/styled_notes/&#x27;</span> + file)</span><br><span class="line">    ids.append(file[:-<span class="number">9</span>])</span><br><span class="line">    keys_list = ids</span><br><span class="line">values_list = linques</span><br><span class="line">zip_iterator = <span class="built_in">zip</span>(keys_list, values_list)</span><br><span class="line">pages = <span class="built_in">dict</span>(zip_iterator)</span><br></pre></td></tr></table></figure></li><li>Then I add them to the database.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> pages.items():</span><br><span class="line">        answers = [<span class="built_in">int</span>(key), value]</span><br><span class="line">        query = <span class="string">&quot;INSERT IGNORE INTO notes_web (id, url) VALUES(%s, %s)&quot;</span></span><br><span class="line">        cur.execute(query, answers)</span><br><span class="line">        conn.commit()</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span>(conn):</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li></ol><p>As always, complete file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urls</span>():</span></span><br><span class="line">    path = <span class="string">&#x27;/srv/http/notes/pages/styled_notes&#x27;</span></span><br><span class="line">    files = os.listdir(path)</span><br><span class="line">    linques = []</span><br><span class="line">    ids = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        linques.append(<span class="string">&#x27;http://localhost/notes/pages/styled_notes/&#x27;</span> + file)</span><br><span class="line">        ids.append(file[:-<span class="number">9</span>])</span><br><span class="line">        keys_list = ids</span><br><span class="line">    values_list = linques</span><br><span class="line">    zip_iterator = <span class="built_in">zip</span>(keys_list, values_list)</span><br><span class="line">    pages = <span class="built_in">dict</span>(zip_iterator)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> pages.items():</span><br><span class="line">            answers = [<span class="built_in">int</span>(key), value]</span><br><span class="line">            query = <span class="string">&quot;INSERT IGNORE INTO notes_web (id, url) VALUES(%s, %s)&quot;</span></span><br><span class="line">            cur.execute(query, answers)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    urls()</span><br></pre></td></tr></table></figure><hr><h2><span id="6-update_tagspy">6 - update_tags.py</span></h2><p>This was a difficult one to get right. For some reason, I wasn’t being able to update the notes tags into the already existent rows. MySQL would start new entries with new content. Which is, dare I say it? ‘No bueno.’<br>But I finally got it right, and this is what I did.  </p><ol><li>Here we open the old cli app database and go looking for the tag information linked to the notes already present in the web app.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(</span><br><span class="line">        host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">        password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">        database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;update_tags.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        query = <span class="string">&quot;SELECT ntid, k1, k2, k3 FROM notes.notes WHERE ntid = &quot;</span> + line</span><br><span class="line">        cur.execute(query)</span><br><span class="line">        records = cur.fetchall()</span><br></pre></td></tr></table></figure></li><li>Then we write the content to a file.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&#x27;tags_list.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            f.write(row[<span class="number">1</span>]),</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f.write(row[<span class="number">2</span>]),</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f.write(row[<span class="number">3</span>]),</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            f.write(<span class="built_in">str</span>(row[<span class="number">0</span>]))</span><br><span class="line">            f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span>(conn):</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li><li>Then I connect to the web app database, open the aforementioned file, turn it into a python list, clean it and group it in parties of four items. One id and three content tags.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tags_list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content_list = f.readlines()</span><br><span class="line">    clean_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content_list:</span><br><span class="line">        clean_list.append(i.strip())</span><br><span class="line">    n = <span class="number">4</span></span><br><span class="line">    final = [clean_list[i * n:(i + <span class="number">1</span>) * n] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(clean_list) + n - <span class="number">1</span>) // n)]</span><br><span class="line">    <span class="built_in">print</span>(final)</span><br></pre></td></tr></table></figure></li><li>Finally we pass the items as variables in a SQL query to the web app database, and everything is OK.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> final:</span><br><span class="line">        query1 = <span class="string">&quot;UPDATE notes_web SET k1 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">0</span>] + <span class="string">&quot;&#x27;, k2 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">1</span>] + <span class="string">&quot;&#x27;, k3 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">2</span>] + <span class="string">&quot;&#x27; WHERE id = &quot;</span> + <span class="built_in">list</span>[<span class="number">3</span>]</span><br><span class="line">        <span class="built_in">print</span>(query1)</span><br><span class="line">        cur.execute(query1)</span><br><span class="line">        conn.commit()</span><br><span class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span>(conn):</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure></li></ol><p>Full Text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_tags</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">            host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">            password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">&#x27;update_tags.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        lines = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            query = <span class="string">&quot;SELECT ntid, k1, k2, k3 FROM notes.notes WHERE ntid = &quot;</span> + line</span><br><span class="line">            cur.execute(query)</span><br><span class="line">            records = cur.fetchall()</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&#x27;tags_list.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                f.write(row[<span class="number">1</span>]),</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(row[<span class="number">2</span>]),</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(row[<span class="number">3</span>]),</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="built_in">str</span>(row[<span class="number">0</span>]))</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(host=<span class="string">&quot;localhost&quot;</span>, user=<span class="string">&quot;mic&quot;</span>, password=<span class="string">&quot;xxxx&quot;</span>, database=<span class="string">&quot;notes_web&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;tags_list.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            content_list = f.readlines()</span><br><span class="line">        clean_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> content_list:</span><br><span class="line">            clean_list.append(i.strip())</span><br><span class="line">        n = <span class="number">4</span></span><br><span class="line">        final = [clean_list[i * n:(i + <span class="number">1</span>) * n] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(clean_list) + n - <span class="number">1</span>) // n)]</span><br><span class="line">        <span class="comment"># print(final)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> final:</span><br><span class="line">            query1 = <span class="string">&quot;UPDATE notes_web SET k1 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">0</span>] + <span class="string">&quot;&#x27;, k2 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">1</span>] + <span class="string">&quot;&#x27;, k3 = &#x27;&quot;</span> + <span class="built_in">list</span>[<span class="number">2</span>] + <span class="string">&quot;&#x27; WHERE id = &quot;</span> + <span class="built_in">list</span>[<span class="number">3</span>]</span><br><span class="line">            <span class="built_in">print</span>(query1)</span><br><span class="line">            cur.execute(query1)</span><br><span class="line">            conn.commit()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    update_tags()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;After the last post, the notes web-app has developed considerably and I would like to document the changes I needed to do.&lt;br&gt;Due to the </summary>
      
    
    
    
    
    <category term="python, web, mysql" scheme="http://constantconstipation.club/tags/python-web-mysql/"/>
    
  </entry>
  
  <entry>
    <title>quick_and_easy</title>
    <link href="http://constantconstipation.club/2021/07/14/quick-and-easy/"/>
    <id>http://constantconstipation.club/2021/07/14/quick-and-easy/</id>
    <published>2021-07-14T20:22:00.000Z</published>
    <updated>2021-08-21T05:50:57.139Z</updated>
    
    <content type="html"><![CDATA[<p>I just had a disconcertingly pleasurable experience with python.<br>I was expecting toils and tribulations, but everything worked beautifully at the first try, and now I’m charged with a warrior mindset that<br>has no outlet for its intensity.<br>So I think I’ll just write a post about it.<br>I am now, for no weighty reason, trying to create web presences of my cli apps. It’s a way for me to learn a bit more of PHP, CSS, HTML and, eventually, and probably kicking and screaming; JavaScript.<br>I’m trying to replicate their functionalities in a web environment. Up until now it has been fun. PHP is a delight to learn, and web design is extremely tactile.<br>You have almost immediately a, if not physical, visible result to your efforts.<br>Until now I’ve been avoiding frameworks and such like, with the objective of having to use the core building blocks of web design. What is lost in sophistication,<br>is returned by creating a sound knowledge base. Or so we hope.<br>One of the apps that I use more frequently is my notes app.<br>It writes the note in a temporary vim file and stores it in a MySQL database. So all my notes are in txt files, written with syntax appropriated to that environment.<br>For example; here’s a note that looks very much like all the others:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">To open a port for a application in linux,</span><br><span class="line">do the following:</span><br><span class="line">-----------------------------------------------</span><br><span class="line">iptables -A INPUT -p tcp --dport 4000 -j ACCEPT</span><br><span class="line">sudo systemctl restart iptables</span><br><span class="line">------------------------------------------------</span><br><span class="line">To test it, do this:</span><br><span class="line">------------------------------------------------</span><br><span class="line">ls | nc -l -p 4000</span><br><span class="line">------------------------------------------------</span><br><span class="line">and now in another terminal:</span><br><span class="line">------------------------------------------------</span><br><span class="line">telnet localhost &lt;port number&gt;</span><br><span class="line">------------------------------------------------</span><br><span class="line"> https://tinyurl.com/yjjk4n8v</span><br></pre></td></tr></table></figure><p>As you can see, I use dashes to separate code from comments and generally make it look less boring. I never gave it much thought as it seemed to me to be a perfectly reasonable way to write notes. And since they are to be used by only by  me, this didn’t bothered me at all. Or, at least, until I tried to convert the notes to HTML.<br>The lines occupied all of the screen, stretched for several lines and generally destroyed the layout.<br>So I needed to remove the dashes from around 130 database entries and create clean, legible HTML versions, to use in a putative notes site.<br>When I was rummaging through MySQL documentation, explaining to me how to store the result of a SQL query into a file, (a process that seemed complicated and really not what I needed), I remembered that every time I used the cli app in “see_all” mode, I was in fact downloading all the database. All that was needed was to go from the database to files.<br>In the end, I ended doing this:  </p><ol><li>I connected to the database and selected everything:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notes</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&#x27;SELECT * FROM notes&#x27;</span></span><br><span class="line">        cur.execute(query,)</span><br><span class="line">        records = cur.fetchall()</span><br></pre></td></tr></table></figure></li><li>created a value in the array:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br></pre></td></tr></table></figure></li><li>created a string with the ID field of the database concatenated with ‘.txt’. In the end you end up with files like ‘299.txt’.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&#x27;.txt&#x27;</span></span><br></pre></td></tr></table></figure></li><li>opened a file to write this string as a title,<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>and wrote in it the notes field, that is the sixth field in the database.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.write(<span class="built_in">str</span>(row[<span class="number">5</span>]))</span><br></pre></td></tr></table></figure>I was expecting that what I was doing was programming wishful thinking. That the opened db would never interact with files, or some other typical impediment I face when trying to do things I haven’t really studied or understood deeply.<br>But this time it was immediate. When I saw all the files that it created, I couldn’t believe that had been so easy.<br>Thank God for little blessings.<br>Then I had to run the script through a hundred and change files, to clean them. But this seemed, and was, much easier.<br>This is what I did:  </li><li>First I created the function that would do the replacement:<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace</span>(<span class="params">filepath</span>):</span></span><br></pre></td></tr></table></figure></li><li>Then I defined that the file to be cleaned would be called filepath, as it will be needed later on to find the files.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = <span class="built_in">open</span>(filepath, <span class="string">&#x27;rt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>Decided that the output files would have still the id’s of the database, appending it a ‘_clean’ suffix.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_file = filepath + <span class="string">&#x27;_clean&#x27;</span></span><br><span class="line">output = <span class="built_in">open</span>(new_file, <span class="string">&#x27;wt&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>Here I replace the dashes by spaces and close the files.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">    output.write(line.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">input</span>.close()</span><br><span class="line">output.close()</span><br></pre></td></tr></table></figure></li><li>This is the directory where all the files to be cleaned are located:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/before&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Here starts the loop that states that, for every file found in said directory:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br></pre></td></tr></table></figure></li><li>create a URL joining the path of the directory plus the name of the file:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br></pre></td></tr></table></figure></li><li>and finally use the function defined above on this new path object:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace(filepath)</span><br></pre></td></tr></table></figure></li></ol><p>And that is it. I hope this may be of some use to anyone. For me it was a pleasant surprise.<br>I’ll leave you with the whole code of the files:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; This module will download all note entries in notes db and put them in files &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> mysql.connector <span class="keyword">import</span> connect, Error</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notes</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = connect(</span><br><span class="line">                host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">                user=<span class="string">&quot;mic&quot;</span>,</span><br><span class="line">                password=<span class="string">&quot;xxxx&quot;</span>,</span><br><span class="line">                database=<span class="string">&quot;notes&quot;</span>)</span><br><span class="line">        cur = conn.cursor()</span><br><span class="line">        query = <span class="string">&#x27;SELECT * FROM notes&#x27;</span></span><br><span class="line">        cur.execute(query,)</span><br><span class="line">        records = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> records:</span><br><span class="line">            file = <span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">            f = <span class="built_in">open</span>(file, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            f.write(<span class="built_in">str</span>(row[<span class="number">5</span>]))</span><br><span class="line">            f.close()</span><br><span class="line">    <span class="keyword">except</span> Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Error while connecting to db&quot;</span>, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span>(conn):</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    notes()</span><br></pre></td></tr></table></figure><p>And the function that cleaned the files:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Script to erase dashes from db entries and replace them with spaces. &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace</span>(<span class="params">filepath</span>):</span></span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">open</span>(filepath, <span class="string">&#x27;rt&#x27;</span>)</span><br><span class="line">    new_file = filepath + <span class="string">&#x27;_clean&#x27;</span></span><br><span class="line">    output = <span class="built_in">open</span>(new_file, <span class="string">&#x27;wt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        output.write(line.replace(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27; &#x27;</span>))</span><br><span class="line">    <span class="built_in">input</span>.close()</span><br><span class="line">    output.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/before&#x27;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">    filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br><span class="line">    replace(filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    replace(filepath)</span><br></pre></td></tr></table></figure><hr><h2><span id="update">UPDATE</span></h2><p>For completeness sake, I returned to this post to add the file that converts text files to HTML. I used a very nifty app called <a href="http://txt2html.sourceforge.net/txt2html.html#files">txt2html</a> that did much of the work. As it is an app not a library, I had to use Python’s subprocess to run it. But, all in all, easy peasy.  </p><ol><li>Define the subprocess command. Here we call txt2html, defining as the original files the ones set by filepath, and define the output files with the same name plus an html suffix.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">&#x27;txt2html --infile &#x27;</span> + filepath + <span class="string">&#x27; --outfile &#x27;</span> + filepath + <span class="string">&#x27;.html&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Next we run the subprocess command with the ‘shell=True’ flag, that ensures that the behaviour is exactly the same as if running on shell. This is very frowned upon, but in my limited experience, things tend to work with this flag and not to, when it’s not used. So, until anyone explains me better why this is so evil, I’ll keep using it.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li>The rest of the process is similar to the other file, so there’s nothing to add here.  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/clean&#x27;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">    filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br><span class="line">    convert(filepath)</span><br></pre></td></tr></table></figure></li></ol><p>The full code:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; Script to convert text files in html. &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">filepath</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Convert txt files by running them through a loop that converts them to html &quot;&quot;&quot;</span></span><br><span class="line">    cmd = <span class="string">&#x27;txt2html --infile &#x27;</span> + filepath + <span class="string">&#x27; --outfile &#x27;</span> + filepath + <span class="string">&#x27;.html&#x27;</span></span><br><span class="line">    subprocess.run(cmd, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> = <span class="string">&#x27;/srv/http/notes/clean&#x27;</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">    filepath = os.path.join(<span class="built_in">dir</span>, filename)</span><br><span class="line">    convert(filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    convert(filepath)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I just had a disconcertingly pleasurable experience with python.&lt;br&gt;I was expecting toils and tribulations, but everything worked beautif</summary>
      
    
    
    
    
    <category term="python, automation" scheme="http://constantconstipation.club/tags/python-automation/"/>
    
  </entry>
  
  <entry>
    <title>connect-to-mysql-through-php</title>
    <link href="http://constantconstipation.club/2021/06/29/connect-to-mysql-through-php/"/>
    <id>http://constantconstipation.club/2021/06/29/connect-to-mysql-through-php/</id>
    <published>2021-06-29T11:04:46.000Z</published>
    <updated>2021-08-21T06:05:42.726Z</updated>
    
    <content type="html"><![CDATA[<p>It’s been a while since I wrote on this blog.<br>As per usual, I got distracted doing absolutely nothing and forgot, for months, about this page.<br>In the meantime I remade its UI using the <a href="https://hexo.io/">Hexo</a> platform; I got bored of<br>all the frontend work that entails maintaining a site built from scratch. It is a type of work that I don’t respond well too. It’s<br>minute, detail-oriented, patient, and rewards persistence. All things that are alien to me.<br>All in all, I’m happy with the result. The layout I chose answers my aesthetic needs better than I ever could. This was one case of leaving it to the pros.<br>But this isn’t the subject that has brought me here. I wanted to talk about connecting to a database in a web setting.<br>I just installed <a href="https://nginx.org/en/">Nginx</a>, and was looking for some cool projects that I could do.<br>I remembered that I could replicate my cli apps in a web setting. So I decided to create a page where you insert a search word and the app comes back with<br>all the bookmarks that were detected for that word.<br>When I started to do research on this, and by “research”, I mean, trying different things to see if they work, I was amazed at the number of web tutorials that gave examples that wont compile. I don’t know if its because it’s old code, my inability to understand it, or for sheer ineptitude of the tutorials authors,, but the fact remains that there’s a lot of iffy information out there.<br>Because of this, and to speed up a possible come back at this issue on a later date, I want to document the example that, in fact, compiled.<br>And here it is.<br>As the page that calls the php is just html about forms, I’m going to skip it and talk only about the php script.  </p><ol><li>First we keep in a variable, the query value that was sent from the question page, Where ‘pwd’<br>is the ‘name’ value of the HTML tag of the ‘submit’ function.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$question</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br></pre></td></tr></table></figure></li><li>Define your login information in variables. Note the ‘$pdo’ variable, that uses <a href="https://www.php.net/manual/en/book.pdo.php">php-pdo</a><br>encompasses all values and that is what is going to be used later. I’ll just quote PHP’s own documentation to explain this: <blockquote><p>Connections are established by creating instances of the PDO base class. It doesn’t matter which<br>driver you want to use; you always use the PDO class name. The constructor accepts parameters<br>for specifying the database source (known as the DSN) and optionally for the username and<br>password (if any).  </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$where</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;pwd&quot;</span>;</span><br><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$where</span>;dbname=<span class="subst">$dbname</span>&quot;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br></pre></td></tr></table></figure></li><li>This I don’t have no idea what it does or what is doing here. I’ll leave it for magical thinking<br>reasons.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li>We create a variable that’ll deal with the preparation of sending the SQL query.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="string">&quot;SELECT site, username, comment, passwd FROM pwd WHERE MATCH(site, username, \</span></span><br><span class="line"><span class="string">comment) AGAINST (&#x27;<span class="subst">$question</span>&#x27; IN NATURAL LANGUAGE MODE)&quot;</span>);</span><br></pre></td></tr></table></figure></li><li>This executes the prepared statement.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$stmt</span>-&gt;execute();</span><br></pre></td></tr></table></figure></li><li>This returns an array with all the results.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="variable">$stmt</span>-&gt;fetchAll()</span><br></pre></td></tr></table></figure></li><li>Once again, I cede the stage to PHP’s documentation:<blockquote><p>The foreach construct provides an easy way to iterate over arrays. foreach works only on arrays and<br>objects, and will issue an error when you try to use it on a variable with a different data type<br>or an uninitialized variable.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) </span><br></pre></td></tr></table></figure></li><li>This final part is a bit of mash with html, as I had to insert tags to style the output. What is<br>relevant to know is that each line echo’s a entry of the mysql output.  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">title</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;   <span class="title">SITE</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">site</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;  <span class="title">USER</span> -  &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">username</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;    <span class="title">COMMENT</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">comment</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;   <span class="title">PASSWORD</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">passwd</span>&quot;]; ?&gt;&lt;/<span class="title">p</span>&gt;&lt;/<span class="title">div</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>And now the whole code:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">            <span class="variable">$question</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="variable">$where</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">            <span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="variable">$password</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">            <span class="variable">$dbname</span> = <span class="string">&quot;pwd&quot;</span>;</span><br><span class="line">            <span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$where</span>;dbname=<span class="subst">$dbname</span>&quot;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);    </span><br><span class="line"></span><br><span class="line">            <span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line">            <span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;prepare(<span class="string">&quot;SELECT site, username, comment, passwd FROM pwd WHERE MATCH(site, username, comment) AGAINST (&#x27;<span class="subst">$question</span>&#x27; IN NATURAL LANGUAGE MODE)&quot;</span>);</span><br><span class="line">            <span class="variable">$stmt</span>-&gt;execute();</span><br><span class="line">            <span class="variable">$users</span> = <span class="variable">$stmt</span>-&gt;fetchAll();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$users</span> <span class="keyword">as</span> <span class="variable">$user</span>) </span><br><span class="line">        &#123;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;p&gt;&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">title</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;   <span class="title">SITE</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">site</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;  <span class="title">USER</span> -  &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">username</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;    <span class="title">COMMENT</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">comment</span>&quot;]; ?&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">echo</span> &quot;   <span class="title">PASSWORD</span> - &quot;; <span class="title">echo</span> $<span class="title">user</span>[&quot;<span class="title">passwd</span>&quot;]; ?&gt;&lt;/<span class="title">p</span>&gt;&lt;/<span class="title">div</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> &#125; ?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;It’s been a while since I wrote on this blog.&lt;br&gt;As per usual, I got distracted doing absolutely nothing and forgot, for months, about th</summary>
      
    
    
    
    
    <category term="php, pdo, mysql" scheme="http://constantconstipation.club/tags/php-pdo-mysql/"/>
    
  </entry>
  
  <entry>
    <title>More tales about search</title>
    <link href="http://constantconstipation.club/2021/06/23/16_search2/"/>
    <id>http://constantconstipation.club/2021/06/23/16_search2/</id>
    <published>2021-06-23T07:44:00.000Z</published>
    <updated>2021-08-21T07:52:04.436Z</updated>
    
    <content type="html"><![CDATA[<p>There were developments regarding the blog’s search.<br>I wasn’t very happy with my first stab at implementing a search function.<br>If you recall, I used a database to collect metadata about the posts and then sourced it with PHP’s PDO.<br>The problem was that the example that I copied, presented the data in table. Something I didn’t like.<br>Add to that the fact that there was a considerable part of that code that I didn’t understand, and all that made me think I needed another solution.<br>I wanted to show the title of the posts, as a link, and a small description. Interestingly I found out that doing exactly what I wanted, is much simpler and had the added benefit of allowing me to grok a lot more about PDO’s functionalities.<br>I start by collecting the user’s search choice:  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$question</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;quest&#x27;</span>];</span><br></pre></td></tr></table></figure><p>defining the login information,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$where</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">  <span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">  <span class="variable">$password</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">  <span class="variable">$dbname</span> = <span class="string">&quot;dazed&quot;</span>;</span><br></pre></td></tr></table></figure><p>defining the login object,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$where</span>;dbname=<span class="subst">$dbname</span>&quot;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br></pre></td></tr></table></figure><p>defining the query,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT title, link, description FROM dazed WHERE \</span></span><br><span class="line"><span class="string">MATCH(title, author, description, tags, categories)\</span></span><br><span class="line"><span class="string">AGAINST (&#x27;<span class="subst">$question</span>&#x27; IN NATURAL LANGUAGE MODE)&quot;</span>;</span><br></pre></td></tr></table></figure><p>connecting,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span> = <span class="variable">$pdo</span>-&gt;query(<span class="variable">$sql</span>);</span><br></pre></td></tr></table></figure><p>this defines how the information is gotten. Fetching associatively downloads the query plus their column name, as keys,</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$q</span>-&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  defining what to output in case of error,<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>in other tags, we’ll define how the information will be outputted. This means that, row for row, we should get the data from the columns link and title<br>and print it as a link. The latter with ‘[]’ around the information.  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$q</span>-&gt;fetch()): <span class="meta">?&gt;</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&lt;?php echo (<span class="subst">$row</span>[&#x27;link&#x27;]); ?&gt;&quot;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;[&#x27;</span>; <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>]); <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;]&#x27;</span>; <span class="meta">?&gt;</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>finally get the description column value and close the ‘while’ loop.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h6&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="string">&#x27;description&#x27;</span>]); <span class="meta">?&gt;</span>&lt;/h6&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>And this is the complete code:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;search_list&lt;/title&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;preconnect&quot;</span> href=<span class="string">&quot;https://fonts.gstatic.com&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@400;700&amp;display=swap&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://corteousquestions.club/libraries/w3.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;search_list.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">grid</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class"> &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">content</span>-<span class="title">wrap</span>&quot;&gt;</span></span><br><span class="line"><span class="class"> &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col_center</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">$<span class="title">question</span> = $<span class="title">_GET</span>[&#x27;<span class="title">quest</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">try</span> </span>&#123;</span><br><span class="line">  <span class="variable">$where</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">  <span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">  <span class="variable">$password</span> = <span class="string">&quot;xxxx&quot;</span>;</span><br><span class="line">  <span class="variable">$dbname</span> = <span class="string">&quot;dazed&quot;</span>;</span><br><span class="line">  <span class="variable">$pdo</span> = <span class="keyword">new</span> PDO(<span class="string">&quot;mysql:host=<span class="subst">$where</span>;dbname=<span class="subst">$dbname</span>&quot;</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line">  <span class="variable">$sql</span> = <span class="string">&quot;SELECT title, link, description FROM dazed WHERE MATCH(title, author, description, tags, categories) AGAINST (&#x27;<span class="subst">$question</span>&#x27; IN NATURAL LANGUAGE MODE)&quot;</span>;</span><br><span class="line">  <span class="variable">$q</span> = <span class="variable">$pdo</span>-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">  <span class="variable">$q</span>-&gt;setFetchMode(PDO::FETCH_ASSOC);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;Error: &quot;</span> . <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$q</span>-&gt;fetch()): <span class="meta">?&gt;</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&lt;?php echo (<span class="subst">$row</span>[&#x27;link&#x27;]); ?&gt;&quot;</span>&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;[&#x27;</span>; <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="string">&#x27;title&#x27;</span>]); <span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;]&#x27;</span>; <span class="meta">?&gt;</span>&lt;/a&gt;</span><br><span class="line">&lt;h6&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> (<span class="variable">$row</span>[<span class="string">&#x27;description&#x27;</span>]); <span class="meta">?&gt;</span>&lt;/h6&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">endwhile</span>; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div w3-<span class="keyword">include</span>-html=<span class="string">&quot;https://corteousquestions.club/partials/footer_pages.html&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;w3.includeHTML();&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;There were developments regarding the blog’s search.&lt;br&gt;I wasn’t very happy with my first stab at implementing a search function.&lt;br&gt;If y</summary>
      
    
    
    
    
    <category term="search, python, blog" scheme="http://constantconstipation.club/tags/search-python-blog/"/>
    
  </entry>
  
  <entry>
    <title>Footer</title>
    <link href="http://constantconstipation.club/2021/06/23/15_footer/"/>
    <id>http://constantconstipation.club/2021/06/23/15_footer/</id>
    <published>2021-06-23T07:43:00.000Z</published>
    <updated>2021-08-21T07:45:05.236Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been struggling with a web problem that, seen by the amount of google entries with similar situations, is very common.<br>To wit, how to anchor a footer to the end of the page?<br>You  can’t define a fixed height, because the content will grow or shrink, which might leave the footer on the middle of the page or, worst, in the very beginning.<br>The last one happened to me, and I’m still trying to understand how did I accomplish such feat.<br>I thought that there would be a fairly standard answer to this query, since there’s a multitude of footers in a immensity of sites, all behaving as they should.<br>But it is not exactly the case. For one, there is a plurality of answers, each with a different method, and all, with varying degrees of sophistication.<br>In the beginning I tried the ones that were tied to CSS structures, such as <a href="https://www.w3schools.com/css/css3_flexbox.asp">Flexbox</a> or <a href="https://www.w3schools.com/css/css_grid.asp">Grid</a> but, as I wrote in the last post, these, I discovered, are a little harder to master than I anticipated. As we speak, I still haven’t been able to get one to work as it should.<br>Not just work, mind you, that at least, I was capable to achieve, but to work in the way that they’re supposed to.<br>I’m very, very new at this, so having to check on W3 for every little detail on how to do everything, and trying to implement a layout that presupposes from its user some degree of experience, has proven, thus far, more than I can handle.<br>But, worry not. I know that is only a matter of time and persistence until everything comes together. Just not now.<br>For these reasons, I was in the market for a simple solution. Something independent of fancy layouts, and that could be implemented by someone of my enormous level of ignorance.<br>I found <a href="https://www.freecodecamp.org/news/how-to-keep-your-footer-where-it-belongs-59c6aa05c59c/">this</a>, and it worked.<br>Below goes a explanation of my implementation for this blog.  </p><hr><h2><span id="the-html">The HTML</span></h2><p>As per the instructions, I created a div that would contain all the other items present in page.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-container&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>It’s minimum height is set at 100% of the visible screen, (which is called viewport; I know that now.), And it’s position is relative.<br>The position property, something I’m not sure I understand completely,</p><blockquote><p>sets how an element is positioned in a document.<br>Writes the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">Mozilla Developer Guide</a>, unhelpfully.<br>So I’m just going to explain it in my own words. Which if it has the clear possibility of being misleading or just flat out wrong; will give me the opportunity to think through this.<br>There are the following types of positioning:  </p></blockquote><ol><li>Static. The default. It stays where you put it and obeys the normal flow of the document. Put it in another way, it stays exactly where you put it.  </li><li>Relative. The element is positioned in relation with a former position it had. Simply put, if its position was x=80px and y=40px, and if is new position is, for instance, “top: 20px”, the element would moved down 20 px down to a position in x=80px/y=20px.  </li><li>Absolute. By default it is the top left corner, completely out of the flow. You then define ‘top’ and ‘left’ to locate it.  </li><li>Fixed. Same as the absolute position, but relative, always to the html element. Fixed elements are not affected by scrolling and are always on screen.<br>I think that the position has to be relative so other elements can use it as a reference, since static elements can not.  </li><li>Then I set another div <code>&lt;div class=&quot;content-wrap&quot;&gt;</code> called content wrap, that has a bottom padding value equal to the height of the footer.  </li><li>The footer is positioned as absolute, with the value ‘0’ in <code>bottom</code>, assuring that it stays in the end of the page. It’s position will be relative to the grid-container, and go up and down as there is less or more content.<br>This is my html:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>indice<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preconnect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.gstatic.com&quot;</span>&gt;</span>                                                                                                                <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Diplomata+SC&amp;family=Roboto+Condensed:ital@1&amp;display=swap&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid-container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-wrap&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/proj.html&quot;</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/triggers.html&quot;</span>&gt;</span>[2]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/storage.html&quot;</span>&gt;</span>[3]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/have_problem.html&quot;</span>&gt;</span>[4]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/problem2.html&quot;</span>&gt;</span>[5]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/epilogue.html&quot;</span>&gt;</span>[6]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/music.html&quot;</span>&gt;</span>[7]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/music2.html&quot;</span>&gt;</span>[8]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/rss.html&quot;</span>&gt;</span>[9]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/hugo.html&quot;</span>&gt;</span>[10]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/md.html&quot;</span>&gt;</span>[11]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/rss2.html&quot;</span>&gt;</span>[12]<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/auto.html&quot;</span>&gt;</span>[13]<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://corteousquestions.club/posts/14_blog_search.html&quot;</span>&gt;</span>[14]<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;http://minegit.club/root&#x27;</span>&gt;</span>gitea<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>   <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:mclds@protonmail.com&quot;</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>   <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/about_us.html&quot;</span>&gt;</span>about<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>   <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/gpg.txt&quot;</span>&gt;</span>gpg<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>   <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://corteousquestions.club/pages/comments.html&#x27;</span>&gt;</span>comments<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>   <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;pages/search.html&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2><span id="the-css">The CSS</span></h2><p>For my CSS file, I have the following values:</p><ol><li>For the grid-container, I gave it <code>margin: 0</code> and <code>padding: 0</code>, to guarantee that it occupies all of the viewbox. If this is not there, a lot of times we use a background that does not occupy the totality of the screen visible area.<br>The position is relative, because of the reasons previously exposed, and <code>min-height: 100vh</code> guarantees that it fills the height of the document. ‘Vh’ is a measurement that is 1% of the height of the viewport.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.grid-container &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">position: relative;</span><br><span class="line">min-height: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>‘Posts’ is the div where all the content will be housed. I aligned the text to the center so it is in the middle of the screen, and gave it a 300px top padding, so as to be vertically centered. More or less.  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.posts &#123;</span><br><span class="line">padding-top: 300px;</span><br><span class="line">font-size: 45px;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>The content-wrap was defined as 2.5rem. Rem being a measurement relative to the font size of the root element. In most browsers is a value around 16px.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.content-wrap &#123;</span><br><span class="line">padding-bottom: 2.5rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>The footer has a absolute position and bottom 0, as discussed. Added the centered text alignment to have it in the middle of the page.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.footer &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">bottom: 0;</span><br><span class="line">width: 100%;</span><br><span class="line">height: 2.5rem;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>And here are my link definitions for the site; that makes them half invisible, but that’s how I liked them.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/* unvisited link */</span><br><span class="line">a:link &#123; color: #dbe2f1; &#125;</span><br><span class="line"></span><br><span class="line">/* visited link */</span><br><span class="line">a:visited &#123; color: #dbe2f1; &#125;</span><br><span class="line"></span><br><span class="line">/* mouse over link */</span><br><span class="line">a:hover &#123; color: #bbbbbb; &#125;</span><br><span class="line"></span><br><span class="line">/* selected link */</span><br><span class="line">a:active &#123; color: #cccccc; &#125;</span><br></pre></td></tr></table></figure></li><li>And, finally, just something I have in all my CSS’. A trick to create space in html.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">span + span &#123;                                                                                                                                                          margin-left: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I’ve been struggling with a web problem that, seen by the amount of google entries with similar situations, is very common.&lt;br&gt;To wit, ho</summary>
      
    
    
    
    
    <category term="footer, html, CSS" scheme="http://constantconstipation.club/tags/footer-html-CSS/"/>
    
  </entry>
  
</feed>
